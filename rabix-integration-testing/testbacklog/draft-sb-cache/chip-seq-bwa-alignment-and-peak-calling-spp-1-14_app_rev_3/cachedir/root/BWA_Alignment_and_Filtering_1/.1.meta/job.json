{
  "id" : "3165d444-2ec2-410e-91fe-7930b35e3843",
  "parentId" : "ac0f475b-b147-4241-8058-86bb3c60e57f",
  "rootId" : "9f1dff12-c79b-4dbd-9b71-b2610b2b3bc9",
  "name" : "root.BWA_Alignment_and_Filtering_1.1",
  "app" : "data:text/plain;base64,",
  "status" : "COMPLETED",
  "inputs" : {
    "cpu" : 7,
    "input_reads" : [ {
      "size" : 440333001,
      "path" : "/media/storage2/workdir/LocalRerun20170816150257/app-2017-08-16-151652.488/root/SBG_Set_Metadata_1/NRSF_K562_control_rep1.fastq.gz",
      "location" : "/media/storage2/workdir/LocalRerun20170816150257/app-2017-08-16-151652.488/root/SBG_Set_Metadata_1/NRSF_K562_control_rep1.fastq.gz",
      "name" : "NRSF_K562_control_rep1.fastq.gz",
      "checksum" : "sha1$79960771cee74cde12e67de0a39b1ca2baeb41b3",
      "secondaryFiles" : [ ],
      "properties" : {
        "sbg:metadata" : {
          "case_id" : "1",
          "chip-seq" : "control",
          "sample_id" : "NRSF_K562_control_rep1"
        }
      },
      "$type" : "File"
    } ],
    "reference_index_tar" : [ {
      "size" : 6297866240,
      "path" : "/media/storage2/workdir/LocalRerun20170816150257/app-2017-08-16-151652.488/root/BWA_Alignment_and_Filtering_1/1/GRCh38_no_alt_analysis_set_GCA_000001405.15.fasta.gz.tar",
      "location" : "/media/storage2/workdir/LocalRerun20170816150257/files/GRCh38_no_alt_analysis_set_GCA_000001405.15.fasta.gz.tar",
      "name" : "GRCh38_no_alt_analysis_set_GCA_000001405.15.fasta.gz.tar",
      "checksum" : "sha1$049ec5969f1212dcba94c52f8c4e0e1d62eb1dc6",
      "secondaryFiles" : [ ],
      "properties" : {
        "sbg:metadata" : {
          "reference_genome" : "GRCh38",
          "species" : "Homo sapiens"
        }
      },
      "$type" : "File"
    } ],
    "threads" : 16
  },
  "outputs" : {
    "aligned_reads" : {
      "size" : 393576761,
      "path" : "/media/storage2/workdir/LocalRerun20170816150257/app-2017-08-16-151652.488/root/BWA_Alignment_and_Filtering_1/1/NRSF_K562_control_rep1.bam",
      "location" : "/media/storage2/workdir/LocalRerun20170816150257/app-2017-08-16-151652.488/root/BWA_Alignment_and_Filtering_1/1/NRSF_K562_control_rep1.bam",
      "name" : "NRSF_K562_control_rep1.bam",
      "checksum" : "sha1$2b97bb4f8b2c4d167869442f061c16969bef5021",
      "secondaryFiles" : [ {
        "$type" : "File",
        "size" : 0,
        "path" : "/media/storage2/workdir/LocalRerun20170816150257/app-2017-08-16-151652.488/root/BWA_Alignment_and_Filtering_1/1/NRSF_K562_control_rep1.bam.*.bai",
        "location" : "/media/storage2/workdir/LocalRerun20170816150257/app-2017-08-16-151652.488/root/BWA_Alignment_and_Filtering_1/1/NRSF_K562_control_rep1.bam.*.bai",
        "name" : "NRSF_K562_control_rep1.bam.*.bai",
        "secondaryFiles" : [ ],
        "properties" : {
          "sbg:metadata" : null
        },
        "$type" : "File"
      } ],
      "properties" : {
        "sbg:metadata" : {
          "case_id" : "1",
          "chip-seq" : "control",
          "sample_id" : "NRSF_K562_control_rep1"
        }
      },
      "$type" : "File"
    },
    "alignment_statistics" : {
      "size" : 388,
      "path" : "/media/storage2/workdir/LocalRerun20170816150257/app-2017-08-16-151652.488/root/BWA_Alignment_and_Filtering_1/1/NRSF_K562_control_rep1.qc_flagstats.txt",
      "location" : "/media/storage2/workdir/LocalRerun20170816150257/app-2017-08-16-151652.488/root/BWA_Alignment_and_Filtering_1/1/NRSF_K562_control_rep1.qc_flagstats.txt",
      "name" : "NRSF_K562_control_rep1.qc_flagstats.txt",
      "checksum" : "sha1$0cd7694e1ce5e98d49838a94b86db6745cb006d4",
      "secondaryFiles" : [ ],
      "properties" : {
        "sbg:metadata" : {
          "case_id" : "1",
          "chip-seq" : "control",
          "sample_id" : "NRSF_K562_control_rep1"
        }
      },
      "$type" : "File"
    }
  },
  "resources" : {
    "cpu" : 32,
    "memMB" : 46967,
    "diskSpaceMB" : null,
    "networkAccess" : true,
    "workingDir" : null,
    "tmpDir" : null,
    "outDirSize" : null,
    "tmpDirSize" : null
  },
  "visiblePorts" : [ ]
}