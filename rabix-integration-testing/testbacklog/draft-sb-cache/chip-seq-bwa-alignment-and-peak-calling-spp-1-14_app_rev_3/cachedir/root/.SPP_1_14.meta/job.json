{
  "id" : "dd32ffdc-c49a-4d96-a33a-c6fdbdeacfcf",
  "parentId" : "9f1dff12-c79b-4dbd-9b71-b2610b2b3bc9",
  "rootId" : "9f1dff12-c79b-4dbd-9b71-b2610b2b3bc9",
  "name" : "root.SPP_1_14",
  "app" : "data:text/plain;base64,",
  "status" : "COMPLETED",
  "inputs" : {
    "call_narrowPeaks" : true,
    "call_regionPeaks" : true,
    "fdr" : "0.01",
    "fragLen" : 100,
    "input_bams" : [ {
      "size" : 336857172,
      "path" : "/media/storage2/workdir/LocalRerun20170816150257/app-2017-08-16-151652.488/root/SBG_Filter_ChIP_seq_BAM_1/1/NRSF_K562_control_rep1.deduped.filter.srt.bam",
      "location" : "/media/storage2/workdir/LocalRerun20170816150257/app-2017-08-16-151652.488/root/SBG_Filter_ChIP_seq_BAM_1/1/NRSF_K562_control_rep1.deduped.filter.srt.bam",
      "name" : "NRSF_K562_control_rep1.deduped.filter.srt.bam",
      "checksum" : "sha1$d463e95b3c091046f09af0a1a764bbef8888fe4b",
      "secondaryFiles" : [ ],
      "properties" : {
        "sbg:metadata" : {
          "__inherit__" : "input_bam",
          "case_id" : "1",
          "chip-seq" : "control",
          "sample_id" : "NRSF_K562_control_rep1"
        }
      },
      "$type" : "File"
    }, {
      "size" : 586250712,
      "path" : "/media/storage2/workdir/LocalRerun20170816150257/app-2017-08-16-151652.488/root/SBG_Filter_ChIP_seq_BAM_1/2/NRSF_K562_benchmark_rep1.deduped.filter.srt.bam",
      "location" : "/media/storage2/workdir/LocalRerun20170816150257/app-2017-08-16-151652.488/root/SBG_Filter_ChIP_seq_BAM_1/2/NRSF_K562_benchmark_rep1.deduped.filter.srt.bam",
      "name" : "NRSF_K562_benchmark_rep1.deduped.filter.srt.bam",
      "checksum" : "sha1$f1d981d5595e5a6a9efd300a7025565653f48f9c",
      "secondaryFiles" : [ ],
      "properties" : {
        "sbg:metadata" : {
          "__inherit__" : "input_bam",
          "case_id" : "1",
          "chip-seq" : "sample",
          "sample_id" : "NRSF_K562_benchmark_rep1"
        }
      },
      "$type" : "File"
    } ],
    "run_spp_nodups" : true,
    "savePlot" : true,
    "saveRData" : true,
    "threads" : 8
  },
  "outputs" : {
    "out_crosscorr_pdf" : {
      "size" : 7134,
      "path" : "/media/storage2/workdir/LocalRerun20170816150257/app-2017-08-16-151652.488/root/SPP_1_14/NRSF_K562_benchmark_rep1_SPPxcorplot.pdf",
      "location" : "/media/storage2/workdir/LocalRerun20170816150257/app-2017-08-16-151652.488/root/SPP_1_14/NRSF_K562_benchmark_rep1_SPPxcorplot.pdf",
      "name" : "NRSF_K562_benchmark_rep1_SPPxcorplot.pdf",
      "checksum" : "sha1$7284fe0c48652c83601042236f8372d9f4ffe425",
      "secondaryFiles" : [ ],
      "properties" : {
        "sbg:metadata" : null
      },
      "$type" : "File"
    },
    "output_NarrowPeak" : {
      "size" : 493848,
      "path" : "/media/storage2/workdir/LocalRerun20170816150257/app-2017-08-16-151652.488/root/SPP_1_14/NRSF_K562_benchmark_rep1_SPPpeaks.narrowPeak.gz",
      "location" : "/media/storage2/workdir/LocalRerun20170816150257/app-2017-08-16-151652.488/root/SPP_1_14/NRSF_K562_benchmark_rep1_SPPpeaks.narrowPeak.gz",
      "name" : "NRSF_K562_benchmark_rep1_SPPpeaks.narrowPeak.gz",
      "checksum" : "sha1$cbf570097c26f3074c3b4800318dfba595bf8cc2",
      "secondaryFiles" : [ ],
      "properties" : {
        "sbg:metadata" : null
      },
      "$type" : "File"
    },
    "output_Rdata" : {
      "size" : 3504687,
      "path" : "/media/storage2/workdir/LocalRerun20170816150257/app-2017-08-16-151652.488/root/SPP_1_14/NRSF_K562_benchmark_rep1_SPPmodel.Rdata",
      "location" : "/media/storage2/workdir/LocalRerun20170816150257/app-2017-08-16-151652.488/root/SPP_1_14/NRSF_K562_benchmark_rep1_SPPmodel.Rdata",
      "name" : "NRSF_K562_benchmark_rep1_SPPmodel.Rdata",
      "checksum" : "sha1$1ce09e310697cdc4f90d392b1d214b24ef16377b",
      "secondaryFiles" : [ ],
      "properties" : {
        "sbg:metadata" : null
      },
      "$type" : "File"
    },
    "output_RegionPeak" : {
      "size" : 498311,
      "path" : "/media/storage2/workdir/LocalRerun20170816150257/app-2017-08-16-151652.488/root/SPP_1_14/NRSF_K562_benchmark_rep1_SPPpeaks.regionPeak.gz",
      "location" : "/media/storage2/workdir/LocalRerun20170816150257/app-2017-08-16-151652.488/root/SPP_1_14/NRSF_K562_benchmark_rep1_SPPpeaks.regionPeak.gz",
      "name" : "NRSF_K562_benchmark_rep1_SPPpeaks.regionPeak.gz",
      "checksum" : "sha1$ef8cdebdd8b06b37df75704b4633ecfed4dc898c",
      "secondaryFiles" : [ ],
      "properties" : {
        "sbg:metadata" : null
      },
      "$type" : "File"
    }
  },
  "resources" : {
    "cpu" : 32,
    "memMB" : 46967,
    "diskSpaceMB" : null,
    "networkAccess" : true,
    "workingDir" : null,
    "tmpDir" : null,
    "outDirSize" : null,
    "tmpDirSize" : null
  },
  "visiblePorts" : [ "output_NarrowPeak", "output_Rdata", "out_crosscorr_pdf" ]
}