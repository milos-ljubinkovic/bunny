{
  "id" : "e979e650-10e0-44d7-8bca-423ee8e31e5c",
  "parentId" : "f9ed4098-f2e4-4ce6-b151-2d8e5f7d671d",
  "rootId" : "9f1dff12-c79b-4dbd-9b71-b2610b2b3bc9",
  "name" : "root.ChIP_seq_Cross_Correlation.2",
  "app" : "data:text/plain;base64,",
  "status" : "COMPLETED",
  "inputs" : {
    "input_bam" : [ {
      "size" : 586250712,
      "path" : "/media/storage2/workdir/LocalRerun20170816150257/app-2017-08-16-151652.488/root/SBG_Filter_ChIP_seq_BAM_1/2/NRSF_K562_benchmark_rep1.deduped.filter.srt.bam",
      "location" : "/media/storage2/workdir/LocalRerun20170816150257/app-2017-08-16-151652.488/root/SBG_Filter_ChIP_seq_BAM_1/2/NRSF_K562_benchmark_rep1.deduped.filter.srt.bam",
      "name" : "NRSF_K562_benchmark_rep1.deduped.filter.srt.bam",
      "checksum" : "sha1$f1d981d5595e5a6a9efd300a7025565653f48f9c",
      "secondaryFiles" : [ ],
      "properties" : {
        "sbg:metadata" : {
          "__inherit__" : "input_bam",
          "case_id" : "1",
          "chip-seq" : "sample",
          "sample_id" : "NRSF_K562_benchmark_rep1"
        }
      },
      "$type" : "File"
    } ]
  },
  "outputs" : {
    "intermediate_TA_file" : {
      "size" : 479701269,
      "path" : "/media/storage2/workdir/LocalRerun20170816150257/app-2017-08-16-151652.488/root/ChIP_seq_Cross_Correlation/2/NRSF_K562_benchmark_rep1.deduped.filter.srt.tagAlign",
      "location" : "/media/storage2/workdir/LocalRerun20170816150257/app-2017-08-16-151652.488/root/ChIP_seq_Cross_Correlation/2/NRSF_K562_benchmark_rep1.deduped.filter.srt.tagAlign",
      "name" : "NRSF_K562_benchmark_rep1.deduped.filter.srt.tagAlign",
      "checksum" : "sha1$ea0d87c9c7008e0f37fc483ed5dcfb615c26070b",
      "secondaryFiles" : [ ],
      "properties" : {
        "sbg:metadata" : {
          "__inherit__" : "input_bam",
          "case_id" : "1",
          "chip-seq" : "sample",
          "sample_id" : "NRSF_K562_benchmark_rep1"
        }
      },
      "$type" : "File"
    },
    "output_xcor_metrics" : {
      "size" : 309,
      "path" : "/media/storage2/workdir/LocalRerun20170816150257/app-2017-08-16-151652.488/root/ChIP_seq_Cross_Correlation/2/NRSF_K562_benchmark_rep1.deduped.filter.srt.xcor.qc.json",
      "location" : "/media/storage2/workdir/LocalRerun20170816150257/app-2017-08-16-151652.488/root/ChIP_seq_Cross_Correlation/2/NRSF_K562_benchmark_rep1.deduped.filter.srt.xcor.qc.json",
      "name" : "NRSF_K562_benchmark_rep1.deduped.filter.srt.xcor.qc.json",
      "checksum" : "sha1$d139217f5280a7dc1db01ee1316d20836371c1c3",
      "secondaryFiles" : [ ],
      "properties" : {
        "sbg:metadata" : {
          "__inherit__" : "input_bam",
          "case_id" : "1",
          "chip-seq" : "sample",
          "sample_id" : "NRSF_K562_benchmark_rep1"
        }
      },
      "$type" : "File"
    },
    "output_xcor_plot" : {
      "size" : 180375,
      "path" : "/media/storage2/workdir/LocalRerun20170816150257/app-2017-08-16-151652.488/root/ChIP_seq_Cross_Correlation/2/NRSF_K562_benchmark_rep1.deduped.filter.srt.xcor.png",
      "location" : "/media/storage2/workdir/LocalRerun20170816150257/app-2017-08-16-151652.488/root/ChIP_seq_Cross_Correlation/2/NRSF_K562_benchmark_rep1.deduped.filter.srt.xcor.png",
      "name" : "NRSF_K562_benchmark_rep1.deduped.filter.srt.xcor.png",
      "checksum" : "sha1$88ea870240d8bd6766d342627728fdb5fa96b98b",
      "secondaryFiles" : [ ],
      "properties" : {
        "sbg:metadata" : {
          "__inherit__" : "input_bam",
          "case_id" : "1",
          "chip-seq" : "sample",
          "sample_id" : "NRSF_K562_benchmark_rep1"
        }
      },
      "$type" : "File"
    }
  },
  "resources" : {
    "cpu" : 32,
    "memMB" : 46967,
    "diskSpaceMB" : null,
    "networkAccess" : true,
    "workingDir" : null,
    "tmpDir" : null,
    "outDirSize" : null,
    "tmpDirSize" : null
  },
  "visiblePorts" : [ ]
}