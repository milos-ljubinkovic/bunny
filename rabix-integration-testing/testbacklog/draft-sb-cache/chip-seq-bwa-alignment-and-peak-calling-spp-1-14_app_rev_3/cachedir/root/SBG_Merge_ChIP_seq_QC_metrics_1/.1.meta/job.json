{
  "id" : "99a595c2-679f-4966-8b78-ac10e3e4f906",
  "parentId" : "af69e91a-a134-437c-ac7e-fb9b50d4200e",
  "rootId" : "9f1dff12-c79b-4dbd-9b71-b2610b2b3bc9",
  "name" : "root.SBG_Merge_ChIP_seq_QC_metrics_1.1",
  "app" : "data:text/plain;base64,",
  "status" : "COMPLETED",
  "inputs" : {
    "input_files" : [ {
      "size" : 307,
      "path" : "/media/storage2/workdir/LocalRerun20170816150257/app-2017-08-16-151652.488/root/SBG_Merge_ChIP_seq_QC_metrics_1/1/NRSF_K562_control_rep1.deduped.filter.srt.xcor.qc.json",
      "location" : "/media/storage2/workdir/LocalRerun20170816150257/app-2017-08-16-151652.488/root/ChIP_seq_Cross_Correlation/1/NRSF_K562_control_rep1.deduped.filter.srt.xcor.qc.json",
      "name" : "NRSF_K562_control_rep1.deduped.filter.srt.xcor.qc.json",
      "checksum" : "sha1$103eae38f154593ca96a45236ab66bf11e9bf2b3",
      "secondaryFiles" : [ ],
      "properties" : {
        "sbg:metadata" : {
          "__inherit__" : "input_bam",
          "case_id" : "1",
          "chip-seq" : "control",
          "sample_id" : "NRSF_K562_control_rep1"
        }
      },
      "$type" : "File"
    }, {
      "size" : 387,
      "path" : "/media/storage2/workdir/LocalRerun20170816150257/app-2017-08-16-151652.488/root/SBG_Merge_ChIP_seq_QC_metrics_1/1/NRSF_K562_control_rep1.deduped.filter.srt.qc_flagstats.txt",
      "location" : "/media/storage2/workdir/LocalRerun20170816150257/app-2017-08-16-151652.488/root/ChIP_seq_SAMtools_flagstat_1/1/NRSF_K562_control_rep1.deduped.filter.srt.qc_flagstats.txt",
      "name" : "NRSF_K562_control_rep1.deduped.filter.srt.qc_flagstats.txt",
      "checksum" : "sha1$9ccdb70ea29d5b65e7404ccdd3dc1b5dfa9c4c82",
      "secondaryFiles" : [ ],
      "properties" : {
        "sbg:metadata" : {
          "__inherit__" : "input_bam",
          "case_id" : "1",
          "chip-seq" : "control",
          "sample_id" : "NRSF_K562_control_rep1"
        }
      },
      "$type" : "File"
    }, {
      "size" : 388,
      "path" : "/media/storage2/workdir/LocalRerun20170816150257/app-2017-08-16-151652.488/root/SBG_Merge_ChIP_seq_QC_metrics_1/1/NRSF_K562_control_rep1.qc_flagstats.txt",
      "location" : "/media/storage2/workdir/LocalRerun20170816150257/app-2017-08-16-151652.488/root/BWA_Alignment_and_Filtering_1/1/NRSF_K562_control_rep1.qc_flagstats.txt",
      "name" : "NRSF_K562_control_rep1.qc_flagstats.txt",
      "checksum" : "sha1$0cd7694e1ce5e98d49838a94b86db6745cb006d4",
      "secondaryFiles" : [ ],
      "properties" : {
        "sbg:metadata" : {
          "case_id" : "1",
          "chip-seq" : "control",
          "sample_id" : "NRSF_K562_control_rep1"
        }
      },
      "$type" : "File"
    }, {
      "size" : 205225,
      "path" : "/media/storage2/workdir/LocalRerun20170816150257/app-2017-08-16-151652.488/root/SBG_Merge_ChIP_seq_QC_metrics_1/1/NRSF_K562_control_rep1.deduped.filter.srt.xcor.png",
      "location" : "/media/storage2/workdir/LocalRerun20170816150257/app-2017-08-16-151652.488/root/ChIP_seq_Cross_Correlation/1/NRSF_K562_control_rep1.deduped.filter.srt.xcor.png",
      "name" : "NRSF_K562_control_rep1.deduped.filter.srt.xcor.png",
      "checksum" : "sha1$75aa34e2f3f56b29fd7dadeac5e5b3aea495e6e6",
      "secondaryFiles" : [ ],
      "properties" : {
        "sbg:metadata" : {
          "__inherit__" : "input_bam",
          "case_id" : "1",
          "chip-seq" : "control",
          "sample_id" : "NRSF_K562_control_rep1"
        }
      },
      "$type" : "File"
    }, {
      "size" : 209,
      "path" : "/media/storage2/workdir/LocalRerun20170816150257/app-2017-08-16-151652.488/root/SBG_Merge_ChIP_seq_QC_metrics_1/1/NRSF_K562_control_rep1.deduped.libcomp.qc.json",
      "location" : "/media/storage2/workdir/LocalRerun20170816150257/app-2017-08-16-151652.488/root/SBG_ChIP_seq_Library_Complexity/1/NRSF_K562_control_rep1.deduped.libcomp.qc.json",
      "name" : "NRSF_K562_control_rep1.deduped.libcomp.qc.json",
      "checksum" : "sha1$d25147de80e8ce893c24fd605ade8fe24e20e035",
      "secondaryFiles" : [ ],
      "properties" : {
        "sbg:metadata" : {
          "__inherit__" : "input_bam",
          "case_id" : "1",
          "chip-seq" : "control",
          "sample_id" : "NRSF_K562_control_rep1"
        }
      },
      "$type" : "File"
    } ]
  },
  "outputs" : {
    "b64html" : {
      "size" : 377298,
      "path" : "/media/storage2/workdir/LocalRerun20170816150257/app-2017-08-16-151652.488/root/SBG_Merge_ChIP_seq_QC_metrics_1/1/NRSF_K562_control_rep1.qc.b64html",
      "location" : "/media/storage2/workdir/LocalRerun20170816150257/app-2017-08-16-151652.488/root/SBG_Merge_ChIP_seq_QC_metrics_1/1/NRSF_K562_control_rep1.qc.b64html",
      "name" : "NRSF_K562_control_rep1.qc.b64html",
      "checksum" : "sha1$9715c7982d778119fd70c55262ea8e55e3b8216e",
      "secondaryFiles" : [ ],
      "properties" : {
        "sbg:metadata" : null
      },
      "$type" : "File"
    },
    "output_html" : {
      "size" : 280573,
      "path" : "/media/storage2/workdir/LocalRerun20170816150257/app-2017-08-16-151652.488/root/SBG_Merge_ChIP_seq_QC_metrics_1/1/NRSF_K562_control_rep1.qc.html",
      "location" : "/media/storage2/workdir/LocalRerun20170816150257/app-2017-08-16-151652.488/root/SBG_Merge_ChIP_seq_QC_metrics_1/1/NRSF_K562_control_rep1.qc.html",
      "name" : "NRSF_K562_control_rep1.qc.html",
      "checksum" : "sha1$6e2cfe31ac4d10ffec8ecedeb7fad8dda96aa842",
      "secondaryFiles" : [ ],
      "properties" : {
        "sbg:metadata" : null
      },
      "$type" : "File"
    },
    "output_json" : {
      "size" : 1212,
      "path" : "/media/storage2/workdir/LocalRerun20170816150257/app-2017-08-16-151652.488/root/SBG_Merge_ChIP_seq_QC_metrics_1/1/NRSF_K562_control_rep1.qc.json",
      "location" : "/media/storage2/workdir/LocalRerun20170816150257/app-2017-08-16-151652.488/root/SBG_Merge_ChIP_seq_QC_metrics_1/1/NRSF_K562_control_rep1.qc.json",
      "name" : "NRSF_K562_control_rep1.qc.json",
      "checksum" : "sha1$7dccff71e9c781dc1d27b51a2f476b1c2833d329",
      "secondaryFiles" : [ ],
      "properties" : {
        "sbg:metadata" : null
      },
      "$type" : "File"
    }
  },
  "resources" : {
    "cpu" : 32,
    "memMB" : 46967,
    "diskSpaceMB" : null,
    "networkAccess" : true,
    "workingDir" : null,
    "tmpDir" : null,
    "outDirSize" : null,
    "tmpDirSize" : null
  },
  "visiblePorts" : [ "b64html", "output_json" ]
}