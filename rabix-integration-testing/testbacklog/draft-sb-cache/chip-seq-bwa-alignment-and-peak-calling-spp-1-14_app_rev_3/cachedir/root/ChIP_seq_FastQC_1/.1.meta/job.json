{
  "id" : "b5773086-8f0a-472e-98f5-6cb6d6e1a0fd",
  "parentId" : "1fa49248-5dfc-4e13-9de4-f27e4d298915",
  "rootId" : "9f1dff12-c79b-4dbd-9b71-b2610b2b3bc9",
  "name" : "root.ChIP_seq_FastQC_1.1",
  "app" : "data:text/plain;base64,",
  "status" : "COMPLETED",
  "inputs" : {
    "input_fastq" : [ {
      "size" : 440333001,
      "path" : "/media/storage2/workdir/LocalRerun20170816150257/app-2017-08-16-151652.488/root/SBG_Set_Metadata_1/NRSF_K562_control_rep1.fastq.gz",
      "location" : "/media/storage2/workdir/LocalRerun20170816150257/app-2017-08-16-151652.488/root/SBG_Set_Metadata_1/NRSF_K562_control_rep1.fastq.gz",
      "name" : "NRSF_K562_control_rep1.fastq.gz",
      "checksum" : "sha1$79960771cee74cde12e67de0a39b1ca2baeb41b3",
      "secondaryFiles" : [ ],
      "properties" : {
        "sbg:metadata" : {
          "case_id" : "1",
          "chip-seq" : "control",
          "sample_id" : "NRSF_K562_control_rep1"
        }
      },
      "$type" : "File"
    } ]
  },
  "outputs" : {
    "report_zip" : [ {
      "size" : 316467,
      "path" : "/media/storage2/workdir/LocalRerun20170816150257/app-2017-08-16-151652.488/root/ChIP_seq_FastQC_1/1/NRSF_K562_control_rep1_fastqc.zip",
      "location" : "/media/storage2/workdir/LocalRerun20170816150257/app-2017-08-16-151652.488/root/ChIP_seq_FastQC_1/1/NRSF_K562_control_rep1_fastqc.zip",
      "name" : "NRSF_K562_control_rep1_fastqc.zip",
      "checksum" : "sha1$398e2f71e5cced6ddb553451412afaa744f3a39f",
      "secondaryFiles" : [ ],
      "properties" : {
        "sbg:metadata" : {
          "__inherit__" : "input_fastq",
          "case_id" : "1",
          "chip-seq" : "control",
          "sample_id" : "NRSF_K562_control_rep1"
        }
      },
      "$type" : "File"
    } ]
  },
  "resources" : {
    "cpu" : 32,
    "memMB" : 46967,
    "diskSpaceMB" : null,
    "networkAccess" : true,
    "workingDir" : null,
    "tmpDir" : null,
    "outDirSize" : null,
    "tmpDirSize" : null
  },
  "visiblePorts" : [ "report_zip" ]
}