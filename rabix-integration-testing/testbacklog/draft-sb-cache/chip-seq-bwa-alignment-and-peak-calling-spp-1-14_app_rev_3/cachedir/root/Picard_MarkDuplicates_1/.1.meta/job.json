{
  "id" : "f208bf5c-4d37-4b30-9863-c0b178e29412",
  "parentId" : "4f180852-7068-4b32-8ae4-8a4a5426cda3",
  "rootId" : "9f1dff12-c79b-4dbd-9b71-b2610b2b3bc9",
  "name" : "root.Picard_MarkDuplicates_1.1",
  "app" : "data:text/plain;base64,",
  "status" : "COMPLETED",
  "inputs" : {
    "input_bam" : [ {
      "size" : 393576761,
      "path" : "/media/storage2/workdir/LocalRerun20170816150257/app-2017-08-16-151652.488/root/BWA_Alignment_and_Filtering_1/1/NRSF_K562_control_rep1.bam",
      "location" : "/media/storage2/workdir/LocalRerun20170816150257/app-2017-08-16-151652.488/root/BWA_Alignment_and_Filtering_1/1/NRSF_K562_control_rep1.bam",
      "name" : "NRSF_K562_control_rep1.bam",
      "checksum" : "sha1$2b97bb4f8b2c4d167869442f061c16969bef5021",
      "secondaryFiles" : [ {
        "$type" : "File",
        "size" : 0,
        "path" : "/media/storage2/workdir/LocalRerun20170816150257/app-2017-08-16-151652.488/root/BWA_Alignment_and_Filtering_1/1/NRSF_K562_control_rep1.bam.*.bai",
        "location" : "/media/storage2/workdir/LocalRerun20170816150257/app-2017-08-16-151652.488/root/BWA_Alignment_and_Filtering_1/1/NRSF_K562_control_rep1.bam.*.bai",
        "name" : "NRSF_K562_control_rep1.bam.*.bai",
        "secondaryFiles" : [ ],
        "properties" : {
          "sbg:metadata" : null
        },
        "$type" : "File"
      } ],
      "properties" : {
        "sbg:metadata" : {
          "case_id" : "1",
          "chip-seq" : "control",
          "sample_id" : "NRSF_K562_control_rep1"
        }
      },
      "$type" : "File"
    } ]
  },
  "outputs" : {
    "deduped_bam" : {
      "size" : 404996387,
      "path" : "/media/storage2/workdir/LocalRerun20170816150257/app-2017-08-16-151652.488/root/Picard_MarkDuplicates_1/1/NRSF_K562_control_rep1.deduped.bam",
      "location" : "/media/storage2/workdir/LocalRerun20170816150257/app-2017-08-16-151652.488/root/Picard_MarkDuplicates_1/1/NRSF_K562_control_rep1.deduped.bam",
      "name" : "NRSF_K562_control_rep1.deduped.bam",
      "checksum" : "sha1$a3cf37bd9d512091020155fd7b664e9afe1132e7",
      "secondaryFiles" : [ {
        "$type" : "File",
        "size" : 0,
        "path" : "/media/storage2/workdir/LocalRerun20170816150257/app-2017-08-16-151652.488/root/Picard_MarkDuplicates_1/1/NRSF_K562_control_rep1.deduped.bai",
        "location" : "/media/storage2/workdir/LocalRerun20170816150257/app-2017-08-16-151652.488/root/Picard_MarkDuplicates_1/1/NRSF_K562_control_rep1.deduped.bai",
        "name" : "NRSF_K562_control_rep1.deduped.bai",
        "secondaryFiles" : [ ],
        "properties" : {
          "sbg:metadata" : null
        },
        "$type" : "File"
      }, {
        "$type" : "File",
        "size" : 0,
        "path" : "/media/storage2/workdir/LocalRerun20170816150257/app-2017-08-16-151652.488/root/Picard_MarkDuplicates_1/1/NRSF_K562_control_rep1.deduped.bam.bai",
        "location" : "/media/storage2/workdir/LocalRerun20170816150257/app-2017-08-16-151652.488/root/Picard_MarkDuplicates_1/1/NRSF_K562_control_rep1.deduped.bam.bai",
        "name" : "NRSF_K562_control_rep1.deduped.bam.bai",
        "secondaryFiles" : [ ],
        "properties" : {
          "sbg:metadata" : null
        },
        "$type" : "File"
      } ],
      "properties" : {
        "sbg:metadata" : {
          "__inherit__" : "input_bam",
          "case_id" : "1",
          "chip-seq" : "control",
          "sample_id" : "NRSF_K562_control_rep1"
        }
      },
      "$type" : "File"
    },
    "metrics_file" : {
      "size" : 1251,
      "path" : "/media/storage2/workdir/LocalRerun20170816150257/app-2017-08-16-151652.488/root/Picard_MarkDuplicates_1/1/NRSF_K562_control_rep1.metrics",
      "location" : "/media/storage2/workdir/LocalRerun20170816150257/app-2017-08-16-151652.488/root/Picard_MarkDuplicates_1/1/NRSF_K562_control_rep1.metrics",
      "name" : "NRSF_K562_control_rep1.metrics",
      "checksum" : "sha1$86072d5bd845ab14081405aa6cf9cf6bd2fd570f",
      "secondaryFiles" : [ ],
      "properties" : {
        "sbg:metadata" : {
          "__inherit__" : "input_bam",
          "case_id" : "1",
          "chip-seq" : "control",
          "sample_id" : "NRSF_K562_control_rep1"
        }
      },
      "$type" : "File"
    }
  },
  "resources" : {
    "cpu" : 32,
    "memMB" : 46967,
    "diskSpaceMB" : null,
    "networkAccess" : true,
    "workingDir" : null,
    "tmpDir" : null,
    "outDirSize" : null,
    "tmpDirSize" : null
  },
  "visiblePorts" : [ ]
}