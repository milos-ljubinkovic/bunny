{
  "id" : "60877066-de6d-416f-9feb-bb0ebf501dd3",
  "parentId" : "566fb4e0-e2be-4314-b08f-c5b07c23c231",
  "rootId" : "1a4fd24b-5bec-4e9e-b3f2-5fd1312ea058",
  "name" : "root.SBG_FASTQ_Quality_Adjuster.2",
  "app" : "data:text/plain;base64,",
  "status" : "COMPLETED",
  "inputs" : {
    "fastq" : [ {
      "size" : 6658418440,
      "path" : "/media/storage/workdir/LocalRerun20170721110425/app-2017-07-21-114527.26/root/SBG_FASTQ_Quality_Adjuster/2/C835.HCC1143_BL.4.converted.pe_2.fastq",
      "location" : "/media/storage/workdir/LocalRerun20170721110425/files/C835.HCC1143_BL.4.converted.pe_2.fastq",
      "name" : "C835.HCC1143_BL.4.converted.pe_2.fastq",
      "secondaryFiles" : [ ],
      "properties" : {
        "sbg:metadata" : {
          "case_id" : "CCLE-HCC1143BL",
          "experimental_strategy" : "WXS",
          "investigation" : "CCLE-BRCA",
          "paired_end" : "2",
          "platform" : "Illumina",
          "reference_genome" : "HG19_Broad_variant",
          "sample_id" : "HCC1143BL",
          "sample_type" : "EBV Immortalized Normal",
          "species" : "Homo sapiens"
        }
      },
      "$type" : "File"
    } ]
  },
  "outputs" : {
    "result" : {
      "path" : "/media/storage/workdir/LocalRerun20170721110425/app-2017-07-21-114527.26/root/SBG_FASTQ_Quality_Adjuster/2/C835.HCC1143_BL.4.converted.pe_2.std.fastq",
      "location" : "/media/storage/workdir/LocalRerun20170721110425/app-2017-07-21-114527.26/root/SBG_FASTQ_Quality_Adjuster/2/C835.HCC1143_BL.4.converted.pe_2.std.fastq",
      "name" : "C835.HCC1143_BL.4.converted.pe_2.std.fastq",
      "secondaryFiles" : [ ],
      "properties" : {
        "sbg:metadata" : {
          "case_id" : "CCLE-HCC1143BL",
          "experimental_strategy" : "WXS",
          "investigation" : "CCLE-BRCA",
          "paired_end" : "2",
          "platform" : "Illumina",
          "quality_scale" : "sanger",
          "reference_genome" : "HG19_Broad_variant",
          "sample_id" : "HCC1143BL",
          "sample_type" : "EBV Immortalized Normal",
          "species" : "Homo sapiens"
        }
      },
      "$type" : "File"
    }
  },
  "resources" : {
    "cpu" : 32,
    "memMB" : 46967,
    "diskSpaceMB" : null,
    "networkAccess" : true,
    "workingDir" : null,
    "tmpDir" : null,
    "outDirSize" : null,
    "tmpDirSize" : null
  },
  "visiblePorts" : [ ]
}