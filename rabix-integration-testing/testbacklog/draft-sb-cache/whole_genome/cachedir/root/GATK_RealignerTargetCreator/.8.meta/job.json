{
  "id" : "7d514baa-44ee-4d6f-869e-88b41fb0f3c7",
  "parentId" : "3a2db444-4cb9-49d2-9673-c0950325cb1a",
  "rootId" : "1a4fd24b-5bec-4e9e-b3f2-5fd1312ea058",
  "name" : "root.GATK_RealignerTargetCreator.8",
  "app" : "data:text/plain;base64,",
  "status" : "COMPLETED",
  "inputs" : {
    "cpu_per_job" : 1,
    "intervals_file" : [ {
      "size" : 1176,
      "path" : "/media/storage/workdir/LocalRerun20170721110425/app-2017-07-21-114527.26/root/SBG_Prepare_Intervals/Intervals/others.bed",
      "location" : "/media/storage/workdir/LocalRerun20170721110425/app-2017-07-21-114527.26/root/SBG_Prepare_Intervals/Intervals/others.bed",
      "name" : "others.bed",
      "checksum" : "sha1$4cee49911d76eb721c885517f15e23582c0e1250",
      "secondaryFiles" : [ ],
      "properties" : {
        "sbg:metadata" : {
          "sbg_scatter" : "true"
        }
      },
      "$type" : "File"
    } ],
    "known" : [ {
      "size" : 86369975,
      "path" : "/media/storage/workdir/LocalRerun20170721110425/app-2017-07-21-114527.26/root/GATK_RealignerTargetCreator/8/Mills_and_1000G_gold_standard.indels.b37.vcf",
      "location" : "/media/storage/workdir/LocalRerun20170721110425/files/Mills_and_1000G_gold_standard.indels.b37.vcf",
      "name" : "Mills_and_1000G_gold_standard.indels.b37.vcf",
      "checksum" : "sha1$414c7ab361dc659f63f42ae0585e24dcc7376366",
      "secondaryFiles" : [ ],
      "properties" : {
        "sbg:metadata" : {
          "species" : "Homo sapiens"
        }
      },
      "$type" : "File"
    }, {
      "size" : 237684308,
      "path" : "/media/storage/workdir/LocalRerun20170721110425/app-2017-07-21-114527.26/root/GATK_RealignerTargetCreator/8/1000G_phase1.indels.b37.vcf",
      "location" : "/media/storage/workdir/LocalRerun20170721110425/files/1000G_phase1.indels.b37.vcf",
      "name" : "1000G_phase1.indels.b37.vcf",
      "checksum" : "sha1$4218ecd4813d1f9d5d0d2780df96f7fb4bb97e40",
      "secondaryFiles" : [ ],
      "properties" : {
        "sbg:metadata" : { }
      },
      "$type" : "File"
    } ],
    "memory_overhead_per_job" : 64,
    "memory_per_job" : 2048,
    "reads" : [ {
      "size" : 5188458076,
      "path" : "/media/storage/workdir/LocalRerun20170721110425/app-2017-07-21-114527.26/root/BWA_MEM_Bundle_0_7_13/1/C835.HCC1143_BL.4.converted.bam",
      "location" : "/media/storage/workdir/LocalRerun20170721110425/app-2017-07-21-114527.26/root/BWA_MEM_Bundle_0_7_13/1/C835.HCC1143_BL.4.converted.bam",
      "name" : "C835.HCC1143_BL.4.converted.bam",
      "checksum" : "sha1$660e5bd2cfba5b80b884e308557858c9d3010184",
      "secondaryFiles" : [ {
        "$type" : "File",
        "size" : 5511568,
        "path" : "/media/storage/workdir/LocalRerun20170721110425/app-2017-07-21-114527.26/root/BWA_MEM_Bundle_0_7_13/1/C835.HCC1143_BL.4.converted.bam.bai",
        "location" : "/media/storage/workdir/LocalRerun20170721110425/app-2017-07-21-114527.26/root/BWA_MEM_Bundle_0_7_13/1/C835.HCC1143_BL.4.converted.bam.bai",
        "name" : "C835.HCC1143_BL.4.converted.bam.bai",
        "checksum" : "sha1$a4441371bd30384fe605c8daa6977da37a6ab7f6",
        "secondaryFiles" : [ ],
        "properties" : {
          "sbg:metadata" : null
        },
        "$type" : "File"
      }, {
        "$type" : "File",
        "size" : 0,
        "path" : "/media/storage/workdir/LocalRerun20170721110425/app-2017-07-21-114527.26/root/BWA_MEM_Bundle_0_7_13/1/C835.HCC1143_BL.4.converted.bai",
        "location" : "/media/storage/workdir/LocalRerun20170721110425/app-2017-07-21-114527.26/root/BWA_MEM_Bundle_0_7_13/1/C835.HCC1143_BL.4.converted.bai",
        "name" : "C835.HCC1143_BL.4.converted.bai",
        "secondaryFiles" : [ ],
        "properties" : {
          "sbg:metadata" : null
        },
        "$type" : "File"
      } ],
      "properties" : {
        "sbg:metadata" : {
          "case_id" : "CCLE-HCC1143BL",
          "experimental_strategy" : "WXS",
          "investigation" : "CCLE-BRCA",
          "platform" : "Illumina",
          "quality_scale" : "sanger",
          "reference_genome" : "human_g1k_v37_decoy",
          "sample_id" : "HCC1143BL",
          "sample_type" : "EBV Immortalized Normal",
          "species" : "Homo sapiens"
        }
      },
      "$type" : "File"
    } ],
    "reference" : [ {
      "size" : 3189750467,
      "path" : "/media/storage/workdir/LocalRerun20170721110425/app-2017-07-21-114527.26/root/SBG_FASTA_Indices/human_g1k_v37_decoy.fasta",
      "location" : "/media/storage/workdir/LocalRerun20170721110425/app-2017-07-21-114527.26/root/SBG_FASTA_Indices/human_g1k_v37_decoy.fasta",
      "name" : "human_g1k_v37_decoy.fasta",
      "checksum" : "sha1$992291353a574f76f4be22ed6e37a64bf37e215f",
      "secondaryFiles" : [ {
        "$type" : "File",
        "size" : 2813,
        "path" : "/media/storage/workdir/LocalRerun20170721110425/app-2017-07-21-114527.26/root/SBG_FASTA_Indices/human_g1k_v37_decoy.fasta.fai",
        "location" : "/media/storage/workdir/LocalRerun20170721110425/app-2017-07-21-114527.26/root/SBG_FASTA_Indices/human_g1k_v37_decoy.fasta.fai",
        "name" : "human_g1k_v37_decoy.fasta.fai",
        "checksum" : "sha1$655334a26593e48e5047a45d219553107e96c675",
        "secondaryFiles" : [ ],
        "properties" : {
          "sbg:metadata" : { }
        },
        "$type" : "File"
      }, {
        "$type" : "File",
        "size" : 16522,
        "path" : "/media/storage/workdir/LocalRerun20170721110425/app-2017-07-21-114527.26/root/SBG_FASTA_Indices/human_g1k_v37_decoy.dict",
        "location" : "/media/storage/workdir/LocalRerun20170721110425/app-2017-07-21-114527.26/root/SBG_FASTA_Indices/human_g1k_v37_decoy.dict",
        "name" : "human_g1k_v37_decoy.dict",
        "checksum" : "sha1$2c3380485dbf623de2fa52a8a9647cdf0850d936",
        "secondaryFiles" : [ ],
        "properties" : {
          "sbg:metadata" : { }
        },
        "$type" : "File"
      } ],
      "properties" : {
        "sbg:metadata" : { }
      },
      "$type" : "File"
    } ],
    "threads_per_job" : 4
  },
  "outputs" : {
    "indel_realigner_intervals_file" : {
      "size" : 4855,
      "path" : "/media/storage/workdir/LocalRerun20170721110425/app-2017-07-21-114527.26/root/GATK_RealignerTargetCreator/8/C835.HCC1143_BL.4.converted.intervals",
      "location" : "/media/storage/workdir/LocalRerun20170721110425/app-2017-07-21-114527.26/root/GATK_RealignerTargetCreator/8/C835.HCC1143_BL.4.converted.intervals",
      "name" : "C835.HCC1143_BL.4.converted.intervals",
      "checksum" : "sha1$e05a271d9a22dd41950872088db40c92a31b0718",
      "secondaryFiles" : [ ],
      "properties" : {
        "sbg:metadata" : {
          "case_id" : "CCLE-HCC1143BL",
          "experimental_strategy" : "WXS",
          "intervals_file" : "others.bed",
          "investigation" : "CCLE-BRCA",
          "platform" : "Illumina",
          "quality_scale" : "sanger",
          "reference_genome" : "human_g1k_v37_decoy",
          "sample_id" : "HCC1143BL",
          "sample_type" : "EBV Immortalized Normal",
          "species" : "Homo sapiens"
        }
      },
      "$type" : "File"
    }
  },
  "resources" : {
    "cpu" : 32,
    "memMB" : 46967,
    "diskSpaceMB" : null,
    "networkAccess" : true,
    "workingDir" : null,
    "tmpDir" : null,
    "outDirSize" : null,
    "tmpDirSize" : null
  },
  "visiblePorts" : [ ]
}