{
    "sbg:modifiedOn": 1496060351,
    "sbg:id": "stefanristeski/whole-genome-analysis-pipeline-demo/whole-genome-analysis-bwa-gatk-2-3-9-lite/57",
    "requirements": [],
    "description": "WGS pipeline is used to study the complete DNA sequence of an organism (known as Genome). Although WGS generally has lower coverage than WES, this method can detect variants outside of protein-coding areas and can detect changes affecting regulatory regions and various controlling mechanisms. This characteristic allows for wider application of the pipeline, especially in cases when novel variants are expected. For example, WGS can be used when the phenotype or family history strongly implicates genetic etiology but the phenotype does not correspondent to any specific disorder for which a testing targeting a specific gene is clinically available, or in case when a genetic disorder demonstrates high degree of genetic heterogeneity (H L Rehm, S J Bale et al. ACMG clinical laboratory standards for next-generation sequencing, Genet Med. 2013 September ; 15(9): 733\u2013747. doi:10.1038/gim.2013.92.). \nThe pipeline is constructed following the Broad Institute best practice and utilizing Broad Institute's GATK tools. A separate step is undertaken to assess the quality of sequenced reads using Babraham Institute's tool FastQC. \nSequenced reads are aligned with the BWA tool after which duplicates are removed. The next step uses algorithms developed by the Broad Institute to improve alignment around indels followed by the re-evaluation of the qualities of sequenced bases. Generated SAM files are pooled together and variant calling is performed. Detected variants are subjected to additional analysis resulting in refined, high quality set of identified variants (for more information on how variant calling is performed, please refer to the [Broad Institute's web site](https://www.broadinstitute.org/gatk/guide/topic?name=methods)).\n\nIn order to obtain optimal usage of instance resources and avoid creating unnecessary processes (jobs) for every region in input targets BED file two paths in the pipeline are created. First, parallel path, (tools run in Scatter mode), uses BED file with regions from all chromosomes (autosomal, X and Y). Each of these regions will be processed in parallel in RealignerTargetCreator Scatter, IndelRealigner Scatter, PrintReads Scatter and UnifiedGenotyper Scatter). Second, sequential path uses BED file with much smaller regions containing GLs and mitochondrial chromosomes. Each of these regions will be processed sequentially in RealignerTargetCreator, IndelRealigner, PrintReads and UnifiedGenotyper).",
    "sbg:sbgMaintained": false,
    "sbg:categories": [
        "WGS"
    ],
    "sbg:project": "stefanristeski/whole-genome-analysis-pipeline-demo",
    "sbg:image_url": "https://brood.sbgenomics.com/static/stefanristeski/whole-genome-analysis-pipeline-demo/whole-genome-analysis-bwa-gatk-2-3-9-lite/57.png",
    "sbg:validationErrors": [],
    "id": "https://api.sbgenomics.com/v2/apps/stefanristeski/whole-genome-analysis-pipeline-demo/whole-genome-analysis-bwa-gatk-2-3-9-lite/57/raw/",
    "sbg:revision": 57,
    "sbg:createdOn": 1459775882,
    "sbg:revisionNotes": "Tool updates.\nChanged inputs to VQSR INDELS to Mills and dbSNP per recommendations on GATK best practices:\nhttps://software.broadinstitute.org/gatk/documentation/article.php?id=1259\n\nhttps://software.broadinstitute.org/gatk/documentation/article?id=2805",
    "sbg:createdBy": "mladenlSBG",
    "hints": [],
    "label": "Whole Genome Analysis - BWA + GATK 2.3.9-Lite (with Metrics)",
    "sbg:canvas_zoom": 0.5999999999999996,
    "sbg:canvas_x": -10,
    "steps": [
        {
            "id": "#GATK_CombineVariants",
            "sbg:y": 435.23531175594775,
            "run": {
                "sbg:modifiedOn": 1458841427,
                "sbg:id": "bix-demo/gatk-2-3-9-lite-demo/gatk-2-3-9-lite-combinevariants/9",
                "sbg:toolkitVersion": "2.3.9 Lite",
                "sbg:cmdPreview": "java -Xmx2048M -jar /opt/GenomeAnalysisTKLite.jar --analysis_type CombineVariants --variant variant.vcf --out Sample_XY.Library_Unknown.Platform_Unit_Unknown.combined.vcf",
                "sbg:revision": 9,
                "requirements": [
                    {
                        "requirements": [
                            {
                                "class": "DockerRequirement",
                                "dockerPull": "rabix/js-engine"
                            }
                        ],
                        "class": "ExpressionEngineRequirement",
                        "id": "#cwl-js-engine"
                    }
                ],
                "successCodes": [],
                "sbg:sbgMaintained": false,
                "sbg:categories": [
                    "VCF-Processing"
                ],
                "sbg:project": "bix-demo/gatk-2-3-9-lite-demo",
                "sbg:image_url": null,
                "stdin": "",
                "id": "bix-demo/gatk-2-3-9-lite-demo/gatk-2-3-9-lite-combinevariants/9",
                "sbg:links": [
                    {
                        "label": "Homepage",
                        "id": "https://www.broadinstitute.org/gatk/index.php"
                    },
                    {
                        "label": "Source Code",
                        "id": "https://github.com/broadgsa/gatk-protected"
                    },
                    {
                        "label": "Wiki",
                        "id": "https://www.broadinstitute.org/gatk/guide/pdfdocs/GATK_GuideBook_2.3-9.pdf"
                    },
                    {
                        "label": "Download",
                        "id": "https://www.broadinstitute.org/gatk/download/auth?package=GATK-archive&version=2.3-9-ge5ebf34"
                    },
                    {
                        "label": "Publication",
                        "id": "https://www.broadinstitute.org/gatk/about/#in-the-literature"
                    },
                    {
                        "label": "Documentation",
                        "id": "https://www.broadinstitute.org/gatk/gatkdocs/org_broadinstitute_gatk_tools_walkers_variantutils_CombineVariants.php"
                    }
                ],
                "sbg:createdOn": 1450911447,
                "description": "Overview\n\nCombineVariants reads in variants records from separate ROD (Reference-Ordered Data) sources and combines them into a single VCF. Any (unique) name can be used to bind your ROD and any number of sources can be input. This tool aims to fulfill two main possible use cases, reflected by the two combination options (MERGE and UNION), for merging records at the variant level (the first 8 fields of the VCF) or at the genotype level (the rest).\n\nMERGE: combines multiple variant records present at the same site in the different input sources into a single variant record in the output. If sample names overlap, then they are \"uniquified\" by default, which means a suffix is appended to make them unique. Note that in version 3.3, the automatic uniquifying was disabled (unintentionally), and required setting `-genotypeMergeOptions UNIQUIFY` manually.\nUNION: assumes that each ROD source represents the same set of samples (although this is not enforced). It uses the priority list (if provided) to emit a single record instance at every position represented in the input RODs.\nCombineVariants will emit a record for every site that was present in any of your input VCF files, and will annotate (in the set attribute in the INFO field) whether the record had a PASS or FILTER status in each input ROD . In effect, CombineVariants always produces a union of the input VCFs. However, any part of the Venn of the merged VCFs can be extracted using JEXL expressions on the set attribute using SelectVariants. If you want to extract just the records in common between two VCFs, you would first run CombineVariants on the two files to generate a single VCF and then run SelectVariants to extract the common records with `-select 'set == \"Intersection\"'`, as worked out in the detailed example in the documentation guide.\n\nInput\nTwo or more variant sets to combine.\n\nOutput\nA combined VCF.\n\nUsage examples\n\nMerge two separate callsets\n java -jar GenomeAnalysisTK.jar \\\n   -T CombineVariants \\\n   -R reference.fasta \\\n   --variant input1.vcf \\\n   --variant input2.vcf \\\n   -o output.vcf \\\n   -genotypeMergeOptions UNIQUIFY\n \nGet the union of calls made on the same samples\n java -jar GenomeAnalysisTK.jar \\\n   -T CombineVariants \\\n   -R reference.fasta \\\n   --variant:foo input1.vcf \\\n   --variant:bar input2.vcf \\\n   -o output.vcf \\\n   -genotypeMergeOptions PRIORITIZE \\\n   -priority foo,bar\n \nCaveats\n\nThis tool is not intended to manipulate GVCFS! To combine GVCF files output by HaplotypeCaller, use CombineGVCFs.\nTo join intermediate VCFs produced by running jobs in parallel by interval (e.g. by chromosome), use CatVariants.\n\nAdditional notes\n\nUsing this tool's multi-threaded parallelism capability is particularly useful when converting from VCF to BCF2, which can be time-consuming. In this case each thread spends CPU time doing the conversion, and the GATK engine is smart enough to merge the partial BCF2 blocks together efficiently. However, since this merge runs in only one thread, you can quickly reach diminishing returns with the number of parallel threads. In our hands, `-nt 4` works well but `-nt 8` tends to be be too much.\nSince GATK 2.1, when merging multiple VCF records at a site, the combined VCF record has the QUAL of the first VCF record with a non-MISSING QUAL value. The previous behavior was to take the max QUAL, which could result in strange downstream confusion.\n\n(IMPORTANT) Reference \".fasta\" Secondary Files\n\nTools in GATK that require a fasta reference file also look for the reference file's corresponding .fai (fasta index) and .dict (fasta dictionary) files. The fasta index file allows random access to reference bases and the dictionary file is a dictionary of the contig names and sizes contained within the fasta reference. These two secondary files are essential for GATK to work properly. To append these two files to your fasta reference please use the 'SBG FASTA Indices' tool within your GATK based workflow before using any of the GATK tools.",
                "hints": [
                    {
                        "dockerImageId": "47510cb2da55",
                        "class": "DockerRequirement",
                        "dockerPull": "images.sbgenomics.com/stefanristeski/gatk2-lite:2.3-9"
                    },
                    {
                        "value": {
                            "script": "{\n  if($job.inputs.cpu_per_job){\n  \treturn $job.inputs.cpu_per_job\n  }\n  return 1 \n}",
                            "engine": "#cwl-js-engine",
                            "class": "Expression"
                        },
                        "class": "sbg:CPURequirement"
                    },
                    {
                        "value": {
                            "script": "{\n  if($job.inputs.memory_per_job){\n    if($job.inputs.memory_overhead_per_job){\n    \treturn $job.inputs.memory_per_job + $job.inputs.memory_overhead_per_job\n    }\n    else\n  \t\treturn $job.inputs.memory_per_job\n  }\n  else if(!$job.inputs.memory_per_job && $job.inputs.memory_overhead_per_job){\n\t\treturn 2048 + $job.inputs.memory_overhead_per_job  \n  }\n  else\n  \treturn 2048\n}",
                            "engine": "#cwl-js-engine",
                            "class": "Expression"
                        },
                        "class": "sbg:MemRequirement"
                    }
                ],
                "label": "GATK CombineVariants",
                "arguments": [
                    {
                        "prefix": "--out",
                        "separate": true,
                        "valueFrom": {
                            "script": "{\n  var input_file = [].concat($job.inputs.variants)[0]\n  var meta = input_file.metadata\n  if(meta){\n  \tvar sample = meta.sample_id ? meta.sample_id : 'Unknown'\n  \tvar library = meta.library_id ? meta.library_id  : 'Unknown'\n  \tvar platform_unit = meta.platform_unit_id  ? meta.platform_unit_id : 'Unknown'\n    if(sample !== 'Unknown' || library !== 'Unknown' || platform_unit !== 'Unknown'){\n    \treturn ['Sample_' + sample, 'Library_' + library, 'Platform_Unit_' + platform_unit, 'combined', 'vcf'].join('.')\n  \t}\n  }\n  var variant_name = input_file.path.replace(/^.*[\\\\\\/]/, '').split('.')\n  var variant_namebase = variant_name.slice(0, -1).join('.')\n  return variant_namebase + '.combined.vcf'\n}",
                            "engine": "#cwl-js-engine",
                            "class": "Expression"
                        }
                    }
                ],
                "stdout": "",
                "baseCommand": [
                    "java",
                    {
                        "script": "{\n  if($job.inputs.memory_per_job){\n  \treturn '-Xmx'.concat($job.inputs.memory_per_job, 'M')\n  }\n  \treturn '-Xmx2048M'\n}",
                        "engine": "#cwl-js-engine",
                        "class": "Expression"
                    },
                    "-jar",
                    "/opt/GenomeAnalysisTKLite.jar",
                    "--analysis_type",
                    "CombineVariants"
                ],
                "temporaryFailCodes": [],
                "sbg:latestRevision": 9,
                "y": 435.23531175594775,
                "sbg:validationErrors": [],
                "sbg:modifiedBy": "bix-demo",
                "cwlVersion": "sbg:draft-2",
                "sbg:license": "MIT License",
                "class": "CommandLineTool",
                "x": 2171.078624463554,
                "inputs": [
                    {
                        "sbg:category": "Input Files",
                        "sbg:fileTypes": "VCF",
                        "id": "#variants",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--variant",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Input VCF file.",
                        "sbg:altPrefix": "-V",
                        "required": true,
                        "label": "Variants",
                        "type": [
                            {
                                "type": "array",
                                "items": "File"
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-S",
                        "id": "#validation_strictness",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--validation_strictness",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "How strict should we be with validation.",
                        "sbg:toolDefaultValue": "SILENT",
                        "label": "Validation Strictness",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "validation_strictness",
                                "symbols": [
                                    "SILENT",
                                    "LENIENT",
                                    "STRICT"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-OQ",
                        "id": "#use_original_qualities",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--useOriginalQualities",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "If set, use the original base quality scores from the OQ tag when present instead of the standard scores.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Use Original Qualities",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-use_legacy_downsampler",
                        "id": "#use_legacy_downsampler",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--use_legacy_downsampler",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Use the legacy downsampling implementation instead of the newer, less-tested implementation.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Use Legacy Downsampler",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-U",
                        "id": "#unsafe",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--unsafe",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "If set, enables unsafe operations: nothing will be checked at runtime.  For expert users only who know what they are doing.  We do not support usage of this argument.",
                        "sbg:toolDefaultValue": "",
                        "label": "Unsafe",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "unsafe",
                                "symbols": [
                                    "ALLOW_UNINDEXED_BAM",
                                    "ALLOW_UNSET_BAM_SORT_ORDER",
                                    "NO_READ_ORDER_VERIFICATION",
                                    "ALLOW_SEQ_DICT_INCOMPATIBILITY",
                                    "LENIENT_VCF_PROCESSING",
                                    "ALL"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-tag",
                        "id": "#tag",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--tag",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Arbitrary tag string to identify this GATK run as part of a group of runs, for later analysis.",
                        "sbg:toolDefaultValue": "",
                        "label": "Tag",
                        "type": [
                            "null",
                            "string"
                        ]
                    },
                    {
                        "sbg:category": "Combine Variants",
                        "sbg:altPrefix": "-suppressCommandLineHeader",
                        "id": "#suppress_command_line_header",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--suppressCommandLineHeader",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "If true, do not output the header containing the command line used.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Suppress Command Line Header",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "Combine Variants",
                        "sbg:altPrefix": "-setKey",
                        "id": "#set_key",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--setKey",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Key used in the INFO key=value tag emitted describing which set the combined VCF record came from.",
                        "sbg:toolDefaultValue": "set",
                        "label": "Set Key",
                        "type": [
                            "null",
                            "string"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-rpr",
                        "id": "#remove_program_records",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--remove_program_records",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Should we override the Walker's default and remove program records from the SAM header.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Remove Program Records",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "Input Files",
                        "sbg:fileTypes": "FASTA, FA",
                        "id": "#reference",
                        "inputBinding": {
                            "itemSeparator": " ",
                            "prefix": "--reference_sequence",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Reference Genome in FASTA format.",
                        "sbg:altPrefix": "-R",
                        "required": true,
                        "label": "Reference Genome",
                        "type": [
                            "File"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-rgbl",
                        "id": "#read_group_black_list",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--read_group_black_list",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Filters out read groups matching : or a .txt file containing the filter strings one per line.",
                        "sbg:toolDefaultValue": "[]",
                        "label": "Read Group Black List",
                        "type": [
                            "null",
                            {
                                "type": "array",
                                "items": "string"
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-rf",
                        "id": "#read_filter",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--read_filter",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Specify filtration criteria to apply to each read individually.",
                        "sbg:toolDefaultValue": "[]",
                        "label": "Read Filter",
                        "type": [
                            "null",
                            {
                                "type": "array",
                                "items": {
                                    "type": "enum",
                                    "name": "read_filter",
                                    "symbols": [
                                        "BadCigarFilter",
                                        "BadMateFilter",
                                        "CountingFilteringIterator.CountingReadFilter",
                                        "DuplicateReadFilter",
                                        "FailsVendorQualityCheckFilter",
                                        "HCMappingQualityFilter",
                                        "LibraryReadFilter",
                                        "MalformedReadFilter",
                                        "MappingQualityFilter",
                                        "MappingQualityUnavailableFilter",
                                        "MappingQualityZeroFilter",
                                        "MateSameStrandFilter",
                                        "MaxInsertSizeFilter",
                                        "MissingReadGroupFilter",
                                        "NoOriginalQualityScoresFilter",
                                        "NotPrimaryAlignmentFilter",
                                        "OverclippedReadFilter",
                                        "Platform454Filter",
                                        "PlatformFilter",
                                        "PlatformUnitFilter",
                                        "ReadGroupBlackListFilter",
                                        "ReadLengthFilter",
                                        "ReadNameFilter",
                                        "ReadStrandFilter",
                                        "ReassignMappingQualityFilter",
                                        "ReassignOneMappingQualityFilter",
                                        "SampleFilter",
                                        "SingleReadGroupFilter",
                                        "UnmappedReadFilter"
                                    ]
                                }
                            }
                        ]
                    },
                    {
                        "sbg:category": "Combine Variants",
                        "sbg:altPrefix": "-printComplexMerges",
                        "id": "#print_complex_merges",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--printComplexMerges",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Print out interesting sites requiring complex compatibility merging.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Print Complex Merges",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-preserveQ",
                        "id": "#preserve_qscores_less_than",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--preserve_qscores_less_than",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Bases with quality scores less than this threshold won't be recalibrated (with -BQSR).",
                        "sbg:toolDefaultValue": "6",
                        "label": "Preserve Qscores Less Than",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-et",
                        "id": "#phone_home",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--phone_home",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "What kind of GATK run report should we generate? STANDARD is the default, can be NO_ET so nothing is posted to the run repository. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.",
                        "sbg:toolDefaultValue": "STANDARD",
                        "label": "Phone Home",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "phone_home",
                                "symbols": [
                                    "NO_ET",
                                    "STANDARD"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-pedValidationType",
                        "id": "#pedigree_validation_type",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--pedigreeValidationType",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "How strict should we be in validating the pedigree information?.",
                        "sbg:toolDefaultValue": "STRICT",
                        "label": "Pedigree Validation Type",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "pedigree_validation_type",
                                "symbols": [
                                    "STRICT",
                                    "SILENT"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-pedString",
                        "id": "#pedigree_string",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--pedigreeString",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Pedigree string for samples.",
                        "sbg:toolDefaultValue": "[]",
                        "label": "Pedigree String",
                        "type": [
                            "null",
                            {
                                "type": "array",
                                "items": "string"
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-ndrs",
                        "id": "#non_deterministic_random_seed",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--nonDeterministicRandomSeed",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Makes the GATK behave non deterministically, that is, the random numbers generated will be different in every run.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Non Deterministic Random Seed",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "Combine Variants",
                        "sbg:altPrefix": "-minN",
                        "id": "#minimum_n",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--minimumN",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Combine variants and output site only if the variant is present in at least N input files.",
                        "sbg:toolDefaultValue": "1",
                        "label": "Minimum N",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "Combine Variants",
                        "sbg:altPrefix": "-minimalVCF",
                        "id": "#minimal_vcf",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--minimalVCF",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "If true, then the output VCF will contain no INFO or genotype FORMAT fields.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Minimal Vcf",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "Combine Variants",
                        "sbg:altPrefix": "-mergeInfoWithMaxAC",
                        "id": "#merge_info_with_max_ac",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--mergeInfoWithMaxAC",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "If true, when VCF records overlap the info field is taken from the one with the max AC instead of only taking the fields which are identical across the overlapping records.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Merge Info With Max Ac",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "Execution",
                        "sbg:altPrefix": null,
                        "id": "#memory_per_job",
                        "description": "Amount of RAM memory to be used per job.",
                        "sbg:toolDefaultValue": "2048",
                        "label": "Memory per job",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "Execution",
                        "sbg:toolDefaultValue": "0",
                        "id": "#memory_overhead_per_job",
                        "description": "Memory overhead per job. By default this parameter value is set to '0' (zero megabytes). This parameter value is added to the Memory per job parameter value. This results in the allocation of the sum total (Memory per job and Memory overhead per job) amount of memory per job. By default the memory per job parameter value is set to 2048 megabytes, unless specified otherwise.",
                        "type": [
                            "null",
                            "int"
                        ],
                        "label": "Memory overhead per job"
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-maxRuntimeUnits",
                        "id": "#max_runtime_units",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--maxRuntimeUnits",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "The TimeUnit for maxRuntime.",
                        "sbg:toolDefaultValue": "MINUTES",
                        "label": "Max Runtime Units",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "max_runtime_units",
                                "symbols": [
                                    "NANOSECONDS",
                                    "MICROSECONDS",
                                    "MILLISECONDS",
                                    "SECONDS",
                                    "MINUTES",
                                    "HOURS",
                                    "DAYS"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-maxRuntime",
                        "id": "#max_runtime",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--maxRuntime",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "If provided, that GATK will stop execution cleanly as soon after maxRuntime has been exceeded, truncating the run but not exiting with a failure.  By default the value is interpreted in minutes, but this can be changed by maxRuntimeUnits.",
                        "sbg:toolDefaultValue": "-1",
                        "label": "Max Runtime",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-kpr",
                        "id": "#keep_program_records",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--keep_program_records",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Should we override the Walker's default and keep program records from the SAM header.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Keep Program Records",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "Input Files",
                        "sbg:fileTypes": "VCF, BED, TXT",
                        "id": "#intervals_file",
                        "inputBinding": {
                            "itemSeparator": " ",
                            "prefix": "--intervals",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "One or more genomic intervals over which to operate. Can be an specified in an .intervals file or a rod file.",
                        "sbg:altPrefix": "-L",
                        "required": false,
                        "label": "Intervals",
                        "type": [
                            "null",
                            "File"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "--intervals",
                        "id": "#intervals",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "-L",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "One or more genomic intervals over which to operate.",
                        "sbg:toolDefaultValue": "",
                        "label": "Intervals",
                        "type": [
                            "null",
                            "string"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-isr",
                        "id": "#interval_set_rule",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--interval_set_rule",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Indicates the set merging approach the interval parser should use to combine the various -L or -XL inputs.",
                        "sbg:toolDefaultValue": "UNION",
                        "label": "Interval Set Rule",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "interval_set_rule",
                                "symbols": [
                                    "UNION",
                                    "INTERSECTION"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-ip",
                        "id": "#interval_padding",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--interval_padding",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Indicates how many basepairs of padding to include around each of the intervals specified with the -L/--intervals argument.",
                        "sbg:toolDefaultValue": "0",
                        "label": "Interval Padding",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-im",
                        "id": "#interval_merging",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--interval_merging",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Indicates the interval merging rule we should use for abutting intervals.",
                        "sbg:toolDefaultValue": "ALL",
                        "label": "Interval Merging",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "interval_merging",
                                "symbols": [
                                    "ALL",
                                    "OVERLAPPING_ONLY"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "Combine Variants",
                        "sbg:altPrefix": "-genotypeMergeOptions",
                        "id": "#genotypemergeoption",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--genotypemergeoption",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Determines how we should merge genotype records for samples shared across the ROD files.",
                        "sbg:toolDefaultValue": "",
                        "label": "Genotypemergeoption",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "genotypemergeoption",
                                "symbols": [
                                    "UNIQUIFY",
                                    "UNSORTED",
                                    "REQUIRE_UNIQUE"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "Input Files",
                        "sbg:fileTypes": "KEY, LICENSE",
                        "id": "#gatk_key",
                        "inputBinding": {
                            "itemSeparator": " ",
                            "prefix": "--gatk_key",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "GATK Key file. Required if running with -et NO_ET. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.",
                        "sbg:altPrefix": "-K",
                        "required": false,
                        "label": "Gatk key",
                        "type": [
                            "null",
                            "File"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-fixMisencodedQuals",
                        "id": "#fix_misencoded_quals",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "-fixMisencodedQuals",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Fix mis-encoded base quality scores.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Fix Misencoded Quals",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "Combine Variants",
                        "sbg:altPrefix": "-filteredRecordsMergeType",
                        "id": "#filteredrecordsmergetype",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--filteredrecordsmergetype",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Determines how we should handle records seen at the same site in the VCF, but with different FILTER fields.",
                        "sbg:toolDefaultValue": "KEEP_IF_ANY_UNFILTERED",
                        "label": "Filteredrecordsmergetype",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "filteredrecordsmergetype",
                                "symbols": [
                                    "KEEP_IF_ANY_UNFILTERED",
                                    "KEEP_IF_ALL_UNFILTERED",
                                    "KEEP_UNCONDITIONAL"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "Combine Variants",
                        "sbg:altPrefix": "-filteredAreUncalled",
                        "id": "#filtered_are_uncalled",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--filteredAreUncalled",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "If true, then filtered VCFs are treated as uncalled, so that filtered set annotations don't appear in the combined VCF.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Filtered Are Uncalled",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "Input Files",
                        "required": false,
                        "id": "#exclude_intervals",
                        "inputBinding": {
                            "itemSeparator": " ",
                            "prefix": "--excludeIntervals",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "One or more genomic intervals to exclude from processing. Can be an .intervals file or a rod file.",
                        "sbg:altPrefix": "-XL",
                        "label": "Exclude Intervals",
                        "type": [
                            "null",
                            "File"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-EOQ",
                        "id": "#emit_original_quals",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--emit_original_quals",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "If true, enables printing of the OQ tag with the original base qualities (with -BQSR).",
                        "sbg:toolDefaultValue": "False",
                        "label": "Emit Original Quals",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-dt",
                        "id": "#downsampling_type",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--downsampling_type",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Type of reads downsampling to employ at a given locus. Reads will be selected randomly to be removed from the pile based on the method described here.",
                        "sbg:toolDefaultValue": "",
                        "label": "Downsampling Type",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "downsampling_type",
                                "symbols": [
                                    "NONE",
                                    "ALL_READS",
                                    "BY_SAMPLE"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-dfrac",
                        "id": "#downsample_to_fraction",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--downsample_to_fraction",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Fraction [0.0-1.0] of reads to downsample to.",
                        "sbg:toolDefaultValue": "",
                        "label": "Downsample to Fraction",
                        "type": [
                            "null",
                            "float"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-dcov",
                        "id": "#downsample_to_coverage",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--downsample_to_coverage",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Coverage to downsample to at any given locus; note that downsampled reads are randomly selected from all possible reads at a locus. For non-locus-based traversals (eg., ReadWalkers), this sets the maximum number of reads at each alignment start position.",
                        "sbg:toolDefaultValue": "",
                        "label": "Downsample to Coverage",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": null,
                        "id": "#disable_radnomization",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--disableRandomization",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Completely eliminates randomization from nondeterministic methods. To be used mostly in the testing framework where dynamic parallelism can result in differing numbers of calls to the generator.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Disable Randomization",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-DIQ",
                        "id": "#disable_indel_quals",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--disable_indel_quals",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "If 'true', disables printing of base insertion and base deletion tags (with -BQSR). Turns off printing of the base insertion and base deletion tags when using the -BQSR argument and only the base substitution qualities will be produced.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Disable Indel Quals",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-DBQ",
                        "id": "#default_base_qualities",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--defaultBaseQualities",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "If reads are missing some or all base quality scores, this value will be used for all base quality scores.",
                        "sbg:toolDefaultValue": "-1",
                        "label": "Default Base Qualities",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "Execution",
                        "sbg:altPrefix": null,
                        "id": "#cpu_per_job",
                        "description": "Number of CPUs per job.",
                        "sbg:toolDefaultValue": "1",
                        "label": "CPU per job",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-baqGOP",
                        "id": "#baq_gap_open_penalty",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--baqGapOpenPenalty",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "BAQ gap open penalty (Phred Scaled). Default value is 40. 30 is perhaps better for whole genome call sets.",
                        "sbg:toolDefaultValue": "40.0",
                        "label": "BAQ Gap Open Penalty",
                        "type": [
                            "null",
                            "float"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-baq",
                        "id": "#baq",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--baq",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Type of BAQ calculation to apply in the engine.",
                        "sbg:toolDefaultValue": "OFF",
                        "label": "BAQ Calculation Type",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "baq",
                                "symbols": [
                                    "OFF",
                                    "CALCULATE_AS_NECESSARY",
                                    "RECALCULATE"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "Combine Variants",
                        "sbg:altPrefix": "-assumeIdenticalSamples",
                        "id": "#assume_identical_samples",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--assumeIdenticalSamples",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "If true, assume input VCFs have identical sample sets and disjoint calls.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Assume Identical Samples",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "--allow_potentially_misencoded_quality_scores",
                        "id": "#allow_potentailly_misencoded_quals",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "-allowPotentiallyMisencodedQuals",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Do not fail when encountered base qualities that are too high and seemingly indicate a problem with the base quality encoding of the BAM file.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Allow Potentially Misencoded Quals",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    }
                ],
                "sbg:job": {
                    "allocatedResources": {
                        "mem": 2048,
                        "cpu": 1
                    },
                    "inputs": {
                        "memory_overhead_per_job": 0,
                        "variants": [
                            {
                                "metadata": {
                                    "sample_id": "XY"
                                },
                                "path": "variant.vcf",
                                "secondaryFiles": []
                            }
                        ]
                    }
                },
                "sbg:createdBy": "bix-demo",
                "sbg:revisionsInfo": [
                    {
                        "sbg:modifiedOn": 1450911447,
                        "sbg:revision": 0,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1450911448,
                        "sbg:revision": 1,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1450911449,
                        "sbg:revision": 2,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1450911450,
                        "sbg:revision": 3,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1450911451,
                        "sbg:revision": 4,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1450911452,
                        "sbg:revision": 5,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1450911453,
                        "sbg:revision": 6,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1450911455,
                        "sbg:revision": 7,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1450911456,
                        "sbg:revision": 8,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1458841427,
                        "sbg:revision": 9,
                        "sbg:modifiedBy": "bix-demo"
                    }
                ],
                "sbg:toolAuthor": "Broad Institute",
                "sbg:contributors": [
                    "bix-demo"
                ],
                "outputs": [
                    {
                        "sbg:fileTypes": "VCF",
                        "id": "#combined_vcf",
                        "outputBinding": {
                            "glob": "*.vcf",
                            "sbg:metadata": {},
                            "sbg:inheritMetadataFrom": "#variants",
                            "secondaryFiles": [
                                ".idx"
                            ]
                        },
                        "description": "File to which variants should be written.",
                        "type": [
                            "File"
                        ],
                        "label": "Output Combined VCF"
                    }
                ],
                "sbg:toolkit": "GATK"
            },
            "outputs": [
                {
                    "id": "#GATK_CombineVariants.combined_vcf"
                }
            ],
            "inputs": [
                {
                    "id": "#GATK_CombineVariants.variants",
                    "source": [
                        "#GATK_UnifiedGenotyper.raw_vcf"
                    ]
                },
                {
                    "id": "#GATK_CombineVariants.validation_strictness"
                },
                {
                    "id": "#GATK_CombineVariants.use_original_qualities"
                },
                {
                    "id": "#GATK_CombineVariants.use_legacy_downsampler"
                },
                {
                    "id": "#GATK_CombineVariants.unsafe"
                },
                {
                    "id": "#GATK_CombineVariants.tag"
                },
                {
                    "id": "#GATK_CombineVariants.suppress_command_line_header"
                },
                {
                    "id": "#GATK_CombineVariants.set_key"
                },
                {
                    "id": "#GATK_CombineVariants.remove_program_records"
                },
                {
                    "id": "#GATK_CombineVariants.reference",
                    "source": [
                        "#SBG_FASTA_Indices.fasta_reference"
                    ]
                },
                {
                    "id": "#GATK_CombineVariants.read_group_black_list"
                },
                {
                    "id": "#GATK_CombineVariants.read_filter"
                },
                {
                    "id": "#GATK_CombineVariants.print_complex_merges"
                },
                {
                    "id": "#GATK_CombineVariants.preserve_qscores_less_than"
                },
                {
                    "id": "#GATK_CombineVariants.phone_home"
                },
                {
                    "id": "#GATK_CombineVariants.pedigree_validation_type"
                },
                {
                    "id": "#GATK_CombineVariants.pedigree_string"
                },
                {
                    "id": "#GATK_CombineVariants.non_deterministic_random_seed"
                },
                {
                    "id": "#GATK_CombineVariants.minimum_n"
                },
                {
                    "id": "#GATK_CombineVariants.minimal_vcf"
                },
                {
                    "id": "#GATK_CombineVariants.merge_info_with_max_ac"
                },
                {
                    "id": "#GATK_CombineVariants.memory_per_job"
                },
                {
                    "id": "#GATK_CombineVariants.memory_overhead_per_job"
                },
                {
                    "id": "#GATK_CombineVariants.max_runtime_units"
                },
                {
                    "id": "#GATK_CombineVariants.max_runtime"
                },
                {
                    "id": "#GATK_CombineVariants.keep_program_records"
                },
                {
                    "id": "#GATK_CombineVariants.intervals_file"
                },
                {
                    "id": "#GATK_CombineVariants.intervals"
                },
                {
                    "id": "#GATK_CombineVariants.interval_set_rule"
                },
                {
                    "id": "#GATK_CombineVariants.interval_padding"
                },
                {
                    "id": "#GATK_CombineVariants.interval_merging"
                },
                {
                    "id": "#GATK_CombineVariants.genotypemergeoption"
                },
                {
                    "id": "#GATK_CombineVariants.gatk_key"
                },
                {
                    "id": "#GATK_CombineVariants.fix_misencoded_quals"
                },
                {
                    "id": "#GATK_CombineVariants.filteredrecordsmergetype"
                },
                {
                    "id": "#GATK_CombineVariants.filtered_are_uncalled"
                },
                {
                    "id": "#GATK_CombineVariants.exclude_intervals"
                },
                {
                    "id": "#GATK_CombineVariants.emit_original_quals"
                },
                {
                    "id": "#GATK_CombineVariants.downsampling_type"
                },
                {
                    "id": "#GATK_CombineVariants.downsample_to_fraction"
                },
                {
                    "id": "#GATK_CombineVariants.downsample_to_coverage"
                },
                {
                    "id": "#GATK_CombineVariants.disable_radnomization"
                },
                {
                    "id": "#GATK_CombineVariants.disable_indel_quals"
                },
                {
                    "id": "#GATK_CombineVariants.default_base_qualities"
                },
                {
                    "id": "#GATK_CombineVariants.cpu_per_job"
                },
                {
                    "id": "#GATK_CombineVariants.baq_gap_open_penalty"
                },
                {
                    "id": "#GATK_CombineVariants.baq"
                },
                {
                    "id": "#GATK_CombineVariants.assume_identical_samples"
                },
                {
                    "id": "#GATK_CombineVariants.allow_potentailly_misencoded_quals"
                }
            ],
            "sbg:x": 2171.078624463554
        },
        {
            "id": "#GATK_VariantRecalibrator",
            "sbg:y": -117.15687204030633,
            "run": {
                "sbg:modifiedOn": 1450911446,
                "sbg:id": "bix-demo/gatk-2-3-9-lite-demo/gatk-2-3-9-lite-variantrecalibrator/5",
                "sbg:toolkitVersion": "2.3.9 Lite",
                "sbg:cmdPreview": "java -Xmx2048M -jar /opt/GenomeAnalysisTKLite.jar --analysis_type VariantRecalibrator -nt 8 --reference_sequence /folder/reference.fasta --input /f/some.vcf --input /f/some_other.vcf --use_annotation QD,MQRankSum,FS,DP,ReadPosRankSum,HaplotypeScore --recal_file some.recal --rscript_file some.recal.R --tranches_file some.tranches  -resource:dbsnp,known=false,training=true,truth=false,prior=10.2 /dbsnp.vcf -resource:omni,known=false,training=true,truth=false,prior=10.2 /known.vcf",
                "sbg:revision": 5,
                "requirements": [
                    {
                        "requirements": [
                            {
                                "class": "DockerRequirement",
                                "dockerPull": "rabix/js-engine"
                            }
                        ],
                        "class": "ExpressionEngineRequirement",
                        "id": "#cwl-js-engine"
                    }
                ],
                "successCodes": [],
                "sbg:sbgMaintained": false,
                "sbg:categories": [
                    "VCF-Processing"
                ],
                "sbg:project": "bix-demo/gatk-2-3-9-lite-demo",
                "sbg:image_url": null,
                "stdin": "",
                "id": "bix-demo/gatk-2-3-9-lite-demo/gatk-2-3-9-lite-variantrecalibrator/5",
                "sbg:links": [
                    {
                        "label": "Homepage",
                        "id": "https://www.broadinstitute.org/gatk/index.php"
                    },
                    {
                        "label": "Source code",
                        "id": "https://github.com/broadgsa/gatk-protected"
                    },
                    {
                        "label": "Wiki",
                        "id": "https://www.broadinstitute.org/gatk/guide/pdfdocs/GATK_GuideBook_2.3-9.pdf"
                    },
                    {
                        "label": "Download",
                        "id": "https://www.broadinstitute.org/gatk/download/auth?package=GATK-archive&version=2.3-9-ge5ebf34"
                    },
                    {
                        "label": "Publication",
                        "id": "https://www.broadinstitute.org/gatk/about/#in-the-literature"
                    },
                    {
                        "label": "Documentation",
                        "id": "https://www.broadinstitute.org/gatk/gatkdocs/org_broadinstitute_gatk_tools_walkers_variantrecalibration_VariantRecalibrator.php"
                    }
                ],
                "sbg:createdOn": 1450911440,
                "description": "Overview\n\nThis tool performs the first pass in a two-stage process called VQSR; the second pass is performed by the ApplyRecalibration tool. In brief, the first pass consists of creating a Gaussian mixture model by looking at the distribution of annotation values over a high quality subset of the input call set, and then scoring all input variants according to the model. The second pass consists of filtering variants based on score cutoffs identified in the first pass.\n\nThe purpose of the variant recalibrator is to assign a well-calibrated probability to each variant call in a call set. You can then create highly accurate call sets by filtering based on this single estimate for the accuracy of each call. The approach taken by variant quality score recalibration is to develop a continuous, covarying estimate of the relationship between SNP call annotations (such as QD, MQ, and ReadPosRankSum, for example) and the probability that a SNP is a true genetic variant versus a sequencing or data processing artifact. This model is determined adaptively based on \"true sites\" provided as input, typically HapMap 3 sites and those sites found to be polymorphic on the Omni 2.5M SNP chip array (in humans). This adaptive error model can then be applied to both known and novel variation discovered in the call set of interest to evaluate the probability that each call is real. The score that gets added to the INFO field of each variant is called the VQSLOD. It is the log odds of being a true variant versus being false under the trained Gaussian mixture model.\n\nVQSR is probably the hardest part of the Best Practices to get right, so be sure to read the method documentation, parameter recommendations and tutorial to really understand what these tools and how to use them for best results on your own data.\n\nInputs\nThe input raw variants to be recalibrated.\nKnown, truth, and training sets to be used by the algorithm. See the method documentation for more details.\n\nOutputs\nA recalibration table file that will be used by the ApplyRecalibration tool.\nA tranches file which shows various metrics of the recalibration callset for slices of the data.\n\nUsage example\n\nRecalibrating SNPs in exome data\n java -Xmx4g -jar GenomeAnalysisTK.jar \\\n   -T VariantRecalibrator \\\n   -R reference.fasta \\\n   -input raw_variants.vcf \\\n   -resource:hapmap,known=false,training=true,truth=true,prior=15.0 hapmap_3.3.b37.sites.vcf \\\n   -resource:omni,known=false,training=true,truth=false,prior=12.0 1000G_omni2.5.b37.sites.vcf \\\n   -resource:1000G,known=false,training=true,truth=false,prior=10.0 1000G_phase1.snps.high_confidence.vcf\n   -resource:dbsnp,known=true,training=false,truth=false,prior=6.0 dbsnp_135.b37.vcf \\\n   -an QD -an MQ -an MQRankSum -an ReadPosRankSum -an FS -an SOR -an InbreedingCoeff \\\n   -mode SNP \\\n   -recalFile output.recal \\\n   -tranchesFile output.tranches \\\n   -rscriptFile output.plots.R\n \nCaveats\n\nThe values used in the example above are only meant to show how the command lines are composed. They are not meant to be taken as specific recommendations of values to use in your own work, and they may be different from the values cited elsewhere in our documentation. For the latest and greatest recommendations on how to set parameter values for you own analyses, please read the Best Practices section of the documentation, especially the FAQ document on VQSR parameters.\nWhole genomes and exomes take slightly different parameters, so make sure you adapt your commands accordingly! See the documents linked above for details.\nIf you work with small datasets (e.g. targeted capture experiments or small number of exomes), you will run into problems. Read the docs linked above for advice on how to deal with those issues.\nIn order to create the model reporting plots Rscript needs to be in your environment PATH (this is the scripting version of R, not the interactive version). See http://www.r-project.org for more info on how to download and install R.\n\n(IMPORTANT) Reference \".fasta\" Secondary Files\n\nTools in GATK that require a fasta reference file also look for the reference file's corresponding .fai (fasta index) and .dict (fasta dictionary) files. The fasta index file allows random access to reference bases and the dictionary file is a dictionary of the contig names and sizes contained within the fasta reference. These two secondary files are essential for GATK to work properly. To append these two files to your fasta reference please use the 'SBG FASTA Indices' tool within your GATK based workflow before using any of the GATK tools.",
                "hints": [
                    {
                        "dockerImageId": "47510cb2da55",
                        "class": "DockerRequirement",
                        "dockerPull": "images.sbgenomics.com/stefanristeski/gatk2-lite:2.3-9"
                    },
                    {
                        "value": {
                            "script": "{\n  if($job.inputs.cpu_per_job){\n  \treturn $job.inputs.cpu_per_job;\n  }\n  else{\n  \treturn 1;\n  }\n}",
                            "engine": "#cwl-js-engine",
                            "class": "Expression"
                        },
                        "class": "sbg:CPURequirement"
                    },
                    {
                        "value": {
                            "script": "{\n  if($job.inputs.memory_per_job){\n    if($job.inputs.memory_overhead_per_job){\n    \treturn $job.inputs.memory_per_job + $job.inputs.memory_overhead_per_job\n    }\n    else\n  \t\treturn $job.inputs.memory_per_job\n  }\n  else if(!$job.inputs.memory_per_job && $job.inputs.memory_overhead_per_job){\n\t\treturn 2048 + $job.inputs.memory_overhead_per_job  \n  }\n  else\n  \treturn 2048\n}",
                            "engine": "#cwl-js-engine",
                            "class": "Expression"
                        },
                        "class": "sbg:MemRequirement"
                    }
                ],
                "label": "SNP GATK VariantRecalibrator",
                "arguments": [
                    {
                        "prefix": "--recal_file",
                        "separate": true,
                        "valueFrom": {
                            "script": "{\n  variant_name = [].concat($job.inputs.variants)[0].path.replace(/^.*[\\\\\\/]/, '').split('.')\n  variant_namebase = variant_name.slice(0, variant_name.length-1).join('.')\n  return variant_namebase.concat('.recal')\n}",
                            "engine": "#cwl-js-engine",
                            "class": "Expression"
                        }
                    },
                    {
                        "prefix": "--rscript_file",
                        "separate": true,
                        "valueFrom": {
                            "script": "{\n  variant_name = [].concat($job.inputs.variants)[0].path.replace(/^.*[\\\\\\/]/, '').split('.')\n  variant_namebase = variant_name.slice(0, variant_name.length-1).join('.')\n  return variant_namebase.concat('.recal.R')\n}",
                            "engine": "#cwl-js-engine",
                            "class": "Expression"
                        }
                    },
                    {
                        "prefix": "--tranches_file",
                        "separate": true,
                        "valueFrom": {
                            "script": "{\n  variant_name = [].concat($job.inputs.variants)[0].path.replace(/^.*[\\\\\\/]/, '').split('.')\n  variant_namebase = variant_name.slice(0, variant_name.length-1).join('.')\n  return variant_namebase.concat('.tranches')\n}",
                            "engine": "#cwl-js-engine",
                            "class": "Expression"
                        }
                    },
                    {
                        "position": 1,
                        "separate": true,
                        "valueFrom": {
                            "script": "{\n  res = []\n  for(i=0; i<$job.inputs.resources_files.length; i++){\n   \tres.push($job.inputs.resources_files[i].metadata.resources, $job.inputs.resources_files[i].path);\n  }\n  return res.join(' ');\n}",
                            "engine": "#cwl-js-engine",
                            "class": "Expression"
                        }
                    }
                ],
                "stdout": "",
                "baseCommand": [
                    "java",
                    {
                        "script": "{\n  if($job.inputs.memory_per_job){\n  \treturn '-Xmx'.concat($job.inputs.memory_per_job, 'M');\n  }\n  else{\n  \treturn '-Xmx2048M';\n  }\n}",
                        "engine": "#cwl-js-engine",
                        "class": "Expression"
                    },
                    "-jar",
                    "/opt/GenomeAnalysisTKLite.jar",
                    "--analysis_type",
                    "VariantRecalibrator",
                    {
                        "script": "{ \n  if($job.inputs.threads_per_job){\n    return '-nt '.concat($job.inputs.threads_per_job)\n  }\n  else{\n  \treturn '-nt '.concat(8)\n  }\n}",
                        "engine": "#cwl-js-engine",
                        "class": "Expression"
                    }
                ],
                "temporaryFailCodes": [],
                "sbg:latestRevision": 5,
                "y": -117.15687204030633,
                "sbg:validationErrors": [],
                "sbg:modifiedBy": "bix-demo",
                "cwlVersion": "sbg:draft-2",
                "sbg:license": "MIT License",
                "class": "CommandLineTool",
                "x": 2796.76532909997,
                "inputs": [
                    {
                        "sbg:category": "Input Files",
                        "sbg:fileTypes": "VCF",
                        "id": "#variants",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--input",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "The raw input variants to be recalibrated.",
                        "sbg:altPrefix": "-input",
                        "required": true,
                        "label": "Variants",
                        "type": [
                            {
                                "type": "array",
                                "items": "File"
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-S",
                        "id": "#validation_strictness",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--validation_strictness",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "How strict should we be with validation.",
                        "sbg:toolDefaultValue": "SILENT",
                        "label": "Validation Strictness",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "validation_strictness",
                                "symbols": [
                                    "SILENT",
                                    "LENIENT",
                                    "STRICT"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-OQ",
                        "id": "#use_original_qualities",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--useOriginalQualities",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "If set, use the original base quality scores from the OQ tag when present instead of the standard scores.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Use Original Qualities",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-use_legacy_downsampler",
                        "id": "#use_legacy_downsampler",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--use_legacy_downsampler",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Use the legacy downsampling implementation instead of the newer, less-tested implementation.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Use Legacy Downsampler",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "Variant Recalibrator",
                        "sbg:altPrefix": "-an",
                        "id": "#use_annotation",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--use_annotation",
                            "sbg:cmdInclude": true,
                            "separate": true,
                            "valueFrom": {
                                "script": "{\n  if ($job.inputs.use_annotation.length == 0){\n  \treturn ['QD', 'MQRankSum', 'FS', 'DP', 'ReadPosRankSum', 'HaplotypeScore']\n  }\n  else\n    return $job.inputs.use_annotation\n\n\n}",
                                "engine": "#cwl-js-engine",
                                "class": "Expression"
                            }
                        },
                        "description": "The names of the annotations which should used for calculations (from input VCF INFO fields).",
                        "sbg:toolDefaultValue": "[]",
                        "label": "Use Annotation",
                        "type": [
                            {
                                "type": "array",
                                "items": "string"
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-U",
                        "id": "#unsafe",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--unsafe",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "If set, enables unsafe operations: nothing will be checked at runtime.  For expert users only who know what they are doing.  We do not support usage of this argument.",
                        "sbg:toolDefaultValue": "",
                        "label": "Unsafe",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "unsafe",
                                "symbols": [
                                    "ALLOW_UNINDEXED_BAM",
                                    "ALLOW_UNSET_BAM_SORT_ORDER",
                                    "NO_READ_ORDER_VERIFICATION",
                                    "ALLOW_SEQ_DICT_INCOMPATIBILITY",
                                    "LENIENT_VCF_PROCESSING",
                                    "ALL"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "Variant Recalibrator",
                        "sbg:altPrefix": "-ts_filter_level",
                        "id": "#ts_filter_level",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--ts_filter_level",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "The truth sensitivity level at which to start filtering, used here to indicate filtered variants in the model reporting plots.",
                        "sbg:toolDefaultValue": "99.0",
                        "label": "Ts Filter Level",
                        "type": [
                            "null",
                            "float"
                        ]
                    },
                    {
                        "sbg:category": "Variant Recalibrator",
                        "sbg:altPrefix": "-allPoly",
                        "id": "#trust_all_polymorphic",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--trustAllPolymorphic",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Trust that all the input training sets' unfiltered records contain only polymorphic sites to drastically speed up the computation.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Trust All Polymorphic",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "Execution",
                        "sbg:altPrefix": null,
                        "id": "#threads_per_job",
                        "description": "For tools which support multiprocessing, this value can be used to set the number of threads to be used.",
                        "sbg:toolDefaultValue": "8",
                        "label": "Threads per job",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "Variant Recalibrator",
                        "sbg:altPrefix": "-titv",
                        "id": "#target_titv",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--target_titv",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "The expected novel Ti/Tv ratio to use when calculating FDR tranches and for display on the optimization curve output figures. (approx 2.15 for whole genome experiments). ONLY USED FOR PLOTTING PURPOSES!.",
                        "sbg:toolDefaultValue": "2.15",
                        "label": "Target Titv",
                        "type": [
                            "null",
                            "float"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-tag",
                        "id": "#tag",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--tag",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Arbitrary tag string to identify this GATK run as part of a group of runs, for later analysis.",
                        "sbg:toolDefaultValue": "",
                        "label": "Tag",
                        "type": [
                            "null",
                            "string"
                        ]
                    },
                    {
                        "sbg:category": "Variant Recalibrator",
                        "sbg:altPrefix": "-tranche",
                        "id": "#t_stranche",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--TStranche",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "The levels of novel false discovery rate (FDR, implied by ti/tv) at which to slice the data. (in percent, that is 1.0 for 1 percent).",
                        "sbg:toolDefaultValue": "[100.0, 99.9, 99.0, 90.0]",
                        "label": "T Stranche",
                        "type": [
                            "null",
                            {
                                "type": "array",
                                "items": "float"
                            }
                        ]
                    },
                    {
                        "sbg:category": "Variant Recalibrator",
                        "sbg:altPrefix": "-std",
                        "id": "#std_threshold",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--stdThreshold",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "If a variant has annotations more than -std standard deviations away from mean then don't use it for building the Gaussian mixture model.",
                        "sbg:toolDefaultValue": "14.0",
                        "label": "Std Threshold",
                        "type": [
                            "null",
                            "float"
                        ]
                    },
                    {
                        "sbg:category": "Variant Recalibrator",
                        "sbg:altPrefix": "-shrinkage",
                        "id": "#shrinkage",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--shrinkage",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "The shrinkage parameter in the variational Bayes algorithm.",
                        "sbg:toolDefaultValue": "1.0",
                        "label": "Shrinkage",
                        "type": [
                            "null",
                            "float"
                        ]
                    },
                    {
                        "sbg:category": "Input Files",
                        "sbg:fileTypes": "VCF",
                        "id": "#resources_files",
                        "description": "Resources.",
                        "sbg:altPrefix": null,
                        "required": true,
                        "label": "Resources",
                        "type": [
                            {
                                "type": "array",
                                "items": "File"
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-rpr",
                        "id": "#remove_program_records",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--remove_program_records",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Should we override the Walker's default and remove program records from the SAM header.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Remove Program Records",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "Input Files",
                        "sbg:fileTypes": "FASTA, FA",
                        "id": "#reference",
                        "inputBinding": {
                            "itemSeparator": " ",
                            "prefix": "--reference_sequence",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Reference Genome in FASTA format.",
                        "sbg:altPrefix": "-R",
                        "required": true,
                        "label": "Reference Genome",
                        "type": [
                            "File"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-rgbl",
                        "id": "#read_group_black_list",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--read_group_black_list",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Filters out read groups matching : or a .txt file containing the filter strings one per line.",
                        "sbg:toolDefaultValue": "[]",
                        "label": "Read Group Black List",
                        "type": [
                            "null",
                            {
                                "type": "array",
                                "items": "string"
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-rf",
                        "id": "#read_filter",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--read_filter",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Specify filtration criteria to apply to each read individually.",
                        "sbg:toolDefaultValue": "[]",
                        "label": "Read Filter",
                        "type": [
                            "null",
                            {
                                "type": "array",
                                "items": {
                                    "type": "enum",
                                    "name": "read_filter",
                                    "symbols": [
                                        "BadCigarFilter",
                                        "BadMateFilter",
                                        "CountingFilteringIterator.CountingReadFilter",
                                        "DuplicateReadFilter",
                                        "FailsVendorQualityCheckFilter",
                                        "HCMappingQualityFilter",
                                        "LibraryReadFilter",
                                        "MalformedReadFilter",
                                        "MappingQualityFilter",
                                        "MappingQualityUnavailableFilter",
                                        "MappingQualityZeroFilter",
                                        "MateSameStrandFilter",
                                        "MaxInsertSizeFilter",
                                        "MissingReadGroupFilter",
                                        "NoOriginalQualityScoresFilter",
                                        "NotPrimaryAlignmentFilter",
                                        "OverclippedReadFilter",
                                        "Platform454Filter",
                                        "PlatformFilter",
                                        "PlatformUnitFilter",
                                        "ReadGroupBlackListFilter",
                                        "ReadLengthFilter",
                                        "ReadNameFilter",
                                        "ReadStrandFilter",
                                        "ReassignMappingQualityFilter",
                                        "ReassignOneMappingQualityFilter",
                                        "SampleFilter",
                                        "SingleReadGroupFilter",
                                        "UnmappedReadFilter"
                                    ]
                                }
                            }
                        ]
                    },
                    {
                        "sbg:category": "Variant Recalibrator",
                        "sbg:altPrefix": "-qual",
                        "id": "#qual_threshold",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--qualThreshold",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "If a known variant has raw QUAL value less than -qual then don't use it for building the Gaussian mixture model.",
                        "sbg:toolDefaultValue": "80.0",
                        "label": "Qual Threshold",
                        "type": [
                            "null",
                            "float"
                        ]
                    },
                    {
                        "sbg:category": "Variant Recalibrator",
                        "sbg:altPrefix": "-priorCounts",
                        "id": "#prior_counts",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--priorCounts",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "The number of prior counts to use in the variational Bayes algorithm.",
                        "sbg:toolDefaultValue": "20.0",
                        "label": "Prior Counts",
                        "type": [
                            "null",
                            "float"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-preserveQ",
                        "id": "#preserve_qscores_less_than",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--preserve_qscores_less_than",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Bases with quality scores less than this threshold won't be recalibrated (with -BQSR).",
                        "sbg:toolDefaultValue": "6",
                        "label": "Preserve Qscores Less Than",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-et",
                        "id": "#phone_home",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--phone_home",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "What kind of GATK run report should we generate? STANDARD is the default, can be NO_ET so nothing is posted to the run repository. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.",
                        "sbg:toolDefaultValue": "STANDARD",
                        "label": "Phone Home",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "phone_home",
                                "symbols": [
                                    "NO_ET",
                                    "STANDARD"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "Variant Recalibrator",
                        "sbg:altPrefix": "-percentBad",
                        "id": "#percent_bad_variants",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--percentBadVariants",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "What percentage of the worst scoring variants to use when building the Gaussian mixture model of bad variants. 0.07 means bottom 7 percent.",
                        "sbg:toolDefaultValue": "0.03",
                        "label": "Percent Bad Variants",
                        "type": [
                            "null",
                            "float"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-pedValidationType",
                        "id": "#pedigree_validation_type",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--pedigreeValidationType",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "How strict should we be in validating the pedigree information?.",
                        "sbg:toolDefaultValue": "STRICT",
                        "label": "Pedigree Validation Type",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "pedigree_validation_type",
                                "symbols": [
                                    "STRICT",
                                    "SILENT"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-pedString",
                        "id": "#pedigree_string",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--pedigreeString",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Pedigree string for samples.",
                        "sbg:toolDefaultValue": "[]",
                        "label": "Pedigree String",
                        "type": [
                            "null",
                            {
                                "type": "array",
                                "items": "string"
                            }
                        ]
                    },
                    {
                        "sbg:category": "Variant Recalibrator",
                        "sbg:altPrefix": "-nKM",
                        "id": "#num_k_means",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--numKMeans",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "The number of k-means iterations to perform in order to initialize the means of the Gaussians in the Gaussian mixture model.",
                        "sbg:toolDefaultValue": "30",
                        "label": "Num K Means",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-ndrs",
                        "id": "#non_deterministic_random_seed",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--nonDeterministicRandomSeed",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Makes the GATK behave non deterministically, that is, the random numbers generated will be different in every run.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Non Deterministic Random Seed",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "Variant Recalibrator",
                        "sbg:altPrefix": "-mode",
                        "id": "#mode",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--mode",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Recalibration mode to employ: 1.) SNP for recalibrating only snps (emitting indels untouched in the output VCF); 2.) INDEL for indels; and 3.) BOTH for recalibrating both snps and indels simultaneously.",
                        "sbg:toolDefaultValue": "SNP",
                        "label": "Mode",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "mode",
                                "symbols": [
                                    "SNP",
                                    "INDEL",
                                    "BOTH"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "Variant Recalibrator",
                        "sbg:altPrefix": "-minNumBad",
                        "id": "#min_num_bad_variants",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--minNumBadVariants",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "The minimum amount of worst scoring variants to use when building the Gaussian mixture model of bad variants. Will override -percentBad argument if necessary.",
                        "sbg:toolDefaultValue": "2500",
                        "label": "Min Num Bad Variants",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "Execution",
                        "sbg:altPrefix": null,
                        "id": "#memory_per_job",
                        "description": "Amount of RAM memory to be used per job.",
                        "sbg:toolDefaultValue": "2048",
                        "label": "Memory per job",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "Execution",
                        "sbg:toolDefaultValue": "0",
                        "id": "#memory_overhead_per_job",
                        "description": "Memory overhead per job. By default this parameter value is set to '0' (zero megabytes). This parameter value is added to the Memory per job parameter value. This results in the allocation of the sum total (Memory per job and Memory overhead per job) amount of memory per job. By default the memory per job parameter value is set to 2048 megabytes, unless specified otherwise.",
                        "type": [
                            "null",
                            "int"
                        ],
                        "label": "Memory overhead per job"
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-maxRuntimeUnits",
                        "id": "#max_runtime_units",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--maxRuntimeUnits",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "The TimeUnit for maxRuntime.",
                        "sbg:toolDefaultValue": "MINUTES",
                        "label": "Max Runtime Units",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "max_runtime_units",
                                "symbols": [
                                    "NANOSECONDS",
                                    "MICROSECONDS",
                                    "MILLISECONDS",
                                    "SECONDS",
                                    "MINUTES",
                                    "HOURS",
                                    "DAYS"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-maxRuntime",
                        "id": "#max_runtime",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--maxRuntime",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "If provided, that GATK will stop execution cleanly as soon after maxRuntime has been exceeded, truncating the run but not exiting with a failure.  By default the value is interpreted in minutes, but this can be changed by maxRuntimeUnits.",
                        "sbg:toolDefaultValue": "-1",
                        "label": "Max Runtime",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "Variant Recalibrator",
                        "sbg:altPrefix": "-mI",
                        "id": "#max_iterations",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--maxIterations",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "The maximum number of VBEM iterations to be performed in variational Bayes algorithm. Procedure will normally end when convergence is detected.",
                        "sbg:toolDefaultValue": "100",
                        "label": "Max Iterations",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "Variant Recalibrator",
                        "sbg:altPrefix": "-mG",
                        "id": "#max_gaussians",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--maxGaussians",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "The maximum number of Gaussians to try during variational Bayes algorithm.",
                        "sbg:toolDefaultValue": "10",
                        "label": "Max Gaussians",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-kpr",
                        "id": "#keep_program_records",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--keep_program_records",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Should we override the Walker's default and keep program records from the SAM header.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Keep Program Records",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "Input Files",
                        "sbg:fileTypes": "TXT, BED, VCF",
                        "id": "#intervals_file",
                        "inputBinding": {
                            "itemSeparator": " ",
                            "prefix": "--intervals",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "One or more genomic intervals over which to operate. Can be an specified in an .intervals file or a rod file.",
                        "sbg:altPrefix": "-L",
                        "required": false,
                        "label": "Intervals",
                        "type": [
                            "null",
                            "File"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "--intervals",
                        "id": "#intervals",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "-L",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "One or more genomic intervals over which to operate.",
                        "sbg:toolDefaultValue": "",
                        "label": "Intervals",
                        "type": [
                            "null",
                            "string"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-isr",
                        "id": "#interval_set_rule",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--interval_set_rule",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Indicates the set merging approach the interval parser should use to combine the various -L or -XL inputs.",
                        "sbg:toolDefaultValue": "UNION",
                        "label": "Interval Set Rule",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "interval_set_rule",
                                "symbols": [
                                    "UNION",
                                    "INTERSECTION"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-ip",
                        "id": "#interval_padding",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--interval_padding",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Indicates how many basepairs of padding to include around each of the intervals specified with the -L/--intervals argument.",
                        "sbg:toolDefaultValue": "0",
                        "label": "Interval Padding",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-im",
                        "id": "#interval_merging",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--interval_merging",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Indicates the interval merging rule we should use for abutting intervals.",
                        "sbg:toolDefaultValue": "ALL",
                        "label": "Interval Merging",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "interval_merging",
                                "symbols": [
                                    "ALL",
                                    "OVERLAPPING_ONLY"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "Variant Recalibrator",
                        "sbg:altPrefix": "-ignoreFilter",
                        "id": "#ignore_filter",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--ignore_filter",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "If specified the variant recalibrator will use variants even if the specified filter name is marked in the input VCF file.",
                        "sbg:toolDefaultValue": "[]",
                        "label": "Ignore Filter",
                        "type": [
                            "null",
                            {
                                "type": "array",
                                "items": "string"
                            }
                        ]
                    },
                    {
                        "sbg:category": "Input Files",
                        "sbg:fileTypes": "KEY, LICENSE",
                        "id": "#gatk_key",
                        "inputBinding": {
                            "itemSeparator": " ",
                            "prefix": "--gatk_key",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "GATK Key file. Required if running with -et NO_ET. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.",
                        "sbg:altPrefix": "-K",
                        "required": false,
                        "label": "Gatk key",
                        "type": [
                            "null",
                            "File"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-fixMisencodedQuals",
                        "id": "#fix_misencoded_quals",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "-fixMisencodedQuals",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Fix mis-encoded base quality scores.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Fix Misencoded Quals",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "Input Files",
                        "sbg:fileTypes": "TXT, BED, VCF",
                        "id": "#exclude_intervals",
                        "inputBinding": {
                            "itemSeparator": " ",
                            "prefix": "--excludeIntervals",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "One or more genomic intervals to exclude from processing. Can be an .intervals file or a rod file.",
                        "sbg:altPrefix": "-XL",
                        "required": false,
                        "label": "Exclude Intervals",
                        "type": [
                            "null",
                            "File"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-EOQ",
                        "id": "#emit_original_quals",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--emit_original_quals",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "If true, enables printing of the OQ tag with the original base qualities (with -BQSR).",
                        "sbg:toolDefaultValue": "False",
                        "label": "Emit Original Quals",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-dt",
                        "id": "#downsampling_type",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--downsampling_type",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Type of reads downsampling to employ at a given locus. Reads will be selected randomly to be removed from the pile based on the method described here.",
                        "sbg:toolDefaultValue": "",
                        "label": "Downsampling Type",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "downsampling_type",
                                "symbols": [
                                    "NONE",
                                    "ALL_READS",
                                    "BY_SAMPLE"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-dfrac",
                        "id": "#downsample_to_fraction",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--downsample_to_fraction",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Fraction [0.0-1.0] of reads to downsample to.",
                        "sbg:toolDefaultValue": "",
                        "label": "Downsample to Fraction",
                        "type": [
                            "null",
                            "float"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-dcov",
                        "id": "#downsample_to_coverage",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--downsample_to_coverage",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Coverage to downsample to at any given locus; note that downsampled reads are randomly selected from all possible reads at a locus. For non-locus-based traversals (eg., ReadWalkers), this sets the maximum number of reads at each alignment start position.",
                        "sbg:toolDefaultValue": "",
                        "label": "Downsample to Coverage",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": null,
                        "id": "#disable_radnomization",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--disableRandomization",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Completely eliminates randomization from nondeterministic methods. To be used mostly in the testing framework where dynamic parallelism can result in differing numbers of calls to the generator.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Disable Randomization",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-DIQ",
                        "id": "#disable_indel_quals",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--disable_indel_quals",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "If 'true', disables printing of base insertion and base deletion tags (with -BQSR). Turns off printing of the base insertion and base deletion tags when using the -BQSR argument and only the base substitution qualities will be produced.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Disable Indel Quals",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "Variant Recalibrator",
                        "sbg:altPrefix": "-dirichlet",
                        "id": "#dirichlet",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--dirichlet",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "The dirichlet parameter in the variational Bayes algorithm.",
                        "sbg:toolDefaultValue": "0.001",
                        "label": "Dirichlet",
                        "type": [
                            "null",
                            "float"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-DBQ",
                        "id": "#default_base_qualities",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--defaultBaseQualities",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "If reads are missing some or all base quality scores, this value will be used for all base quality scores.",
                        "sbg:toolDefaultValue": "-1",
                        "label": "Default Base Qualities",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "Execution",
                        "sbg:altPrefix": null,
                        "id": "#cpu_per_job",
                        "description": "Number of CPUs per job.",
                        "sbg:toolDefaultValue": "1",
                        "label": "CPU per job",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-baqGOP",
                        "id": "#baq_gap_open_penalty",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--baqGapOpenPenalty",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "BAQ gap open penalty (Phred Scaled). Default value is 40. 30 is perhaps better for whole genome call sets.",
                        "sbg:toolDefaultValue": "40.0",
                        "label": "BAQ Gap Open Penalty",
                        "type": [
                            "null",
                            "float"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-baq",
                        "id": "#baq",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--baq",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Type of BAQ calculation to apply in the engine.",
                        "sbg:toolDefaultValue": "OFF",
                        "label": "BAQ Calculation Type",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "baq",
                                "symbols": [
                                    "OFF",
                                    "CALCULATE_AS_NECESSARY",
                                    "RECALCULATE"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "--allow_potentially_misencoded_quality_scores",
                        "id": "#allow_potentailly_misencoded_quals",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "-allowPotentiallyMisencodedQuals",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Do not fail when encountered base qualities that are too high and seemingly indicate a problem with the base quality encoding of the BAM file.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Allow Potentially Misencoded Quals",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    }
                ],
                "sbg:job": {
                    "allocatedResources": {
                        "mem": 2048,
                        "cpu": 1
                    },
                    "inputs": {
                        "memory_overhead_per_job": 0,
                        "resources_files": [
                            {
                                "metadata": {
                                    "resources": "-resource:dbsnp,known=false,training=true,truth=false,prior=10.2",
                                    "some": "value"
                                },
                                "path": "/dbsnp.vcf",
                                "secondaryFiles": []
                            },
                            {
                                "metadata": {
                                    "resources": "-resource:omni,known=false,training=true,truth=false,prior=10.2"
                                },
                                "path": "/known.vcf",
                                "secondaryFiles": []
                            }
                        ],
                        "use_annotation": [],
                        "reference": {
                            "path": "/folder/reference.fasta"
                        },
                        "variants": [
                            {
                                "path": "/f/some.vcf"
                            },
                            {
                                "path": "/f/some_other.vcf"
                            }
                        ]
                    }
                },
                "sbg:createdBy": "bix-demo",
                "sbg:revisionsInfo": [
                    {
                        "sbg:modifiedOn": 1450911440,
                        "sbg:revision": 0,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1450911441,
                        "sbg:revision": 1,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1450911442,
                        "sbg:revision": 2,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1450911443,
                        "sbg:revision": 3,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1450911444,
                        "sbg:revision": 4,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1450911446,
                        "sbg:revision": 5,
                        "sbg:modifiedBy": "bix-demo"
                    }
                ],
                "sbg:toolAuthor": "Bread Institute",
                "sbg:contributors": [
                    "bix-demo"
                ],
                "outputs": [
                    {
                        "sbg:fileTypes": "PDF",
                        "id": "#tranches_plot",
                        "outputBinding": {
                            "glob": "*.tranches.pdf",
                            "sbg:metadata": {},
                            "sbg:inheritMetadataFrom": "#variants"
                        },
                        "description": "PDF file containing tranches plot generated by VariantRecalibrator.",
                        "type": [
                            "null",
                            "File"
                        ],
                        "label": "Tranches Plot"
                    },
                    {
                        "sbg:fileTypes": "TRANCHES",
                        "id": "#tranches_file",
                        "outputBinding": {
                            "glob": "*.tranches",
                            "sbg:metadata": {},
                            "sbg:inheritMetadataFrom": "#variants"
                        },
                        "description": "The output tranches file used by ApplyRecalibration.",
                        "type": [
                            "null",
                            "File"
                        ],
                        "label": "Tranches File"
                    },
                    {
                        "sbg:fileTypes": "R",
                        "id": "#rscript_file",
                        "outputBinding": {
                            "glob": "*.recal.R",
                            "sbg:metadata": {},
                            "sbg:inheritMetadataFrom": "#variants"
                        },
                        "description": "The output rscript file generated by the VQSR to aid in visualization of the input data and learned model.",
                        "type": [
                            "null",
                            "File"
                        ],
                        "label": "Rscript File"
                    },
                    {
                        "sbg:fileTypes": "RECAL",
                        "id": "#recal_file",
                        "outputBinding": {
                            "glob": "*.recal",
                            "sbg:metadata": {},
                            "sbg:inheritMetadataFrom": "#variants",
                            "secondaryFiles": []
                        },
                        "description": "The output recal file used by ApplyRecalibration.",
                        "type": [
                            "File"
                        ],
                        "label": "Recal File"
                    },
                    {
                        "sbg:fileTypes": "PDF",
                        "id": "#R_plots",
                        "outputBinding": {
                            "glob": "*.recal.R.pdf",
                            "sbg:metadata": {},
                            "sbg:inheritMetadataFrom": "#variants"
                        },
                        "description": "PDF file containing plots generated by VariantRecalibrator.",
                        "type": [
                            "null",
                            "File"
                        ],
                        "label": "R Plots"
                    }
                ],
                "sbg:toolkit": "GATK"
            },
            "outputs": [
                {
                    "id": "#GATK_VariantRecalibrator.tranches_plot"
                },
                {
                    "id": "#GATK_VariantRecalibrator.tranches_file"
                },
                {
                    "id": "#GATK_VariantRecalibrator.rscript_file"
                },
                {
                    "id": "#GATK_VariantRecalibrator.recal_file"
                },
                {
                    "id": "#GATK_VariantRecalibrator.R_plots"
                }
            ],
            "inputs": [
                {
                    "id": "#GATK_VariantRecalibrator.variants",
                    "source": [
                        "#GATK_CombineVariants.combined_vcf"
                    ]
                },
                {
                    "id": "#GATK_VariantRecalibrator.validation_strictness"
                },
                {
                    "id": "#GATK_VariantRecalibrator.use_original_qualities"
                },
                {
                    "id": "#GATK_VariantRecalibrator.use_legacy_downsampler"
                },
                {
                    "id": "#GATK_VariantRecalibrator.use_annotation",
                    "default": [
                        "QD",
                        "MQRankSum",
                        "FS",
                        "DP",
                        "ReadPosRankSum",
                        "HaplotypeScore"
                    ]
                },
                {
                    "id": "#GATK_VariantRecalibrator.unsafe"
                },
                {
                    "id": "#GATK_VariantRecalibrator.ts_filter_level"
                },
                {
                    "id": "#GATK_VariantRecalibrator.trust_all_polymorphic"
                },
                {
                    "id": "#GATK_VariantRecalibrator.threads_per_job",
                    "default": 32
                },
                {
                    "id": "#GATK_VariantRecalibrator.target_titv"
                },
                {
                    "id": "#GATK_VariantRecalibrator.tag"
                },
                {
                    "id": "#GATK_VariantRecalibrator.t_stranche"
                },
                {
                    "id": "#GATK_VariantRecalibrator.std_threshold"
                },
                {
                    "id": "#GATK_VariantRecalibrator.shrinkage"
                },
                {
                    "id": "#GATK_VariantRecalibrator.resources_files",
                    "source": [
                        "#SBG_Prepare_VQSR_Omni.output_vcf",
                        "#SBG_Prepare_VQSR_dbSNP.output_vcf",
                        "#SBG_Prepare_VQSR_1000G.output_vcf",
                        "#SBG_Prepare_VQSR_HapMap.output_vcf"
                    ]
                },
                {
                    "id": "#GATK_VariantRecalibrator.remove_program_records"
                },
                {
                    "id": "#GATK_VariantRecalibrator.reference",
                    "source": [
                        "#SBG_FASTA_Indices.fasta_reference"
                    ]
                },
                {
                    "id": "#GATK_VariantRecalibrator.read_group_black_list"
                },
                {
                    "id": "#GATK_VariantRecalibrator.read_filter"
                },
                {
                    "id": "#GATK_VariantRecalibrator.qual_threshold"
                },
                {
                    "id": "#GATK_VariantRecalibrator.prior_counts"
                },
                {
                    "id": "#GATK_VariantRecalibrator.preserve_qscores_less_than"
                },
                {
                    "id": "#GATK_VariantRecalibrator.phone_home"
                },
                {
                    "id": "#GATK_VariantRecalibrator.percent_bad_variants"
                },
                {
                    "id": "#GATK_VariantRecalibrator.pedigree_validation_type"
                },
                {
                    "id": "#GATK_VariantRecalibrator.pedigree_string"
                },
                {
                    "id": "#GATK_VariantRecalibrator.num_k_means"
                },
                {
                    "id": "#GATK_VariantRecalibrator.non_deterministic_random_seed"
                },
                {
                    "id": "#GATK_VariantRecalibrator.mode",
                    "default": "SNP"
                },
                {
                    "id": "#GATK_VariantRecalibrator.min_num_bad_variants"
                },
                {
                    "id": "#GATK_VariantRecalibrator.memory_per_job",
                    "default": 20000
                },
                {
                    "id": "#GATK_VariantRecalibrator.memory_overhead_per_job"
                },
                {
                    "id": "#GATK_VariantRecalibrator.max_runtime_units"
                },
                {
                    "id": "#GATK_VariantRecalibrator.max_runtime"
                },
                {
                    "id": "#GATK_VariantRecalibrator.max_iterations"
                },
                {
                    "id": "#GATK_VariantRecalibrator.max_gaussians"
                },
                {
                    "id": "#GATK_VariantRecalibrator.keep_program_records"
                },
                {
                    "id": "#GATK_VariantRecalibrator.intervals_file"
                },
                {
                    "id": "#GATK_VariantRecalibrator.intervals"
                },
                {
                    "id": "#GATK_VariantRecalibrator.interval_set_rule"
                },
                {
                    "id": "#GATK_VariantRecalibrator.interval_padding"
                },
                {
                    "id": "#GATK_VariantRecalibrator.interval_merging"
                },
                {
                    "id": "#GATK_VariantRecalibrator.ignore_filter"
                },
                {
                    "id": "#GATK_VariantRecalibrator.gatk_key"
                },
                {
                    "id": "#GATK_VariantRecalibrator.fix_misencoded_quals"
                },
                {
                    "id": "#GATK_VariantRecalibrator.exclude_intervals"
                },
                {
                    "id": "#GATK_VariantRecalibrator.emit_original_quals"
                },
                {
                    "id": "#GATK_VariantRecalibrator.downsampling_type"
                },
                {
                    "id": "#GATK_VariantRecalibrator.downsample_to_fraction"
                },
                {
                    "id": "#GATK_VariantRecalibrator.downsample_to_coverage"
                },
                {
                    "id": "#GATK_VariantRecalibrator.disable_radnomization"
                },
                {
                    "id": "#GATK_VariantRecalibrator.disable_indel_quals"
                },
                {
                    "id": "#GATK_VariantRecalibrator.dirichlet"
                },
                {
                    "id": "#GATK_VariantRecalibrator.default_base_qualities"
                },
                {
                    "id": "#GATK_VariantRecalibrator.cpu_per_job",
                    "default": 1
                },
                {
                    "id": "#GATK_VariantRecalibrator.baq_gap_open_penalty"
                },
                {
                    "id": "#GATK_VariantRecalibrator.baq"
                },
                {
                    "id": "#GATK_VariantRecalibrator.allow_potentailly_misencoded_quals"
                }
            ],
            "sbg:x": 2796.76532909997
        },
        {
            "id": "#GATK_VariantRecalibrator_1",
            "sbg:y": 135.19613669433062,
            "run": {
                "sbg:modifiedOn": 1450911446,
                "sbg:id": "bix-demo/gatk-2-3-9-lite-demo/gatk-2-3-9-lite-variantrecalibrator/5",
                "sbg:toolkitVersion": "2.3.9 Lite",
                "sbg:cmdPreview": "java -Xmx2048M -jar /opt/GenomeAnalysisTKLite.jar --analysis_type VariantRecalibrator -nt 8 --reference_sequence /folder/reference.fasta --input /f/some.vcf --input /f/some_other.vcf --use_annotation QD,MQRankSum,FS,DP,ReadPosRankSum,HaplotypeScore --recal_file some.recal --rscript_file some.recal.R --tranches_file some.tranches  -resource:dbsnp,known=false,training=true,truth=false,prior=10.2 /dbsnp.vcf -resource:omni,known=false,training=true,truth=false,prior=10.2 /known.vcf",
                "sbg:revision": 5,
                "requirements": [
                    {
                        "requirements": [
                            {
                                "class": "DockerRequirement",
                                "dockerPull": "rabix/js-engine"
                            }
                        ],
                        "class": "ExpressionEngineRequirement",
                        "id": "#cwl-js-engine"
                    }
                ],
                "successCodes": [],
                "sbg:sbgMaintained": false,
                "sbg:categories": [
                    "VCF-Processing"
                ],
                "sbg:project": "bix-demo/gatk-2-3-9-lite-demo",
                "sbg:image_url": null,
                "stdin": "",
                "id": "bix-demo/gatk-2-3-9-lite-demo/gatk-2-3-9-lite-variantrecalibrator/5",
                "sbg:links": [
                    {
                        "label": "Homepage",
                        "id": "https://www.broadinstitute.org/gatk/index.php"
                    },
                    {
                        "label": "Source code",
                        "id": "https://github.com/broadgsa/gatk-protected"
                    },
                    {
                        "label": "Wiki",
                        "id": "https://www.broadinstitute.org/gatk/guide/pdfdocs/GATK_GuideBook_2.3-9.pdf"
                    },
                    {
                        "label": "Download",
                        "id": "https://www.broadinstitute.org/gatk/download/auth?package=GATK-archive&version=2.3-9-ge5ebf34"
                    },
                    {
                        "label": "Publication",
                        "id": "https://www.broadinstitute.org/gatk/about/#in-the-literature"
                    },
                    {
                        "label": "Documentation",
                        "id": "https://www.broadinstitute.org/gatk/gatkdocs/org_broadinstitute_gatk_tools_walkers_variantrecalibration_VariantRecalibrator.php"
                    }
                ],
                "sbg:createdOn": 1450911440,
                "description": "Overview\n\nThis tool performs the first pass in a two-stage process called VQSR; the second pass is performed by the ApplyRecalibration tool. In brief, the first pass consists of creating a Gaussian mixture model by looking at the distribution of annotation values over a high quality subset of the input call set, and then scoring all input variants according to the model. The second pass consists of filtering variants based on score cutoffs identified in the first pass.\n\nThe purpose of the variant recalibrator is to assign a well-calibrated probability to each variant call in a call set. You can then create highly accurate call sets by filtering based on this single estimate for the accuracy of each call. The approach taken by variant quality score recalibration is to develop a continuous, covarying estimate of the relationship between SNP call annotations (such as QD, MQ, and ReadPosRankSum, for example) and the probability that a SNP is a true genetic variant versus a sequencing or data processing artifact. This model is determined adaptively based on \"true sites\" provided as input, typically HapMap 3 sites and those sites found to be polymorphic on the Omni 2.5M SNP chip array (in humans). This adaptive error model can then be applied to both known and novel variation discovered in the call set of interest to evaluate the probability that each call is real. The score that gets added to the INFO field of each variant is called the VQSLOD. It is the log odds of being a true variant versus being false under the trained Gaussian mixture model.\n\nVQSR is probably the hardest part of the Best Practices to get right, so be sure to read the method documentation, parameter recommendations and tutorial to really understand what these tools and how to use them for best results on your own data.\n\nInputs\nThe input raw variants to be recalibrated.\nKnown, truth, and training sets to be used by the algorithm. See the method documentation for more details.\n\nOutputs\nA recalibration table file that will be used by the ApplyRecalibration tool.\nA tranches file which shows various metrics of the recalibration callset for slices of the data.\n\nUsage example\n\nRecalibrating SNPs in exome data\n java -Xmx4g -jar GenomeAnalysisTK.jar \\\n   -T VariantRecalibrator \\\n   -R reference.fasta \\\n   -input raw_variants.vcf \\\n   -resource:hapmap,known=false,training=true,truth=true,prior=15.0 hapmap_3.3.b37.sites.vcf \\\n   -resource:omni,known=false,training=true,truth=false,prior=12.0 1000G_omni2.5.b37.sites.vcf \\\n   -resource:1000G,known=false,training=true,truth=false,prior=10.0 1000G_phase1.snps.high_confidence.vcf\n   -resource:dbsnp,known=true,training=false,truth=false,prior=6.0 dbsnp_135.b37.vcf \\\n   -an QD -an MQ -an MQRankSum -an ReadPosRankSum -an FS -an SOR -an InbreedingCoeff \\\n   -mode SNP \\\n   -recalFile output.recal \\\n   -tranchesFile output.tranches \\\n   -rscriptFile output.plots.R\n \nCaveats\n\nThe values used in the example above are only meant to show how the command lines are composed. They are not meant to be taken as specific recommendations of values to use in your own work, and they may be different from the values cited elsewhere in our documentation. For the latest and greatest recommendations on how to set parameter values for you own analyses, please read the Best Practices section of the documentation, especially the FAQ document on VQSR parameters.\nWhole genomes and exomes take slightly different parameters, so make sure you adapt your commands accordingly! See the documents linked above for details.\nIf you work with small datasets (e.g. targeted capture experiments or small number of exomes), you will run into problems. Read the docs linked above for advice on how to deal with those issues.\nIn order to create the model reporting plots Rscript needs to be in your environment PATH (this is the scripting version of R, not the interactive version). See http://www.r-project.org for more info on how to download and install R.\n\n(IMPORTANT) Reference \".fasta\" Secondary Files\n\nTools in GATK that require a fasta reference file also look for the reference file's corresponding .fai (fasta index) and .dict (fasta dictionary) files. The fasta index file allows random access to reference bases and the dictionary file is a dictionary of the contig names and sizes contained within the fasta reference. These two secondary files are essential for GATK to work properly. To append these two files to your fasta reference please use the 'SBG FASTA Indices' tool within your GATK based workflow before using any of the GATK tools.",
                "hints": [
                    {
                        "dockerImageId": "47510cb2da55",
                        "class": "DockerRequirement",
                        "dockerPull": "images.sbgenomics.com/stefanristeski/gatk2-lite:2.3-9"
                    },
                    {
                        "value": {
                            "script": "{\n  if($job.inputs.cpu_per_job){\n  \treturn $job.inputs.cpu_per_job;\n  }\n  else{\n  \treturn 1;\n  }\n}",
                            "engine": "#cwl-js-engine",
                            "class": "Expression"
                        },
                        "class": "sbg:CPURequirement"
                    },
                    {
                        "value": {
                            "script": "{\n  if($job.inputs.memory_per_job){\n    if($job.inputs.memory_overhead_per_job){\n    \treturn $job.inputs.memory_per_job + $job.inputs.memory_overhead_per_job\n    }\n    else\n  \t\treturn $job.inputs.memory_per_job\n  }\n  else if(!$job.inputs.memory_per_job && $job.inputs.memory_overhead_per_job){\n\t\treturn 2048 + $job.inputs.memory_overhead_per_job  \n  }\n  else\n  \treturn 2048\n}",
                            "engine": "#cwl-js-engine",
                            "class": "Expression"
                        },
                        "class": "sbg:MemRequirement"
                    }
                ],
                "label": "INDEL GATK VariantRecalibrator",
                "arguments": [
                    {
                        "prefix": "--recal_file",
                        "separate": true,
                        "valueFrom": {
                            "script": "{\n  variant_name = [].concat($job.inputs.variants)[0].path.replace(/^.*[\\\\\\/]/, '').split('.')\n  variant_namebase = variant_name.slice(0, variant_name.length-1).join('.')\n  return variant_namebase.concat('.recal')\n}",
                            "engine": "#cwl-js-engine",
                            "class": "Expression"
                        }
                    },
                    {
                        "prefix": "--rscript_file",
                        "separate": true,
                        "valueFrom": {
                            "script": "{\n  variant_name = [].concat($job.inputs.variants)[0].path.replace(/^.*[\\\\\\/]/, '').split('.')\n  variant_namebase = variant_name.slice(0, variant_name.length-1).join('.')\n  return variant_namebase.concat('.recal.R')\n}",
                            "engine": "#cwl-js-engine",
                            "class": "Expression"
                        }
                    },
                    {
                        "prefix": "--tranches_file",
                        "separate": true,
                        "valueFrom": {
                            "script": "{\n  variant_name = [].concat($job.inputs.variants)[0].path.replace(/^.*[\\\\\\/]/, '').split('.')\n  variant_namebase = variant_name.slice(0, variant_name.length-1).join('.')\n  return variant_namebase.concat('.tranches')\n}",
                            "engine": "#cwl-js-engine",
                            "class": "Expression"
                        }
                    },
                    {
                        "position": 1,
                        "separate": true,
                        "valueFrom": {
                            "script": "{\n  res = []\n  for(i=0; i<$job.inputs.resources_files.length; i++){\n   \tres.push($job.inputs.resources_files[i].metadata.resources, $job.inputs.resources_files[i].path);\n  }\n  return res.join(' ');\n}",
                            "engine": "#cwl-js-engine",
                            "class": "Expression"
                        }
                    }
                ],
                "stdout": "",
                "baseCommand": [
                    "java",
                    {
                        "script": "{\n  if($job.inputs.memory_per_job){\n  \treturn '-Xmx'.concat($job.inputs.memory_per_job, 'M');\n  }\n  else{\n  \treturn '-Xmx2048M';\n  }\n}",
                        "engine": "#cwl-js-engine",
                        "class": "Expression"
                    },
                    "-jar",
                    "/opt/GenomeAnalysisTKLite.jar",
                    "--analysis_type",
                    "VariantRecalibrator",
                    {
                        "script": "{ \n  if($job.inputs.threads_per_job){\n    return '-nt '.concat($job.inputs.threads_per_job)\n  }\n  else{\n  \treturn '-nt '.concat(8)\n  }\n}",
                        "engine": "#cwl-js-engine",
                        "class": "Expression"
                    }
                ],
                "temporaryFailCodes": [],
                "sbg:latestRevision": 5,
                "y": 135.19613669433062,
                "sbg:validationErrors": [],
                "sbg:modifiedBy": "bix-demo",
                "cwlVersion": "sbg:draft-2",
                "sbg:license": "MIT License",
                "class": "CommandLineTool",
                "x": 2816.3733208857607,
                "inputs": [
                    {
                        "sbg:category": "Input Files",
                        "sbg:fileTypes": "VCF",
                        "id": "#variants",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--input",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "The raw input variants to be recalibrated.",
                        "sbg:altPrefix": "-input",
                        "required": true,
                        "label": "Variants",
                        "type": [
                            {
                                "type": "array",
                                "items": "File"
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-S",
                        "id": "#validation_strictness",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--validation_strictness",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "How strict should we be with validation.",
                        "sbg:toolDefaultValue": "SILENT",
                        "label": "Validation Strictness",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "validation_strictness",
                                "symbols": [
                                    "SILENT",
                                    "LENIENT",
                                    "STRICT"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-OQ",
                        "id": "#use_original_qualities",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--useOriginalQualities",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "If set, use the original base quality scores from the OQ tag when present instead of the standard scores.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Use Original Qualities",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-use_legacy_downsampler",
                        "id": "#use_legacy_downsampler",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--use_legacy_downsampler",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Use the legacy downsampling implementation instead of the newer, less-tested implementation.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Use Legacy Downsampler",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "Variant Recalibrator",
                        "sbg:altPrefix": "-an",
                        "id": "#use_annotation",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--use_annotation",
                            "sbg:cmdInclude": true,
                            "separate": true,
                            "valueFrom": {
                                "script": "{\n  if ($job.inputs.use_annotation.length == 0){\n  \treturn ['QD', 'MQRankSum', 'FS', 'DP', 'ReadPosRankSum', 'HaplotypeScore']\n  }\n  else\n    return $job.inputs.use_annotation\n\n\n}",
                                "engine": "#cwl-js-engine",
                                "class": "Expression"
                            }
                        },
                        "description": "The names of the annotations which should used for calculations (from input VCF INFO fields).",
                        "sbg:toolDefaultValue": "[]",
                        "label": "Use Annotation",
                        "type": [
                            {
                                "type": "array",
                                "items": "string"
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-U",
                        "id": "#unsafe",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--unsafe",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "If set, enables unsafe operations: nothing will be checked at runtime.  For expert users only who know what they are doing.  We do not support usage of this argument.",
                        "sbg:toolDefaultValue": "",
                        "label": "Unsafe",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "unsafe",
                                "symbols": [
                                    "ALLOW_UNINDEXED_BAM",
                                    "ALLOW_UNSET_BAM_SORT_ORDER",
                                    "NO_READ_ORDER_VERIFICATION",
                                    "ALLOW_SEQ_DICT_INCOMPATIBILITY",
                                    "LENIENT_VCF_PROCESSING",
                                    "ALL"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "Variant Recalibrator",
                        "sbg:altPrefix": "-ts_filter_level",
                        "id": "#ts_filter_level",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--ts_filter_level",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "The truth sensitivity level at which to start filtering, used here to indicate filtered variants in the model reporting plots.",
                        "sbg:toolDefaultValue": "99.0",
                        "label": "Ts Filter Level",
                        "type": [
                            "null",
                            "float"
                        ]
                    },
                    {
                        "sbg:category": "Variant Recalibrator",
                        "sbg:altPrefix": "-allPoly",
                        "id": "#trust_all_polymorphic",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--trustAllPolymorphic",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Trust that all the input training sets' unfiltered records contain only polymorphic sites to drastically speed up the computation.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Trust All Polymorphic",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "Execution",
                        "sbg:altPrefix": null,
                        "id": "#threads_per_job",
                        "description": "For tools which support multiprocessing, this value can be used to set the number of threads to be used.",
                        "sbg:toolDefaultValue": "8",
                        "label": "Threads per job",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "Variant Recalibrator",
                        "sbg:altPrefix": "-titv",
                        "id": "#target_titv",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--target_titv",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "The expected novel Ti/Tv ratio to use when calculating FDR tranches and for display on the optimization curve output figures. (approx 2.15 for whole genome experiments). ONLY USED FOR PLOTTING PURPOSES!.",
                        "sbg:toolDefaultValue": "2.15",
                        "label": "Target Titv",
                        "type": [
                            "null",
                            "float"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-tag",
                        "id": "#tag",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--tag",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Arbitrary tag string to identify this GATK run as part of a group of runs, for later analysis.",
                        "sbg:toolDefaultValue": "",
                        "label": "Tag",
                        "type": [
                            "null",
                            "string"
                        ]
                    },
                    {
                        "sbg:category": "Variant Recalibrator",
                        "sbg:altPrefix": "-tranche",
                        "id": "#t_stranche",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--TStranche",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "The levels of novel false discovery rate (FDR, implied by ti/tv) at which to slice the data. (in percent, that is 1.0 for 1 percent).",
                        "sbg:toolDefaultValue": "[100.0, 99.9, 99.0, 90.0]",
                        "label": "T Stranche",
                        "type": [
                            "null",
                            {
                                "type": "array",
                                "items": "float"
                            }
                        ]
                    },
                    {
                        "sbg:category": "Variant Recalibrator",
                        "sbg:altPrefix": "-std",
                        "id": "#std_threshold",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--stdThreshold",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "If a variant has annotations more than -std standard deviations away from mean then don't use it for building the Gaussian mixture model.",
                        "sbg:toolDefaultValue": "14.0",
                        "label": "Std Threshold",
                        "type": [
                            "null",
                            "float"
                        ]
                    },
                    {
                        "sbg:category": "Variant Recalibrator",
                        "sbg:altPrefix": "-shrinkage",
                        "id": "#shrinkage",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--shrinkage",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "The shrinkage parameter in the variational Bayes algorithm.",
                        "sbg:toolDefaultValue": "1.0",
                        "label": "Shrinkage",
                        "type": [
                            "null",
                            "float"
                        ]
                    },
                    {
                        "sbg:category": "Input Files",
                        "sbg:fileTypes": "VCF",
                        "id": "#resources_files",
                        "description": "Resources.",
                        "sbg:altPrefix": null,
                        "required": true,
                        "label": "Resources",
                        "type": [
                            {
                                "type": "array",
                                "items": "File"
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-rpr",
                        "id": "#remove_program_records",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--remove_program_records",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Should we override the Walker's default and remove program records from the SAM header.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Remove Program Records",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "Input Files",
                        "sbg:fileTypes": "FASTA, FA",
                        "id": "#reference",
                        "inputBinding": {
                            "itemSeparator": " ",
                            "prefix": "--reference_sequence",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Reference Genome in FASTA format.",
                        "sbg:altPrefix": "-R",
                        "required": true,
                        "label": "Reference Genome",
                        "type": [
                            "File"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-rgbl",
                        "id": "#read_group_black_list",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--read_group_black_list",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Filters out read groups matching : or a .txt file containing the filter strings one per line.",
                        "sbg:toolDefaultValue": "[]",
                        "label": "Read Group Black List",
                        "type": [
                            "null",
                            {
                                "type": "array",
                                "items": "string"
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-rf",
                        "id": "#read_filter",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--read_filter",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Specify filtration criteria to apply to each read individually.",
                        "sbg:toolDefaultValue": "[]",
                        "label": "Read Filter",
                        "type": [
                            "null",
                            {
                                "type": "array",
                                "items": {
                                    "type": "enum",
                                    "name": "read_filter",
                                    "symbols": [
                                        "BadCigarFilter",
                                        "BadMateFilter",
                                        "CountingFilteringIterator.CountingReadFilter",
                                        "DuplicateReadFilter",
                                        "FailsVendorQualityCheckFilter",
                                        "HCMappingQualityFilter",
                                        "LibraryReadFilter",
                                        "MalformedReadFilter",
                                        "MappingQualityFilter",
                                        "MappingQualityUnavailableFilter",
                                        "MappingQualityZeroFilter",
                                        "MateSameStrandFilter",
                                        "MaxInsertSizeFilter",
                                        "MissingReadGroupFilter",
                                        "NoOriginalQualityScoresFilter",
                                        "NotPrimaryAlignmentFilter",
                                        "OverclippedReadFilter",
                                        "Platform454Filter",
                                        "PlatformFilter",
                                        "PlatformUnitFilter",
                                        "ReadGroupBlackListFilter",
                                        "ReadLengthFilter",
                                        "ReadNameFilter",
                                        "ReadStrandFilter",
                                        "ReassignMappingQualityFilter",
                                        "ReassignOneMappingQualityFilter",
                                        "SampleFilter",
                                        "SingleReadGroupFilter",
                                        "UnmappedReadFilter"
                                    ]
                                }
                            }
                        ]
                    },
                    {
                        "sbg:category": "Variant Recalibrator",
                        "sbg:altPrefix": "-qual",
                        "id": "#qual_threshold",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--qualThreshold",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "If a known variant has raw QUAL value less than -qual then don't use it for building the Gaussian mixture model.",
                        "sbg:toolDefaultValue": "80.0",
                        "label": "Qual Threshold",
                        "type": [
                            "null",
                            "float"
                        ]
                    },
                    {
                        "sbg:category": "Variant Recalibrator",
                        "sbg:altPrefix": "-priorCounts",
                        "id": "#prior_counts",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--priorCounts",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "The number of prior counts to use in the variational Bayes algorithm.",
                        "sbg:toolDefaultValue": "20.0",
                        "label": "Prior Counts",
                        "type": [
                            "null",
                            "float"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-preserveQ",
                        "id": "#preserve_qscores_less_than",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--preserve_qscores_less_than",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Bases with quality scores less than this threshold won't be recalibrated (with -BQSR).",
                        "sbg:toolDefaultValue": "6",
                        "label": "Preserve Qscores Less Than",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-et",
                        "id": "#phone_home",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--phone_home",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "What kind of GATK run report should we generate? STANDARD is the default, can be NO_ET so nothing is posted to the run repository. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.",
                        "sbg:toolDefaultValue": "STANDARD",
                        "label": "Phone Home",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "phone_home",
                                "symbols": [
                                    "NO_ET",
                                    "STANDARD"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "Variant Recalibrator",
                        "sbg:altPrefix": "-percentBad",
                        "id": "#percent_bad_variants",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--percentBadVariants",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "What percentage of the worst scoring variants to use when building the Gaussian mixture model of bad variants. 0.07 means bottom 7 percent.",
                        "sbg:toolDefaultValue": "0.03",
                        "label": "Percent Bad Variants",
                        "type": [
                            "null",
                            "float"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-pedValidationType",
                        "id": "#pedigree_validation_type",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--pedigreeValidationType",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "How strict should we be in validating the pedigree information?.",
                        "sbg:toolDefaultValue": "STRICT",
                        "label": "Pedigree Validation Type",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "pedigree_validation_type",
                                "symbols": [
                                    "STRICT",
                                    "SILENT"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-pedString",
                        "id": "#pedigree_string",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--pedigreeString",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Pedigree string for samples.",
                        "sbg:toolDefaultValue": "[]",
                        "label": "Pedigree String",
                        "type": [
                            "null",
                            {
                                "type": "array",
                                "items": "string"
                            }
                        ]
                    },
                    {
                        "sbg:category": "Variant Recalibrator",
                        "sbg:altPrefix": "-nKM",
                        "id": "#num_k_means",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--numKMeans",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "The number of k-means iterations to perform in order to initialize the means of the Gaussians in the Gaussian mixture model.",
                        "sbg:toolDefaultValue": "30",
                        "label": "Num K Means",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-ndrs",
                        "id": "#non_deterministic_random_seed",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--nonDeterministicRandomSeed",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Makes the GATK behave non deterministically, that is, the random numbers generated will be different in every run.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Non Deterministic Random Seed",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "Variant Recalibrator",
                        "sbg:altPrefix": "-mode",
                        "id": "#mode",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--mode",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Recalibration mode to employ: 1.) SNP for recalibrating only snps (emitting indels untouched in the output VCF); 2.) INDEL for indels; and 3.) BOTH for recalibrating both snps and indels simultaneously.",
                        "sbg:toolDefaultValue": "SNP",
                        "label": "Mode",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "mode",
                                "symbols": [
                                    "SNP",
                                    "INDEL",
                                    "BOTH"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "Variant Recalibrator",
                        "sbg:altPrefix": "-minNumBad",
                        "id": "#min_num_bad_variants",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--minNumBadVariants",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "The minimum amount of worst scoring variants to use when building the Gaussian mixture model of bad variants. Will override -percentBad argument if necessary.",
                        "sbg:toolDefaultValue": "2500",
                        "label": "Min Num Bad Variants",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "Execution",
                        "sbg:altPrefix": null,
                        "id": "#memory_per_job",
                        "description": "Amount of RAM memory to be used per job.",
                        "sbg:toolDefaultValue": "2048",
                        "label": "Memory per job",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "Execution",
                        "sbg:toolDefaultValue": "0",
                        "id": "#memory_overhead_per_job",
                        "description": "Memory overhead per job. By default this parameter value is set to '0' (zero megabytes). This parameter value is added to the Memory per job parameter value. This results in the allocation of the sum total (Memory per job and Memory overhead per job) amount of memory per job. By default the memory per job parameter value is set to 2048 megabytes, unless specified otherwise.",
                        "type": [
                            "null",
                            "int"
                        ],
                        "label": "Memory overhead per job"
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-maxRuntimeUnits",
                        "id": "#max_runtime_units",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--maxRuntimeUnits",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "The TimeUnit for maxRuntime.",
                        "sbg:toolDefaultValue": "MINUTES",
                        "label": "Max Runtime Units",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "max_runtime_units",
                                "symbols": [
                                    "NANOSECONDS",
                                    "MICROSECONDS",
                                    "MILLISECONDS",
                                    "SECONDS",
                                    "MINUTES",
                                    "HOURS",
                                    "DAYS"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-maxRuntime",
                        "id": "#max_runtime",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--maxRuntime",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "If provided, that GATK will stop execution cleanly as soon after maxRuntime has been exceeded, truncating the run but not exiting with a failure.  By default the value is interpreted in minutes, but this can be changed by maxRuntimeUnits.",
                        "sbg:toolDefaultValue": "-1",
                        "label": "Max Runtime",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "Variant Recalibrator",
                        "sbg:altPrefix": "-mI",
                        "id": "#max_iterations",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--maxIterations",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "The maximum number of VBEM iterations to be performed in variational Bayes algorithm. Procedure will normally end when convergence is detected.",
                        "sbg:toolDefaultValue": "100",
                        "label": "Max Iterations",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "Variant Recalibrator",
                        "sbg:altPrefix": "-mG",
                        "id": "#max_gaussians",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--maxGaussians",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "The maximum number of Gaussians to try during variational Bayes algorithm.",
                        "sbg:toolDefaultValue": "10",
                        "label": "Max Gaussians",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-kpr",
                        "id": "#keep_program_records",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--keep_program_records",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Should we override the Walker's default and keep program records from the SAM header.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Keep Program Records",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "Input Files",
                        "sbg:fileTypes": "TXT, BED, VCF",
                        "id": "#intervals_file",
                        "inputBinding": {
                            "itemSeparator": " ",
                            "prefix": "--intervals",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "One or more genomic intervals over which to operate. Can be an specified in an .intervals file or a rod file.",
                        "sbg:altPrefix": "-L",
                        "required": false,
                        "label": "Intervals",
                        "type": [
                            "null",
                            "File"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "--intervals",
                        "id": "#intervals",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "-L",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "One or more genomic intervals over which to operate.",
                        "sbg:toolDefaultValue": "",
                        "label": "Intervals",
                        "type": [
                            "null",
                            "string"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-isr",
                        "id": "#interval_set_rule",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--interval_set_rule",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Indicates the set merging approach the interval parser should use to combine the various -L or -XL inputs.",
                        "sbg:toolDefaultValue": "UNION",
                        "label": "Interval Set Rule",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "interval_set_rule",
                                "symbols": [
                                    "UNION",
                                    "INTERSECTION"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-ip",
                        "id": "#interval_padding",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--interval_padding",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Indicates how many basepairs of padding to include around each of the intervals specified with the -L/--intervals argument.",
                        "sbg:toolDefaultValue": "0",
                        "label": "Interval Padding",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-im",
                        "id": "#interval_merging",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--interval_merging",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Indicates the interval merging rule we should use for abutting intervals.",
                        "sbg:toolDefaultValue": "ALL",
                        "label": "Interval Merging",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "interval_merging",
                                "symbols": [
                                    "ALL",
                                    "OVERLAPPING_ONLY"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "Variant Recalibrator",
                        "sbg:altPrefix": "-ignoreFilter",
                        "id": "#ignore_filter",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--ignore_filter",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "If specified the variant recalibrator will use variants even if the specified filter name is marked in the input VCF file.",
                        "sbg:toolDefaultValue": "[]",
                        "label": "Ignore Filter",
                        "type": [
                            "null",
                            {
                                "type": "array",
                                "items": "string"
                            }
                        ]
                    },
                    {
                        "sbg:category": "Input Files",
                        "sbg:fileTypes": "KEY, LICENSE",
                        "id": "#gatk_key",
                        "inputBinding": {
                            "itemSeparator": " ",
                            "prefix": "--gatk_key",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "GATK Key file. Required if running with -et NO_ET. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.",
                        "sbg:altPrefix": "-K",
                        "required": false,
                        "label": "Gatk key",
                        "type": [
                            "null",
                            "File"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-fixMisencodedQuals",
                        "id": "#fix_misencoded_quals",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "-fixMisencodedQuals",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Fix mis-encoded base quality scores.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Fix Misencoded Quals",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "Input Files",
                        "sbg:fileTypes": "TXT, BED, VCF",
                        "id": "#exclude_intervals",
                        "inputBinding": {
                            "itemSeparator": " ",
                            "prefix": "--excludeIntervals",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "One or more genomic intervals to exclude from processing. Can be an .intervals file or a rod file.",
                        "sbg:altPrefix": "-XL",
                        "required": false,
                        "label": "Exclude Intervals",
                        "type": [
                            "null",
                            "File"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-EOQ",
                        "id": "#emit_original_quals",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--emit_original_quals",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "If true, enables printing of the OQ tag with the original base qualities (with -BQSR).",
                        "sbg:toolDefaultValue": "False",
                        "label": "Emit Original Quals",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-dt",
                        "id": "#downsampling_type",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--downsampling_type",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Type of reads downsampling to employ at a given locus. Reads will be selected randomly to be removed from the pile based on the method described here.",
                        "sbg:toolDefaultValue": "",
                        "label": "Downsampling Type",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "downsampling_type",
                                "symbols": [
                                    "NONE",
                                    "ALL_READS",
                                    "BY_SAMPLE"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-dfrac",
                        "id": "#downsample_to_fraction",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--downsample_to_fraction",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Fraction [0.0-1.0] of reads to downsample to.",
                        "sbg:toolDefaultValue": "",
                        "label": "Downsample to Fraction",
                        "type": [
                            "null",
                            "float"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-dcov",
                        "id": "#downsample_to_coverage",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--downsample_to_coverage",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Coverage to downsample to at any given locus; note that downsampled reads are randomly selected from all possible reads at a locus. For non-locus-based traversals (eg., ReadWalkers), this sets the maximum number of reads at each alignment start position.",
                        "sbg:toolDefaultValue": "",
                        "label": "Downsample to Coverage",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": null,
                        "id": "#disable_radnomization",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--disableRandomization",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Completely eliminates randomization from nondeterministic methods. To be used mostly in the testing framework where dynamic parallelism can result in differing numbers of calls to the generator.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Disable Randomization",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-DIQ",
                        "id": "#disable_indel_quals",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--disable_indel_quals",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "If 'true', disables printing of base insertion and base deletion tags (with -BQSR). Turns off printing of the base insertion and base deletion tags when using the -BQSR argument and only the base substitution qualities will be produced.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Disable Indel Quals",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "Variant Recalibrator",
                        "sbg:altPrefix": "-dirichlet",
                        "id": "#dirichlet",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--dirichlet",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "The dirichlet parameter in the variational Bayes algorithm.",
                        "sbg:toolDefaultValue": "0.001",
                        "label": "Dirichlet",
                        "type": [
                            "null",
                            "float"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-DBQ",
                        "id": "#default_base_qualities",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--defaultBaseQualities",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "If reads are missing some or all base quality scores, this value will be used for all base quality scores.",
                        "sbg:toolDefaultValue": "-1",
                        "label": "Default Base Qualities",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "Execution",
                        "sbg:altPrefix": null,
                        "id": "#cpu_per_job",
                        "description": "Number of CPUs per job.",
                        "sbg:toolDefaultValue": "1",
                        "label": "CPU per job",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-baqGOP",
                        "id": "#baq_gap_open_penalty",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--baqGapOpenPenalty",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "BAQ gap open penalty (Phred Scaled). Default value is 40. 30 is perhaps better for whole genome call sets.",
                        "sbg:toolDefaultValue": "40.0",
                        "label": "BAQ Gap Open Penalty",
                        "type": [
                            "null",
                            "float"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-baq",
                        "id": "#baq",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--baq",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Type of BAQ calculation to apply in the engine.",
                        "sbg:toolDefaultValue": "OFF",
                        "label": "BAQ Calculation Type",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "baq",
                                "symbols": [
                                    "OFF",
                                    "CALCULATE_AS_NECESSARY",
                                    "RECALCULATE"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "--allow_potentially_misencoded_quality_scores",
                        "id": "#allow_potentailly_misencoded_quals",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "-allowPotentiallyMisencodedQuals",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Do not fail when encountered base qualities that are too high and seemingly indicate a problem with the base quality encoding of the BAM file.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Allow Potentially Misencoded Quals",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    }
                ],
                "sbg:job": {
                    "allocatedResources": {
                        "mem": 2048,
                        "cpu": 1
                    },
                    "inputs": {
                        "memory_overhead_per_job": 0,
                        "resources_files": [
                            {
                                "metadata": {
                                    "resources": "-resource:dbsnp,known=false,training=true,truth=false,prior=10.2",
                                    "some": "value"
                                },
                                "path": "/dbsnp.vcf",
                                "secondaryFiles": []
                            },
                            {
                                "metadata": {
                                    "resources": "-resource:omni,known=false,training=true,truth=false,prior=10.2"
                                },
                                "path": "/known.vcf",
                                "secondaryFiles": []
                            }
                        ],
                        "use_annotation": [],
                        "reference": {
                            "path": "/folder/reference.fasta"
                        },
                        "variants": [
                            {
                                "path": "/f/some.vcf"
                            },
                            {
                                "path": "/f/some_other.vcf"
                            }
                        ]
                    }
                },
                "sbg:createdBy": "bix-demo",
                "sbg:revisionsInfo": [
                    {
                        "sbg:modifiedOn": 1450911440,
                        "sbg:revision": 0,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1450911441,
                        "sbg:revision": 1,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1450911442,
                        "sbg:revision": 2,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1450911443,
                        "sbg:revision": 3,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1450911444,
                        "sbg:revision": 4,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1450911446,
                        "sbg:revision": 5,
                        "sbg:modifiedBy": "bix-demo"
                    }
                ],
                "sbg:toolAuthor": "Bread Institute",
                "sbg:contributors": [
                    "bix-demo"
                ],
                "outputs": [
                    {
                        "sbg:fileTypes": "PDF",
                        "id": "#tranches_plot",
                        "outputBinding": {
                            "glob": "*.tranches.pdf",
                            "sbg:metadata": {},
                            "sbg:inheritMetadataFrom": "#variants"
                        },
                        "description": "PDF file containing tranches plot generated by VariantRecalibrator.",
                        "type": [
                            "null",
                            "File"
                        ],
                        "label": "Tranches Plot"
                    },
                    {
                        "sbg:fileTypes": "TRANCHES",
                        "id": "#tranches_file",
                        "outputBinding": {
                            "glob": "*.tranches",
                            "sbg:metadata": {},
                            "sbg:inheritMetadataFrom": "#variants"
                        },
                        "description": "The output tranches file used by ApplyRecalibration.",
                        "type": [
                            "null",
                            "File"
                        ],
                        "label": "Tranches File"
                    },
                    {
                        "sbg:fileTypes": "R",
                        "id": "#rscript_file",
                        "outputBinding": {
                            "glob": "*.recal.R",
                            "sbg:metadata": {},
                            "sbg:inheritMetadataFrom": "#variants"
                        },
                        "description": "The output rscript file generated by the VQSR to aid in visualization of the input data and learned model.",
                        "type": [
                            "null",
                            "File"
                        ],
                        "label": "Rscript File"
                    },
                    {
                        "sbg:fileTypes": "RECAL",
                        "id": "#recal_file",
                        "outputBinding": {
                            "glob": "*.recal",
                            "sbg:metadata": {},
                            "sbg:inheritMetadataFrom": "#variants",
                            "secondaryFiles": []
                        },
                        "description": "The output recal file used by ApplyRecalibration.",
                        "type": [
                            "File"
                        ],
                        "label": "Recal File"
                    },
                    {
                        "sbg:fileTypes": "PDF",
                        "id": "#R_plots",
                        "outputBinding": {
                            "glob": "*.recal.R.pdf",
                            "sbg:metadata": {},
                            "sbg:inheritMetadataFrom": "#variants"
                        },
                        "description": "PDF file containing plots generated by VariantRecalibrator.",
                        "type": [
                            "null",
                            "File"
                        ],
                        "label": "R Plots"
                    }
                ],
                "sbg:toolkit": "GATK"
            },
            "outputs": [
                {
                    "id": "#GATK_VariantRecalibrator_1.tranches_plot"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.tranches_file"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.rscript_file"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.recal_file"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.R_plots"
                }
            ],
            "inputs": [
                {
                    "id": "#GATK_VariantRecalibrator_1.variants",
                    "source": [
                        "#GATK_CombineVariants.combined_vcf"
                    ]
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.validation_strictness"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.use_original_qualities"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.use_legacy_downsampler"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.use_annotation",
                    "default": [
                        "QD",
                        "DP",
                        "FS",
                        "ReadPosRankSum",
                        "MQRankSum"
                    ]
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.unsafe"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.ts_filter_level"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.trust_all_polymorphic"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.threads_per_job",
                    "default": 32
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.target_titv"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.tag"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.t_stranche"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.std_threshold"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.shrinkage"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.resources_files",
                    "source": [
                        "#SBG_Prepare_VQSR_Mills.output_vcf",
                        "#SBG_Prepare_VQSR_dbSNP.output_vcf"
                    ]
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.remove_program_records"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.reference",
                    "source": [
                        "#SBG_FASTA_Indices.fasta_reference"
                    ]
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.read_group_black_list"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.read_filter"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.qual_threshold"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.prior_counts"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.preserve_qscores_less_than"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.phone_home"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.percent_bad_variants"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.pedigree_validation_type"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.pedigree_string"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.num_k_means"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.non_deterministic_random_seed"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.mode",
                    "default": "INDEL"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.min_num_bad_variants",
                    "default": 1000
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.memory_per_job",
                    "default": 20000
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.memory_overhead_per_job"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.max_runtime_units"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.max_runtime"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.max_iterations"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.max_gaussians",
                    "default": 4
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.keep_program_records"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.intervals_file"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.intervals"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.interval_set_rule"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.interval_padding"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.interval_merging"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.ignore_filter"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.gatk_key"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.fix_misencoded_quals"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.exclude_intervals"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.emit_original_quals"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.downsampling_type"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.downsample_to_fraction"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.downsample_to_coverage"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.disable_radnomization"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.disable_indel_quals"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.dirichlet"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.default_base_qualities"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.cpu_per_job",
                    "default": 1
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.baq_gap_open_penalty"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.baq"
                },
                {
                    "id": "#GATK_VariantRecalibrator_1.allow_potentailly_misencoded_quals"
                }
            ],
            "sbg:x": 2816.3733208857607
        },
        {
            "id": "#GATK_ApplyRecalibration",
            "sbg:y": -5.784310809147737,
            "run": {
                "sbg:modifiedOn": 1450911345,
                "sbg:id": "bix-demo/gatk-2-3-9-lite-demo/gatk-2-3-9-lite-applyrecalibration/6",
                "sbg:toolkitVersion": "2.3.9 Lite",
                "sbg:cmdPreview": "java -Xmx2048M -jar /opt/GenomeAnalysisTKLite.jar --analysis_type ApplyRecalibration -nt 8 --reference_sequence . --input variants.ext --recal_file recal_file.ext --tranches_file tranches_file.ext --out variants.recalibrated.vcf",
                "sbg:revision": 6,
                "requirements": [
                    {
                        "requirements": [
                            {
                                "class": "DockerRequirement",
                                "dockerPull": "rabix/js-engine"
                            }
                        ],
                        "class": "ExpressionEngineRequirement",
                        "id": "#cwl-js-engine"
                    }
                ],
                "successCodes": [],
                "sbg:sbgMaintained": false,
                "sbg:categories": [
                    "VCF-Processing"
                ],
                "sbg:project": "bix-demo/gatk-2-3-9-lite-demo",
                "sbg:image_url": null,
                "stdin": "",
                "id": "bix-demo/gatk-2-3-9-lite-demo/gatk-2-3-9-lite-applyrecalibration/6",
                "sbg:links": [
                    {
                        "label": "Homepage",
                        "id": "https://www.broadinstitute.org/gatk/index.php"
                    },
                    {
                        "label": "Source Code",
                        "id": "https://github.com/broadgsa/gatk-protected"
                    },
                    {
                        "label": "Wiki",
                        "id": "https://www.broadinstitute.org/gatk/guide/pdfdocs/GATK_GuideBook_2.3-9.pdf"
                    },
                    {
                        "label": "Download",
                        "id": "https://www.broadinstitute.org/gatk/download/auth?package=GATK-archive&version=2.3-9-ge5ebf34"
                    },
                    {
                        "label": "Publication",
                        "id": "https://www.broadinstitute.org/gatk/about/#in-the-literature"
                    },
                    {
                        "label": "Documentation",
                        "id": "https://www.broadinstitute.org/gatk/gatkdocs/org_broadinstitute_gatk_tools_walkers_variantrecalibration_ApplyRecalibration.php"
                    }
                ],
                "sbg:createdOn": 1450911340,
                "description": "Overview\n\nThis tool performs the second pass in a two-stage process called VQSR; the first pass is performed by the VariantRecalibrator tool. In brief, the first pass consists of creating a Gaussian mixture model by looking at the distribution of annotation values over a high quality subset of the input call set, and then scoring all input variants according to the model. The second pass consists of filtering variants based on score cutoffs identified in the first pass.\n\nUsing the tranche file and recalibration table generated by the previous step, the ApplyRecalibration tool looks at each variant's VQSLOD value and decides which tranche it falls in. Variants in tranches that fall below the specified truth sensitivity filter level have their FILTER field annotated with the corresponding tranche level. This will result in a call set that is filtered to the desired level but retains the information necessary to increase sensitivity if needed.\n\nTo be clear, please note that by \"filtered\", we mean that variants failing the requested tranche cutoff are marked as filtered in the output VCF; they are not discarded.\n\nVQSR is probably the hardest part of the Best Practices to get right, so be sure to read the method documentation, parameter recommendations and tutorial to really understand what these tools and how to use them for best results on your own data.\n\nInput\nThe raw input variants to be filtered.\nThe recalibration table file that was generated by the VariantRecalibrator tool.\nThe tranches file that was generated by the VariantRecalibrator tool.\n\nOutput\nA recalibrated VCF file in which each variant of the requested type is annotated with its VQSLOD and marked as filtered if the score is below the desired quality level.\n\nUsage example for filtering SNPs\n\n java -Xmx3g -jar GenomeAnalysisTK.jar \\\n   -T ApplyRecalibration \\\n   -R reference.fasta \\\n   -input NA12878.HiSeq.WGS.bwa.cleaned.raw.subset.b37.vcf \\\n   --ts_filter_level 99.0 \\\n   -tranchesFile path/to/output.tranches \\\n   -recalFile path/to/output.recal \\\n   -mode SNP \\\n   -o path/to/output.recalibrated.filtered.vcf\n \nCaveats\n\nThe tranche values used in the example above is only a general example. You should determine the level of sensitivity that is appropriate for your specific project. Remember that higher sensitivity (more power to detect variants, yay!) comes at the cost of specificity (more false negatives, boo!). You have to choose at what point you want to set the tradeoff.\nIn order to create the tranche reporting plots (which are only generated for SNPs, not indels!) Rscript needs to be in your environment PATH (this is the scripting version of R, not the interactive version). See http://www.r-project.org for more info on how to download and install R.\n\n(IMPORTANT) Reference \".fasta\" Secondary Files\n\nTools in GATK that require a fasta reference file also look for the reference file's corresponding .fai (fasta index) and .dict (fasta dictionary) files. The fasta index file allows random access to reference bases and the dictionary file is a dictionary of the contig names and sizes contained within the fasta reference. These two secondary files are essential for GATK to work properly. To append these two files to your fasta reference please use the 'SBG FASTA Indices' tool within your GATK based workflow before using any of the GATK tools.",
                "hints": [
                    {
                        "dockerImageId": "47510cb2da55",
                        "class": "DockerRequirement",
                        "dockerPull": "images.sbgenomics.com/stefanristeski/gatk2-lite:2.3-9"
                    },
                    {
                        "value": {
                            "script": "{\n  if($job.inputs.cpu_per_job){\n  \treturn $job.inputs.cpu_per_job\n  }\n  return 1 \n}",
                            "engine": "#cwl-js-engine",
                            "class": "Expression"
                        },
                        "class": "sbg:CPURequirement"
                    },
                    {
                        "value": {
                            "script": "{\n  if($job.inputs.memory_per_job){\n    if($job.inputs.memory_overhead_per_job){\n    \treturn $job.inputs.memory_per_job + $job.inputs.memory_overhead_per_job\n    }\n    else\n  \t\treturn $job.inputs.memory_per_job\n  }\n  else if(!$job.inputs.memory_per_job && $job.inputs.memory_overhead_per_job){\n\t\treturn 2048 + $job.inputs.memory_overhead_per_job  \n  }\n  else\n  \treturn 2048\n}",
                            "engine": "#cwl-js-engine",
                            "class": "Expression"
                        },
                        "class": "sbg:MemRequirement"
                    }
                ],
                "label": "SNP GATK ApplyRecalibration",
                "arguments": [
                    {
                        "prefix": "--out",
                        "separate": true,
                        "valueFrom": {
                            "script": "{\n  variant_name = [].concat($job.inputs.variants)[0].path.replace(/^.*[\\\\\\/]/, '').split('.')\n  variant_namebase = variant_name.slice(0, variant_name.length-1).join('.')\n  return variant_namebase + '.recalibrated.vcf'\n}",
                            "engine": "#cwl-js-engine",
                            "class": "Expression"
                        }
                    }
                ],
                "stdout": "",
                "baseCommand": [
                    "java",
                    {
                        "script": "{\n  if($job.inputs.memory_per_job){\n  \treturn '-Xmx'.concat($job.inputs.memory_per_job, 'M')\n  }\n  \treturn '-Xmx2048M'\n}",
                        "engine": "#cwl-js-engine",
                        "class": "Expression"
                    },
                    "-jar",
                    "/opt/GenomeAnalysisTKLite.jar",
                    "--analysis_type",
                    "ApplyRecalibration",
                    {
                        "script": "{ \n  if($job.inputs.threads_per_job){\n    return '-nt '.concat($job.inputs.threads_per_job)\n  }\n  else{\n  \treturn '-nt '.concat(8)\n  }\n}",
                        "engine": "#cwl-js-engine",
                        "class": "Expression"
                    }
                ],
                "temporaryFailCodes": [],
                "sbg:latestRevision": 6,
                "y": -5.784310809147737,
                "sbg:validationErrors": [],
                "sbg:modifiedBy": "bix-demo",
                "cwlVersion": "sbg:draft-2",
                "sbg:license": "MIT License",
                "class": "CommandLineTool",
                "x": 3041.569298872784,
                "inputs": [
                    {
                        "sbg:category": "Input Files",
                        "sbg:fileTypes": "VCF",
                        "id": "#variants",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--input",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "The raw input variants to be recalibrated.",
                        "sbg:altPrefix": "-input",
                        "required": true,
                        "label": "Input",
                        "type": [
                            "File"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-S",
                        "id": "#validation_strictness",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--validation_strictness",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "How strict should we be with validation.",
                        "sbg:toolDefaultValue": "SILENT",
                        "label": "Validation Strictness",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "validation_strictness",
                                "symbols": [
                                    "SILENT",
                                    "LENIENT",
                                    "STRICT"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-OQ",
                        "id": "#use_original_qualities",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--useOriginalQualities",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "If set, use the original base quality scores from the OQ tag when present instead of the standard scores.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Use Original Qualities",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-use_legacy_downsampler",
                        "id": "#use_legacy_downsampler",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--use_legacy_downsampler",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Use the legacy downsampling implementation instead of the newer, less-tested implementation.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Use Legacy Downsampler",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-U",
                        "id": "#unsafe",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--unsafe",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "If set, enables unsafe operations: nothing will be checked at runtime.  For expert users only who know what they are doing.  We do not support usage of this argument.",
                        "sbg:toolDefaultValue": "",
                        "label": "Unsafe",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "unsafe",
                                "symbols": [
                                    "ALLOW_UNINDEXED_BAM",
                                    "ALLOW_UNSET_BAM_SORT_ORDER",
                                    "NO_READ_ORDER_VERIFICATION",
                                    "ALLOW_SEQ_DICT_INCOMPATIBILITY",
                                    "LENIENT_VCF_PROCESSING",
                                    "ALL"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "Apply Recalibration",
                        "sbg:altPrefix": "-ts_filter_level",
                        "id": "#ts_filter_level",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--ts_filter_level",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "The truth sensitivity level at which to start filtering.",
                        "sbg:toolDefaultValue": "99.0",
                        "label": "Ts Filter Level",
                        "type": [
                            "null",
                            "float"
                        ]
                    },
                    {
                        "sbg:category": "Input Files",
                        "sbg:fileTypes": "TRANCHES",
                        "id": "#tranches_file",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--tranches_file",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "The input tranches file describing where to cut the data.",
                        "sbg:altPrefix": "-tranchesFile",
                        "required": true,
                        "label": "Tranches File",
                        "type": [
                            "File"
                        ]
                    },
                    {
                        "sbg:category": "Execution",
                        "sbg:altPrefix": null,
                        "id": "#threads_per_job",
                        "description": "For tools which support multiprocessing, this value can be used to set the number of threads to be used.",
                        "sbg:toolDefaultValue": "8",
                        "label": "Threads per job",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-tag",
                        "id": "#tag",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--tag",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Arbitrary tag string to identify this GATK run as part of a group of runs, for later analysis.",
                        "sbg:toolDefaultValue": "",
                        "label": "Tag",
                        "type": [
                            "null",
                            "string"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-rpr",
                        "id": "#remove_program_records",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--remove_program_records",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Should we override the Walker's default and remove program records from the SAM header.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Remove Program Records",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "Input Files",
                        "sbg:fileTypes": "FASTA, FA",
                        "id": "#reference",
                        "inputBinding": {
                            "itemSeparator": " ",
                            "prefix": "--reference_sequence",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Reference Genome in FASTA format.",
                        "sbg:altPrefix": "-R",
                        "required": true,
                        "label": "Reference Genome",
                        "type": [
                            "File"
                        ]
                    },
                    {
                        "sbg:category": "Input Files",
                        "sbg:fileTypes": "RECAL",
                        "id": "#recal_file",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--recal_file",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "The input recal file used by ApplyRecalibration.",
                        "sbg:altPrefix": "-recalFile",
                        "required": true,
                        "label": "Recal File",
                        "type": [
                            "File"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-rgbl",
                        "id": "#read_group_black_list",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--read_group_black_list",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Filters out read groups matching : or a .txt file containing the filter strings one per line.",
                        "sbg:toolDefaultValue": "[]",
                        "label": "Read Group Black List",
                        "type": [
                            "null",
                            {
                                "type": "array",
                                "items": "string"
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-rf",
                        "id": "#read_filter",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--read_filter",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Specify filtration criteria to apply to each read individually.",
                        "sbg:toolDefaultValue": "[]",
                        "label": "Read Filter",
                        "type": [
                            "null",
                            {
                                "type": "array",
                                "items": {
                                    "type": "enum",
                                    "name": "read_filter",
                                    "symbols": [
                                        "BadCigarFilter",
                                        "BadMateFilter",
                                        "CountingFilteringIterator.CountingReadFilter",
                                        "DuplicateReadFilter",
                                        "FailsVendorQualityCheckFilter",
                                        "HCMappingQualityFilter",
                                        "LibraryReadFilter",
                                        "MalformedReadFilter",
                                        "MappingQualityFilter",
                                        "MappingQualityUnavailableFilter",
                                        "MappingQualityZeroFilter",
                                        "MateSameStrandFilter",
                                        "MaxInsertSizeFilter",
                                        "MissingReadGroupFilter",
                                        "NoOriginalQualityScoresFilter",
                                        "NotPrimaryAlignmentFilter",
                                        "OverclippedReadFilter",
                                        "Platform454Filter",
                                        "PlatformFilter",
                                        "PlatformUnitFilter",
                                        "ReadGroupBlackListFilter",
                                        "ReadLengthFilter",
                                        "ReadNameFilter",
                                        "ReadStrandFilter",
                                        "ReassignMappingQualityFilter",
                                        "ReassignOneMappingQualityFilter",
                                        "SampleFilter",
                                        "SingleReadGroupFilter",
                                        "UnmappedReadFilter"
                                    ]
                                }
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-preserveQ",
                        "id": "#preserve_qscores_less_than",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--preserve_qscores_less_than",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Bases with quality scores less than this threshold won't be recalibrated (with -BQSR).",
                        "sbg:toolDefaultValue": "6",
                        "label": "Preserve Qscores Less Than",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-et",
                        "id": "#phone_home",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--phone_home",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "What kind of GATK run report should we generate? STANDARD is the default, can be NO_ET so nothing is posted to the run repository. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.",
                        "sbg:toolDefaultValue": "STANDARD",
                        "label": "Phone Home",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "phone_home",
                                "symbols": [
                                    "NO_ET",
                                    "STANDARD"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-pedValidationType",
                        "id": "#pedigree_validation_type",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--pedigreeValidationType",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "How strict should we be in validating the pedigree information?.",
                        "sbg:toolDefaultValue": "STRICT",
                        "label": "Pedigree Validation Type",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "pedigree_validation_type",
                                "symbols": [
                                    "STRICT",
                                    "SILENT"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-pedString",
                        "id": "#pedigree_string",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--pedigreeString",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Pedigree string for samples.",
                        "sbg:toolDefaultValue": "[]",
                        "label": "Pedigree String",
                        "type": [
                            "null",
                            {
                                "type": "array",
                                "items": "string"
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-ndrs",
                        "id": "#non_deterministic_random_seed",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--nonDeterministicRandomSeed",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Makes the GATK behave non deterministically, that is, the random numbers generated will be different in every run.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Non Deterministic Random Seed",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "Apply Recalibration",
                        "sbg:altPrefix": "-mode",
                        "id": "#mode",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--mode",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Recalibration mode to employ: 1.) SNP for recalibrating only SNPs (emitting indels untouched in the output VCF); 2.) INDEL for indels; and 3.) BOTH for recalibrating both SNPs and indels simultaneously.",
                        "sbg:toolDefaultValue": "SNP",
                        "label": "Mode",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "mode",
                                "symbols": [
                                    "SNP",
                                    "INDEL",
                                    "BOTH"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "Execution",
                        "sbg:altPrefix": null,
                        "id": "#memory_per_job",
                        "description": "Amount of RAM memory to be used per job.",
                        "sbg:toolDefaultValue": "2048",
                        "label": "Memory per job",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "Execution",
                        "sbg:toolDefaultValue": "0",
                        "id": "#memory_overhead_per_job",
                        "description": "Memory overhead per job. By default this parameter value is set to '0' (zero megabytes). This parameter value is added to the Memory per job parameter value. This results in the allocation of the sum total (Memory per job and Memory overhead per job) amount of memory per job. By default the memory per job parameter value is set to 2048 megabytes, unless specified otherwise.",
                        "type": [
                            "null",
                            "int"
                        ],
                        "label": "Memory overhead per job"
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-maxRuntimeUnits",
                        "id": "#max_runtime_units",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--maxRuntimeUnits",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "The TimeUnit for maxRuntime.",
                        "sbg:toolDefaultValue": "MINUTES",
                        "label": "Max Runtime Units",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "max_runtime_units",
                                "symbols": [
                                    "NANOSECONDS",
                                    "MICROSECONDS",
                                    "MILLISECONDS",
                                    "SECONDS",
                                    "MINUTES",
                                    "HOURS",
                                    "DAYS"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-maxRuntime",
                        "id": "#max_runtime",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--maxRuntime",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "If provided, that GATK will stop execution cleanly as soon after maxRuntime has been exceeded, truncating the run but not exiting with a failure.  By default the value is interpreted in minutes, but this can be changed by maxRuntimeUnits.",
                        "sbg:toolDefaultValue": "-1",
                        "label": "Max Runtime",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-kpr",
                        "id": "#keep_program_records",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--keep_program_records",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Should we override the Walker's default and keep program records from the SAM header.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Keep Program Records",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "Input Files",
                        "sbg:fileTypes": "TXT, BED, VCF",
                        "id": "#intervals_file",
                        "inputBinding": {
                            "itemSeparator": " ",
                            "prefix": "--intervals",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "One or more genomic intervals over which to operate. Can be an specified in an .intervals file or a rod file.",
                        "sbg:altPrefix": "-L",
                        "required": false,
                        "label": "Intervals",
                        "type": [
                            "null",
                            "File"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "--intervals",
                        "id": "#intervals",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "-L",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "One or more genomic intervals over which to operate.",
                        "sbg:toolDefaultValue": "",
                        "label": "Intervals",
                        "type": [
                            "null",
                            "string"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-isr",
                        "id": "#interval_set_rule",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--interval_set_rule",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Indicates the set merging approach the interval parser should use to combine the various -L or -XL inputs.",
                        "sbg:toolDefaultValue": "UNION",
                        "label": "Interval Set Rule",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "interval_set_rule",
                                "symbols": [
                                    "UNION",
                                    "INTERSECTION"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-ip",
                        "id": "#interval_padding",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--interval_padding",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Indicates how many basepairs of padding to include around each of the intervals specified with the -L/--intervals argument.",
                        "sbg:toolDefaultValue": "0",
                        "label": "Interval Padding",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-im",
                        "id": "#interval_merging",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--interval_merging",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Indicates the interval merging rule we should use for abutting intervals.",
                        "sbg:toolDefaultValue": "ALL",
                        "label": "Interval Merging",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "interval_merging",
                                "symbols": [
                                    "ALL",
                                    "OVERLAPPING_ONLY"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "Apply Recalibration",
                        "sbg:altPrefix": "-ignoreFilter",
                        "id": "#ignore_filter",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--ignore_filter",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "If specified the variant recalibrator will use variants even if the specified filter name is marked in the input VCF file.",
                        "sbg:toolDefaultValue": "[]",
                        "label": "Ignore Filter",
                        "type": [
                            "null",
                            {
                                "type": "array",
                                "items": "string"
                            }
                        ]
                    },
                    {
                        "sbg:category": "Input Files",
                        "sbg:fileTypes": "KEY, LICENSE",
                        "id": "#gatk_key",
                        "inputBinding": {
                            "itemSeparator": " ",
                            "prefix": "--gatk_key",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "GATK Key file. Required if running with -et NO_ET. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.",
                        "sbg:altPrefix": "-K",
                        "required": false,
                        "label": "Gatk key",
                        "type": [
                            "null",
                            "File"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-fixMisencodedQuals",
                        "id": "#fix_misencoded_quals",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "-fixMisencodedQuals",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Fix mis-encoded base quality scores.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Fix Misencoded Quals",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "Input Files",
                        "sbg:fileTypes": "TXT, BED, VCF",
                        "id": "#exclude_intervals",
                        "inputBinding": {
                            "itemSeparator": " ",
                            "prefix": "--excludeIntervals",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "One or more genomic intervals to exclude from processing. Can be an .intervals file or a rod file.",
                        "sbg:altPrefix": "-XL",
                        "required": false,
                        "label": "Exclude Intervals",
                        "type": [
                            "null",
                            "File"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-EOQ",
                        "id": "#emit_original_quals",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--emit_original_quals",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "If true, enables printing of the OQ tag with the original base qualities (with -BQSR).",
                        "sbg:toolDefaultValue": "False",
                        "label": "Emit Original Quals",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-dt",
                        "id": "#downsampling_type",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--downsampling_type",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Type of reads downsampling to employ at a given locus. Reads will be selected randomly to be removed from the pile based on the method described here.",
                        "sbg:toolDefaultValue": "",
                        "label": "Downsampling Type",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "downsampling_type",
                                "symbols": [
                                    "NONE",
                                    "ALL_READS",
                                    "BY_SAMPLE"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-dfrac",
                        "id": "#downsample_to_fraction",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--downsample_to_fraction",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Fraction [0.0-1.0] of reads to downsample to.",
                        "sbg:toolDefaultValue": "",
                        "label": "Downsample to Fraction",
                        "type": [
                            "null",
                            "float"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-dcov",
                        "id": "#downsample_to_coverage",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--downsample_to_coverage",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Coverage to downsample to at any given locus; note that downsampled reads are randomly selected from all possible reads at a locus. For non-locus-based traversals (eg., ReadWalkers), this sets the maximum number of reads at each alignment start position.",
                        "sbg:toolDefaultValue": "",
                        "label": "Downsample to Coverage",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": null,
                        "id": "#disable_radnomization",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--disableRandomization",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Completely eliminates randomization from nondeterministic methods. To be used mostly in the testing framework where dynamic parallelism can result in differing numbers of calls to the generator.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Disable Randomization",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-DIQ",
                        "id": "#disable_indel_quals",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--disable_indel_quals",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "If 'true', disables printing of base insertion and base deletion tags (with -BQSR). Turns off printing of the base insertion and base deletion tags when using the -BQSR argument and only the base substitution qualities will be produced.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Disable Indel Quals",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-DBQ",
                        "id": "#default_base_qualities",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--defaultBaseQualities",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "If reads are missing some or all base quality scores, this value will be used for all base quality scores.",
                        "sbg:toolDefaultValue": "-1",
                        "label": "Default Base Qualities",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "Execution",
                        "sbg:altPrefix": null,
                        "id": "#cpu_per_job",
                        "description": "Number of CPUs per job.",
                        "sbg:toolDefaultValue": "1",
                        "label": "CPU per job",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-baqGOP",
                        "id": "#baq_gap_open_penalty",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--baqGapOpenPenalty",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "BAQ gap open penalty (Phred Scaled). Default value is 40. 30 is perhaps better for whole genome call sets.",
                        "sbg:toolDefaultValue": "40.0",
                        "label": "BAQ Gap Open Penalty",
                        "type": [
                            "null",
                            "float"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-baq",
                        "id": "#baq",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--baq",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Type of BAQ calculation to apply in the engine.",
                        "sbg:toolDefaultValue": "OFF",
                        "label": "BAQ Calculation Type",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "baq",
                                "symbols": [
                                    "OFF",
                                    "CALCULATE_AS_NECESSARY",
                                    "RECALCULATE"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "--allow_potentially_misencoded_quality_scores",
                        "id": "#allow_potentailly_misencoded_quals",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "-allowPotentiallyMisencodedQuals",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Do not fail when encountered base qualities that are too high and seemingly indicate a problem with the base quality encoding of the BAM file.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Allow Potentially Misencoded Quals",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    }
                ],
                "sbg:job": {
                    "allocatedResources": {
                        "mem": 2048,
                        "cpu": 1
                    },
                    "inputs": {
                        "memory_overhead_per_job": 0,
                        "recal_file": {
                            "size": 0,
                            "class": "File",
                            "secondaryFiles": [],
                            "path": "recal_file.ext"
                        },
                        "variants": {
                            "size": 0,
                            "class": "File",
                            "secondaryFiles": [],
                            "path": "variants.ext"
                        },
                        "reference": {
                            "path": "."
                        },
                        "tranches_file": {
                            "size": 0,
                            "class": "File",
                            "secondaryFiles": [],
                            "path": "tranches_file.ext"
                        }
                    }
                },
                "sbg:createdBy": "bix-demo",
                "sbg:revisionsInfo": [
                    {
                        "sbg:modifiedOn": 1450911340,
                        "sbg:revision": 0,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1450911341,
                        "sbg:revision": 1,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1450911342,
                        "sbg:revision": 2,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1450911342,
                        "sbg:revision": 3,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1450911344,
                        "sbg:revision": 4,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1450911344,
                        "sbg:revision": 5,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1450911345,
                        "sbg:revision": 6,
                        "sbg:modifiedBy": "bix-demo"
                    }
                ],
                "sbg:toolAuthor": "Broad Institute",
                "sbg:contributors": [
                    "bix-demo"
                ],
                "outputs": [
                    {
                        "type": [
                            "File"
                        ],
                        "label": "VCF",
                        "outputBinding": {
                            "glob": "*.vcf",
                            "sbg:metadata": {},
                            "sbg:inheritMetadataFrom": "#variants"
                        },
                        "description": "File to which variants should be written.",
                        "id": "#vcf"
                    }
                ],
                "sbg:toolkit": "GATK"
            },
            "outputs": [
                {
                    "id": "#GATK_ApplyRecalibration.vcf"
                }
            ],
            "inputs": [
                {
                    "id": "#GATK_ApplyRecalibration.variants",
                    "source": [
                        "#GATK_CombineVariants.combined_vcf"
                    ]
                },
                {
                    "id": "#GATK_ApplyRecalibration.validation_strictness"
                },
                {
                    "id": "#GATK_ApplyRecalibration.use_original_qualities"
                },
                {
                    "id": "#GATK_ApplyRecalibration.use_legacy_downsampler"
                },
                {
                    "id": "#GATK_ApplyRecalibration.unsafe"
                },
                {
                    "id": "#GATK_ApplyRecalibration.ts_filter_level",
                    "default": 99
                },
                {
                    "id": "#GATK_ApplyRecalibration.tranches_file",
                    "source": [
                        "#GATK_VariantRecalibrator.tranches_file"
                    ]
                },
                {
                    "id": "#GATK_ApplyRecalibration.threads_per_job",
                    "default": 32
                },
                {
                    "id": "#GATK_ApplyRecalibration.tag"
                },
                {
                    "id": "#GATK_ApplyRecalibration.remove_program_records"
                },
                {
                    "id": "#GATK_ApplyRecalibration.reference",
                    "source": [
                        "#SBG_FASTA_Indices.fasta_reference"
                    ]
                },
                {
                    "id": "#GATK_ApplyRecalibration.recal_file",
                    "source": [
                        "#GATK_VariantRecalibrator.recal_file"
                    ]
                },
                {
                    "id": "#GATK_ApplyRecalibration.read_group_black_list"
                },
                {
                    "id": "#GATK_ApplyRecalibration.read_filter"
                },
                {
                    "id": "#GATK_ApplyRecalibration.preserve_qscores_less_than"
                },
                {
                    "id": "#GATK_ApplyRecalibration.phone_home"
                },
                {
                    "id": "#GATK_ApplyRecalibration.pedigree_validation_type"
                },
                {
                    "id": "#GATK_ApplyRecalibration.pedigree_string"
                },
                {
                    "id": "#GATK_ApplyRecalibration.non_deterministic_random_seed"
                },
                {
                    "id": "#GATK_ApplyRecalibration.mode",
                    "default": "SNP"
                },
                {
                    "id": "#GATK_ApplyRecalibration.memory_per_job",
                    "default": 20000
                },
                {
                    "id": "#GATK_ApplyRecalibration.memory_overhead_per_job"
                },
                {
                    "id": "#GATK_ApplyRecalibration.max_runtime_units"
                },
                {
                    "id": "#GATK_ApplyRecalibration.max_runtime"
                },
                {
                    "id": "#GATK_ApplyRecalibration.keep_program_records"
                },
                {
                    "id": "#GATK_ApplyRecalibration.intervals_file"
                },
                {
                    "id": "#GATK_ApplyRecalibration.intervals"
                },
                {
                    "id": "#GATK_ApplyRecalibration.interval_set_rule"
                },
                {
                    "id": "#GATK_ApplyRecalibration.interval_padding"
                },
                {
                    "id": "#GATK_ApplyRecalibration.interval_merging"
                },
                {
                    "id": "#GATK_ApplyRecalibration.ignore_filter"
                },
                {
                    "id": "#GATK_ApplyRecalibration.gatk_key"
                },
                {
                    "id": "#GATK_ApplyRecalibration.fix_misencoded_quals"
                },
                {
                    "id": "#GATK_ApplyRecalibration.exclude_intervals"
                },
                {
                    "id": "#GATK_ApplyRecalibration.emit_original_quals"
                },
                {
                    "id": "#GATK_ApplyRecalibration.downsampling_type"
                },
                {
                    "id": "#GATK_ApplyRecalibration.downsample_to_fraction"
                },
                {
                    "id": "#GATK_ApplyRecalibration.downsample_to_coverage"
                },
                {
                    "id": "#GATK_ApplyRecalibration.disable_radnomization"
                },
                {
                    "id": "#GATK_ApplyRecalibration.disable_indel_quals"
                },
                {
                    "id": "#GATK_ApplyRecalibration.default_base_qualities"
                },
                {
                    "id": "#GATK_ApplyRecalibration.cpu_per_job",
                    "default": 1
                },
                {
                    "id": "#GATK_ApplyRecalibration.baq_gap_open_penalty"
                },
                {
                    "id": "#GATK_ApplyRecalibration.baq"
                },
                {
                    "id": "#GATK_ApplyRecalibration.allow_potentailly_misencoded_quals"
                }
            ],
            "sbg:x": 3041.569298872784
        },
        {
            "id": "#GATK_ApplyRecalibration_1",
            "sbg:y": 163.23535943966522,
            "run": {
                "sbg:modifiedOn": 1450911345,
                "sbg:id": "bix-demo/gatk-2-3-9-lite-demo/gatk-2-3-9-lite-applyrecalibration/6",
                "sbg:toolkitVersion": "2.3.9 Lite",
                "sbg:cmdPreview": "java -Xmx2048M -jar /opt/GenomeAnalysisTKLite.jar --analysis_type ApplyRecalibration -nt 8 --reference_sequence . --input variants.ext --recal_file recal_file.ext --tranches_file tranches_file.ext --out variants.recalibrated.vcf",
                "sbg:revision": 6,
                "requirements": [
                    {
                        "requirements": [
                            {
                                "class": "DockerRequirement",
                                "dockerPull": "rabix/js-engine"
                            }
                        ],
                        "class": "ExpressionEngineRequirement",
                        "id": "#cwl-js-engine"
                    }
                ],
                "successCodes": [],
                "sbg:sbgMaintained": false,
                "sbg:categories": [
                    "VCF-Processing"
                ],
                "sbg:project": "bix-demo/gatk-2-3-9-lite-demo",
                "sbg:image_url": null,
                "stdin": "",
                "id": "bix-demo/gatk-2-3-9-lite-demo/gatk-2-3-9-lite-applyrecalibration/6",
                "sbg:links": [
                    {
                        "label": "Homepage",
                        "id": "https://www.broadinstitute.org/gatk/index.php"
                    },
                    {
                        "label": "Source Code",
                        "id": "https://github.com/broadgsa/gatk-protected"
                    },
                    {
                        "label": "Wiki",
                        "id": "https://www.broadinstitute.org/gatk/guide/pdfdocs/GATK_GuideBook_2.3-9.pdf"
                    },
                    {
                        "label": "Download",
                        "id": "https://www.broadinstitute.org/gatk/download/auth?package=GATK-archive&version=2.3-9-ge5ebf34"
                    },
                    {
                        "label": "Publication",
                        "id": "https://www.broadinstitute.org/gatk/about/#in-the-literature"
                    },
                    {
                        "label": "Documentation",
                        "id": "https://www.broadinstitute.org/gatk/gatkdocs/org_broadinstitute_gatk_tools_walkers_variantrecalibration_ApplyRecalibration.php"
                    }
                ],
                "sbg:createdOn": 1450911340,
                "description": "Overview\n\nThis tool performs the second pass in a two-stage process called VQSR; the first pass is performed by the VariantRecalibrator tool. In brief, the first pass consists of creating a Gaussian mixture model by looking at the distribution of annotation values over a high quality subset of the input call set, and then scoring all input variants according to the model. The second pass consists of filtering variants based on score cutoffs identified in the first pass.\n\nUsing the tranche file and recalibration table generated by the previous step, the ApplyRecalibration tool looks at each variant's VQSLOD value and decides which tranche it falls in. Variants in tranches that fall below the specified truth sensitivity filter level have their FILTER field annotated with the corresponding tranche level. This will result in a call set that is filtered to the desired level but retains the information necessary to increase sensitivity if needed.\n\nTo be clear, please note that by \"filtered\", we mean that variants failing the requested tranche cutoff are marked as filtered in the output VCF; they are not discarded.\n\nVQSR is probably the hardest part of the Best Practices to get right, so be sure to read the method documentation, parameter recommendations and tutorial to really understand what these tools and how to use them for best results on your own data.\n\nInput\nThe raw input variants to be filtered.\nThe recalibration table file that was generated by the VariantRecalibrator tool.\nThe tranches file that was generated by the VariantRecalibrator tool.\n\nOutput\nA recalibrated VCF file in which each variant of the requested type is annotated with its VQSLOD and marked as filtered if the score is below the desired quality level.\n\nUsage example for filtering SNPs\n\n java -Xmx3g -jar GenomeAnalysisTK.jar \\\n   -T ApplyRecalibration \\\n   -R reference.fasta \\\n   -input NA12878.HiSeq.WGS.bwa.cleaned.raw.subset.b37.vcf \\\n   --ts_filter_level 99.0 \\\n   -tranchesFile path/to/output.tranches \\\n   -recalFile path/to/output.recal \\\n   -mode SNP \\\n   -o path/to/output.recalibrated.filtered.vcf\n \nCaveats\n\nThe tranche values used in the example above is only a general example. You should determine the level of sensitivity that is appropriate for your specific project. Remember that higher sensitivity (more power to detect variants, yay!) comes at the cost of specificity (more false negatives, boo!). You have to choose at what point you want to set the tradeoff.\nIn order to create the tranche reporting plots (which are only generated for SNPs, not indels!) Rscript needs to be in your environment PATH (this is the scripting version of R, not the interactive version). See http://www.r-project.org for more info on how to download and install R.\n\n(IMPORTANT) Reference \".fasta\" Secondary Files\n\nTools in GATK that require a fasta reference file also look for the reference file's corresponding .fai (fasta index) and .dict (fasta dictionary) files. The fasta index file allows random access to reference bases and the dictionary file is a dictionary of the contig names and sizes contained within the fasta reference. These two secondary files are essential for GATK to work properly. To append these two files to your fasta reference please use the 'SBG FASTA Indices' tool within your GATK based workflow before using any of the GATK tools.",
                "hints": [
                    {
                        "dockerImageId": "47510cb2da55",
                        "class": "DockerRequirement",
                        "dockerPull": "images.sbgenomics.com/stefanristeski/gatk2-lite:2.3-9"
                    },
                    {
                        "value": {
                            "script": "{\n  if($job.inputs.cpu_per_job){\n  \treturn $job.inputs.cpu_per_job\n  }\n  return 1 \n}",
                            "engine": "#cwl-js-engine",
                            "class": "Expression"
                        },
                        "class": "sbg:CPURequirement"
                    },
                    {
                        "value": {
                            "script": "{\n  if($job.inputs.memory_per_job){\n    if($job.inputs.memory_overhead_per_job){\n    \treturn $job.inputs.memory_per_job + $job.inputs.memory_overhead_per_job\n    }\n    else\n  \t\treturn $job.inputs.memory_per_job\n  }\n  else if(!$job.inputs.memory_per_job && $job.inputs.memory_overhead_per_job){\n\t\treturn 2048 + $job.inputs.memory_overhead_per_job  \n  }\n  else\n  \treturn 2048\n}",
                            "engine": "#cwl-js-engine",
                            "class": "Expression"
                        },
                        "class": "sbg:MemRequirement"
                    }
                ],
                "label": "INDEL GATK ApplyRecalibration",
                "arguments": [
                    {
                        "prefix": "--out",
                        "separate": true,
                        "valueFrom": {
                            "script": "{\n  variant_name = [].concat($job.inputs.variants)[0].path.replace(/^.*[\\\\\\/]/, '').split('.')\n  variant_namebase = variant_name.slice(0, variant_name.length-1).join('.')\n  return variant_namebase + '.recalibrated.vcf'\n}",
                            "engine": "#cwl-js-engine",
                            "class": "Expression"
                        }
                    }
                ],
                "stdout": "",
                "baseCommand": [
                    "java",
                    {
                        "script": "{\n  if($job.inputs.memory_per_job){\n  \treturn '-Xmx'.concat($job.inputs.memory_per_job, 'M')\n  }\n  \treturn '-Xmx2048M'\n}",
                        "engine": "#cwl-js-engine",
                        "class": "Expression"
                    },
                    "-jar",
                    "/opt/GenomeAnalysisTKLite.jar",
                    "--analysis_type",
                    "ApplyRecalibration",
                    {
                        "script": "{ \n  if($job.inputs.threads_per_job){\n    return '-nt '.concat($job.inputs.threads_per_job)\n  }\n  else{\n  \treturn '-nt '.concat(8)\n  }\n}",
                        "engine": "#cwl-js-engine",
                        "class": "Expression"
                    }
                ],
                "temporaryFailCodes": [],
                "sbg:latestRevision": 6,
                "y": 163.23535943966522,
                "sbg:validationErrors": [],
                "sbg:modifiedBy": "bix-demo",
                "cwlVersion": "sbg:draft-2",
                "sbg:license": "MIT License",
                "class": "CommandLineTool",
                "x": 3227.9416940321503,
                "inputs": [
                    {
                        "sbg:category": "Input Files",
                        "sbg:fileTypes": "VCF",
                        "id": "#variants",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--input",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "The raw input variants to be recalibrated.",
                        "sbg:altPrefix": "-input",
                        "required": true,
                        "label": "Input",
                        "type": [
                            "File"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-S",
                        "id": "#validation_strictness",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--validation_strictness",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "How strict should we be with validation.",
                        "sbg:toolDefaultValue": "SILENT",
                        "label": "Validation Strictness",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "validation_strictness",
                                "symbols": [
                                    "SILENT",
                                    "LENIENT",
                                    "STRICT"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-OQ",
                        "id": "#use_original_qualities",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--useOriginalQualities",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "If set, use the original base quality scores from the OQ tag when present instead of the standard scores.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Use Original Qualities",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-use_legacy_downsampler",
                        "id": "#use_legacy_downsampler",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--use_legacy_downsampler",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Use the legacy downsampling implementation instead of the newer, less-tested implementation.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Use Legacy Downsampler",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-U",
                        "id": "#unsafe",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--unsafe",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "If set, enables unsafe operations: nothing will be checked at runtime.  For expert users only who know what they are doing.  We do not support usage of this argument.",
                        "sbg:toolDefaultValue": "",
                        "label": "Unsafe",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "unsafe",
                                "symbols": [
                                    "ALLOW_UNINDEXED_BAM",
                                    "ALLOW_UNSET_BAM_SORT_ORDER",
                                    "NO_READ_ORDER_VERIFICATION",
                                    "ALLOW_SEQ_DICT_INCOMPATIBILITY",
                                    "LENIENT_VCF_PROCESSING",
                                    "ALL"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "Apply Recalibration",
                        "sbg:altPrefix": "-ts_filter_level",
                        "id": "#ts_filter_level",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--ts_filter_level",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "The truth sensitivity level at which to start filtering.",
                        "sbg:toolDefaultValue": "99.0",
                        "label": "Ts Filter Level",
                        "type": [
                            "null",
                            "float"
                        ]
                    },
                    {
                        "sbg:category": "Input Files",
                        "sbg:fileTypes": "TRANCHES",
                        "id": "#tranches_file",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--tranches_file",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "The input tranches file describing where to cut the data.",
                        "sbg:altPrefix": "-tranchesFile",
                        "required": true,
                        "label": "Tranches File",
                        "type": [
                            "File"
                        ]
                    },
                    {
                        "sbg:category": "Execution",
                        "sbg:altPrefix": null,
                        "id": "#threads_per_job",
                        "description": "For tools which support multiprocessing, this value can be used to set the number of threads to be used.",
                        "sbg:toolDefaultValue": "8",
                        "label": "Threads per job",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-tag",
                        "id": "#tag",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--tag",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Arbitrary tag string to identify this GATK run as part of a group of runs, for later analysis.",
                        "sbg:toolDefaultValue": "",
                        "label": "Tag",
                        "type": [
                            "null",
                            "string"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-rpr",
                        "id": "#remove_program_records",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--remove_program_records",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Should we override the Walker's default and remove program records from the SAM header.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Remove Program Records",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "Input Files",
                        "sbg:fileTypes": "FASTA, FA",
                        "id": "#reference",
                        "inputBinding": {
                            "itemSeparator": " ",
                            "prefix": "--reference_sequence",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Reference Genome in FASTA format.",
                        "sbg:altPrefix": "-R",
                        "required": true,
                        "label": "Reference Genome",
                        "type": [
                            "File"
                        ]
                    },
                    {
                        "sbg:category": "Input Files",
                        "sbg:fileTypes": "RECAL",
                        "id": "#recal_file",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--recal_file",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "The input recal file used by ApplyRecalibration.",
                        "sbg:altPrefix": "-recalFile",
                        "required": true,
                        "label": "Recal File",
                        "type": [
                            "File"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-rgbl",
                        "id": "#read_group_black_list",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--read_group_black_list",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Filters out read groups matching : or a .txt file containing the filter strings one per line.",
                        "sbg:toolDefaultValue": "[]",
                        "label": "Read Group Black List",
                        "type": [
                            "null",
                            {
                                "type": "array",
                                "items": "string"
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-rf",
                        "id": "#read_filter",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--read_filter",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Specify filtration criteria to apply to each read individually.",
                        "sbg:toolDefaultValue": "[]",
                        "label": "Read Filter",
                        "type": [
                            "null",
                            {
                                "type": "array",
                                "items": {
                                    "type": "enum",
                                    "name": "read_filter",
                                    "symbols": [
                                        "BadCigarFilter",
                                        "BadMateFilter",
                                        "CountingFilteringIterator.CountingReadFilter",
                                        "DuplicateReadFilter",
                                        "FailsVendorQualityCheckFilter",
                                        "HCMappingQualityFilter",
                                        "LibraryReadFilter",
                                        "MalformedReadFilter",
                                        "MappingQualityFilter",
                                        "MappingQualityUnavailableFilter",
                                        "MappingQualityZeroFilter",
                                        "MateSameStrandFilter",
                                        "MaxInsertSizeFilter",
                                        "MissingReadGroupFilter",
                                        "NoOriginalQualityScoresFilter",
                                        "NotPrimaryAlignmentFilter",
                                        "OverclippedReadFilter",
                                        "Platform454Filter",
                                        "PlatformFilter",
                                        "PlatformUnitFilter",
                                        "ReadGroupBlackListFilter",
                                        "ReadLengthFilter",
                                        "ReadNameFilter",
                                        "ReadStrandFilter",
                                        "ReassignMappingQualityFilter",
                                        "ReassignOneMappingQualityFilter",
                                        "SampleFilter",
                                        "SingleReadGroupFilter",
                                        "UnmappedReadFilter"
                                    ]
                                }
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-preserveQ",
                        "id": "#preserve_qscores_less_than",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--preserve_qscores_less_than",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Bases with quality scores less than this threshold won't be recalibrated (with -BQSR).",
                        "sbg:toolDefaultValue": "6",
                        "label": "Preserve Qscores Less Than",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-et",
                        "id": "#phone_home",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--phone_home",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "What kind of GATK run report should we generate? STANDARD is the default, can be NO_ET so nothing is posted to the run repository. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.",
                        "sbg:toolDefaultValue": "STANDARD",
                        "label": "Phone Home",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "phone_home",
                                "symbols": [
                                    "NO_ET",
                                    "STANDARD"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-pedValidationType",
                        "id": "#pedigree_validation_type",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--pedigreeValidationType",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "How strict should we be in validating the pedigree information?.",
                        "sbg:toolDefaultValue": "STRICT",
                        "label": "Pedigree Validation Type",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "pedigree_validation_type",
                                "symbols": [
                                    "STRICT",
                                    "SILENT"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-pedString",
                        "id": "#pedigree_string",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--pedigreeString",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Pedigree string for samples.",
                        "sbg:toolDefaultValue": "[]",
                        "label": "Pedigree String",
                        "type": [
                            "null",
                            {
                                "type": "array",
                                "items": "string"
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-ndrs",
                        "id": "#non_deterministic_random_seed",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--nonDeterministicRandomSeed",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Makes the GATK behave non deterministically, that is, the random numbers generated will be different in every run.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Non Deterministic Random Seed",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "Apply Recalibration",
                        "sbg:altPrefix": "-mode",
                        "id": "#mode",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--mode",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Recalibration mode to employ: 1.) SNP for recalibrating only SNPs (emitting indels untouched in the output VCF); 2.) INDEL for indels; and 3.) BOTH for recalibrating both SNPs and indels simultaneously.",
                        "sbg:toolDefaultValue": "SNP",
                        "label": "Mode",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "mode",
                                "symbols": [
                                    "SNP",
                                    "INDEL",
                                    "BOTH"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "Execution",
                        "sbg:altPrefix": null,
                        "id": "#memory_per_job",
                        "description": "Amount of RAM memory to be used per job.",
                        "sbg:toolDefaultValue": "2048",
                        "label": "Memory per job",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "Execution",
                        "sbg:toolDefaultValue": "0",
                        "id": "#memory_overhead_per_job",
                        "description": "Memory overhead per job. By default this parameter value is set to '0' (zero megabytes). This parameter value is added to the Memory per job parameter value. This results in the allocation of the sum total (Memory per job and Memory overhead per job) amount of memory per job. By default the memory per job parameter value is set to 2048 megabytes, unless specified otherwise.",
                        "type": [
                            "null",
                            "int"
                        ],
                        "label": "Memory overhead per job"
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-maxRuntimeUnits",
                        "id": "#max_runtime_units",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--maxRuntimeUnits",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "The TimeUnit for maxRuntime.",
                        "sbg:toolDefaultValue": "MINUTES",
                        "label": "Max Runtime Units",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "max_runtime_units",
                                "symbols": [
                                    "NANOSECONDS",
                                    "MICROSECONDS",
                                    "MILLISECONDS",
                                    "SECONDS",
                                    "MINUTES",
                                    "HOURS",
                                    "DAYS"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-maxRuntime",
                        "id": "#max_runtime",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--maxRuntime",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "If provided, that GATK will stop execution cleanly as soon after maxRuntime has been exceeded, truncating the run but not exiting with a failure.  By default the value is interpreted in minutes, but this can be changed by maxRuntimeUnits.",
                        "sbg:toolDefaultValue": "-1",
                        "label": "Max Runtime",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-kpr",
                        "id": "#keep_program_records",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--keep_program_records",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Should we override the Walker's default and keep program records from the SAM header.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Keep Program Records",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "Input Files",
                        "sbg:fileTypes": "TXT, BED, VCF",
                        "id": "#intervals_file",
                        "inputBinding": {
                            "itemSeparator": " ",
                            "prefix": "--intervals",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "One or more genomic intervals over which to operate. Can be an specified in an .intervals file or a rod file.",
                        "sbg:altPrefix": "-L",
                        "required": false,
                        "label": "Intervals",
                        "type": [
                            "null",
                            "File"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "--intervals",
                        "id": "#intervals",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "-L",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "One or more genomic intervals over which to operate.",
                        "sbg:toolDefaultValue": "",
                        "label": "Intervals",
                        "type": [
                            "null",
                            "string"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-isr",
                        "id": "#interval_set_rule",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--interval_set_rule",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Indicates the set merging approach the interval parser should use to combine the various -L or -XL inputs.",
                        "sbg:toolDefaultValue": "UNION",
                        "label": "Interval Set Rule",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "interval_set_rule",
                                "symbols": [
                                    "UNION",
                                    "INTERSECTION"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-ip",
                        "id": "#interval_padding",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--interval_padding",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Indicates how many basepairs of padding to include around each of the intervals specified with the -L/--intervals argument.",
                        "sbg:toolDefaultValue": "0",
                        "label": "Interval Padding",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-im",
                        "id": "#interval_merging",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--interval_merging",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Indicates the interval merging rule we should use for abutting intervals.",
                        "sbg:toolDefaultValue": "ALL",
                        "label": "Interval Merging",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "interval_merging",
                                "symbols": [
                                    "ALL",
                                    "OVERLAPPING_ONLY"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "Apply Recalibration",
                        "sbg:altPrefix": "-ignoreFilter",
                        "id": "#ignore_filter",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--ignore_filter",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "If specified the variant recalibrator will use variants even if the specified filter name is marked in the input VCF file.",
                        "sbg:toolDefaultValue": "[]",
                        "label": "Ignore Filter",
                        "type": [
                            "null",
                            {
                                "type": "array",
                                "items": "string"
                            }
                        ]
                    },
                    {
                        "sbg:category": "Input Files",
                        "sbg:fileTypes": "KEY, LICENSE",
                        "id": "#gatk_key",
                        "inputBinding": {
                            "itemSeparator": " ",
                            "prefix": "--gatk_key",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "GATK Key file. Required if running with -et NO_ET. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.",
                        "sbg:altPrefix": "-K",
                        "required": false,
                        "label": "Gatk key",
                        "type": [
                            "null",
                            "File"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-fixMisencodedQuals",
                        "id": "#fix_misencoded_quals",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "-fixMisencodedQuals",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Fix mis-encoded base quality scores.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Fix Misencoded Quals",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "Input Files",
                        "sbg:fileTypes": "TXT, BED, VCF",
                        "id": "#exclude_intervals",
                        "inputBinding": {
                            "itemSeparator": " ",
                            "prefix": "--excludeIntervals",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "One or more genomic intervals to exclude from processing. Can be an .intervals file or a rod file.",
                        "sbg:altPrefix": "-XL",
                        "required": false,
                        "label": "Exclude Intervals",
                        "type": [
                            "null",
                            "File"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-EOQ",
                        "id": "#emit_original_quals",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--emit_original_quals",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "If true, enables printing of the OQ tag with the original base qualities (with -BQSR).",
                        "sbg:toolDefaultValue": "False",
                        "label": "Emit Original Quals",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-dt",
                        "id": "#downsampling_type",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--downsampling_type",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Type of reads downsampling to employ at a given locus. Reads will be selected randomly to be removed from the pile based on the method described here.",
                        "sbg:toolDefaultValue": "",
                        "label": "Downsampling Type",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "downsampling_type",
                                "symbols": [
                                    "NONE",
                                    "ALL_READS",
                                    "BY_SAMPLE"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-dfrac",
                        "id": "#downsample_to_fraction",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--downsample_to_fraction",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Fraction [0.0-1.0] of reads to downsample to.",
                        "sbg:toolDefaultValue": "",
                        "label": "Downsample to Fraction",
                        "type": [
                            "null",
                            "float"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-dcov",
                        "id": "#downsample_to_coverage",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--downsample_to_coverage",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Coverage to downsample to at any given locus; note that downsampled reads are randomly selected from all possible reads at a locus. For non-locus-based traversals (eg., ReadWalkers), this sets the maximum number of reads at each alignment start position.",
                        "sbg:toolDefaultValue": "",
                        "label": "Downsample to Coverage",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": null,
                        "id": "#disable_radnomization",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--disableRandomization",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Completely eliminates randomization from nondeterministic methods. To be used mostly in the testing framework where dynamic parallelism can result in differing numbers of calls to the generator.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Disable Randomization",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-DIQ",
                        "id": "#disable_indel_quals",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--disable_indel_quals",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "If 'true', disables printing of base insertion and base deletion tags (with -BQSR). Turns off printing of the base insertion and base deletion tags when using the -BQSR argument and only the base substitution qualities will be produced.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Disable Indel Quals",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-DBQ",
                        "id": "#default_base_qualities",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--defaultBaseQualities",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "If reads are missing some or all base quality scores, this value will be used for all base quality scores.",
                        "sbg:toolDefaultValue": "-1",
                        "label": "Default Base Qualities",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "Execution",
                        "sbg:altPrefix": null,
                        "id": "#cpu_per_job",
                        "description": "Number of CPUs per job.",
                        "sbg:toolDefaultValue": "1",
                        "label": "CPU per job",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-baqGOP",
                        "id": "#baq_gap_open_penalty",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--baqGapOpenPenalty",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "BAQ gap open penalty (Phred Scaled). Default value is 40. 30 is perhaps better for whole genome call sets.",
                        "sbg:toolDefaultValue": "40.0",
                        "label": "BAQ Gap Open Penalty",
                        "type": [
                            "null",
                            "float"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-baq",
                        "id": "#baq",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--baq",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Type of BAQ calculation to apply in the engine.",
                        "sbg:toolDefaultValue": "OFF",
                        "label": "BAQ Calculation Type",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "baq",
                                "symbols": [
                                    "OFF",
                                    "CALCULATE_AS_NECESSARY",
                                    "RECALCULATE"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "--allow_potentially_misencoded_quality_scores",
                        "id": "#allow_potentailly_misencoded_quals",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "-allowPotentiallyMisencodedQuals",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Do not fail when encountered base qualities that are too high and seemingly indicate a problem with the base quality encoding of the BAM file.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Allow Potentially Misencoded Quals",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    }
                ],
                "sbg:job": {
                    "allocatedResources": {
                        "mem": 2048,
                        "cpu": 1
                    },
                    "inputs": {
                        "memory_overhead_per_job": 0,
                        "recal_file": {
                            "size": 0,
                            "class": "File",
                            "secondaryFiles": [],
                            "path": "recal_file.ext"
                        },
                        "variants": {
                            "size": 0,
                            "class": "File",
                            "secondaryFiles": [],
                            "path": "variants.ext"
                        },
                        "reference": {
                            "path": "."
                        },
                        "tranches_file": {
                            "size": 0,
                            "class": "File",
                            "secondaryFiles": [],
                            "path": "tranches_file.ext"
                        }
                    }
                },
                "sbg:createdBy": "bix-demo",
                "sbg:revisionsInfo": [
                    {
                        "sbg:modifiedOn": 1450911340,
                        "sbg:revision": 0,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1450911341,
                        "sbg:revision": 1,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1450911342,
                        "sbg:revision": 2,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1450911342,
                        "sbg:revision": 3,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1450911344,
                        "sbg:revision": 4,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1450911344,
                        "sbg:revision": 5,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1450911345,
                        "sbg:revision": 6,
                        "sbg:modifiedBy": "bix-demo"
                    }
                ],
                "sbg:toolAuthor": "Broad Institute",
                "sbg:contributors": [
                    "bix-demo"
                ],
                "outputs": [
                    {
                        "type": [
                            "File"
                        ],
                        "label": "VCF",
                        "outputBinding": {
                            "glob": "*.vcf",
                            "sbg:metadata": {},
                            "sbg:inheritMetadataFrom": "#variants"
                        },
                        "description": "File to which variants should be written.",
                        "id": "#vcf"
                    }
                ],
                "sbg:toolkit": "GATK"
            },
            "outputs": [
                {
                    "id": "#GATK_ApplyRecalibration_1.vcf"
                }
            ],
            "inputs": [
                {
                    "id": "#GATK_ApplyRecalibration_1.variants",
                    "source": [
                        "#GATK_ApplyRecalibration.vcf"
                    ]
                },
                {
                    "id": "#GATK_ApplyRecalibration_1.validation_strictness"
                },
                {
                    "id": "#GATK_ApplyRecalibration_1.use_original_qualities"
                },
                {
                    "id": "#GATK_ApplyRecalibration_1.use_legacy_downsampler"
                },
                {
                    "id": "#GATK_ApplyRecalibration_1.unsafe"
                },
                {
                    "id": "#GATK_ApplyRecalibration_1.ts_filter_level",
                    "default": 99
                },
                {
                    "id": "#GATK_ApplyRecalibration_1.tranches_file",
                    "source": [
                        "#GATK_VariantRecalibrator_1.tranches_file"
                    ]
                },
                {
                    "id": "#GATK_ApplyRecalibration_1.threads_per_job",
                    "default": 32
                },
                {
                    "id": "#GATK_ApplyRecalibration_1.tag"
                },
                {
                    "id": "#GATK_ApplyRecalibration_1.remove_program_records"
                },
                {
                    "id": "#GATK_ApplyRecalibration_1.reference",
                    "source": [
                        "#SBG_FASTA_Indices.fasta_reference"
                    ]
                },
                {
                    "id": "#GATK_ApplyRecalibration_1.recal_file",
                    "source": [
                        "#GATK_VariantRecalibrator_1.recal_file"
                    ]
                },
                {
                    "id": "#GATK_ApplyRecalibration_1.read_group_black_list"
                },
                {
                    "id": "#GATK_ApplyRecalibration_1.read_filter"
                },
                {
                    "id": "#GATK_ApplyRecalibration_1.preserve_qscores_less_than"
                },
                {
                    "id": "#GATK_ApplyRecalibration_1.phone_home"
                },
                {
                    "id": "#GATK_ApplyRecalibration_1.pedigree_validation_type"
                },
                {
                    "id": "#GATK_ApplyRecalibration_1.pedigree_string"
                },
                {
                    "id": "#GATK_ApplyRecalibration_1.non_deterministic_random_seed"
                },
                {
                    "id": "#GATK_ApplyRecalibration_1.mode",
                    "default": "INDEL"
                },
                {
                    "id": "#GATK_ApplyRecalibration_1.memory_per_job",
                    "default": 20000
                },
                {
                    "id": "#GATK_ApplyRecalibration_1.memory_overhead_per_job"
                },
                {
                    "id": "#GATK_ApplyRecalibration_1.max_runtime_units"
                },
                {
                    "id": "#GATK_ApplyRecalibration_1.max_runtime"
                },
                {
                    "id": "#GATK_ApplyRecalibration_1.keep_program_records"
                },
                {
                    "id": "#GATK_ApplyRecalibration_1.intervals_file"
                },
                {
                    "id": "#GATK_ApplyRecalibration_1.intervals"
                },
                {
                    "id": "#GATK_ApplyRecalibration_1.interval_set_rule"
                },
                {
                    "id": "#GATK_ApplyRecalibration_1.interval_padding"
                },
                {
                    "id": "#GATK_ApplyRecalibration_1.interval_merging"
                },
                {
                    "id": "#GATK_ApplyRecalibration_1.ignore_filter"
                },
                {
                    "id": "#GATK_ApplyRecalibration_1.gatk_key"
                },
                {
                    "id": "#GATK_ApplyRecalibration_1.fix_misencoded_quals"
                },
                {
                    "id": "#GATK_ApplyRecalibration_1.exclude_intervals"
                },
                {
                    "id": "#GATK_ApplyRecalibration_1.emit_original_quals"
                },
                {
                    "id": "#GATK_ApplyRecalibration_1.downsampling_type"
                },
                {
                    "id": "#GATK_ApplyRecalibration_1.downsample_to_fraction"
                },
                {
                    "id": "#GATK_ApplyRecalibration_1.downsample_to_coverage"
                },
                {
                    "id": "#GATK_ApplyRecalibration_1.disable_radnomization"
                },
                {
                    "id": "#GATK_ApplyRecalibration_1.disable_indel_quals"
                },
                {
                    "id": "#GATK_ApplyRecalibration_1.default_base_qualities"
                },
                {
                    "id": "#GATK_ApplyRecalibration_1.cpu_per_job",
                    "default": 1
                },
                {
                    "id": "#GATK_ApplyRecalibration_1.baq_gap_open_penalty"
                },
                {
                    "id": "#GATK_ApplyRecalibration_1.baq"
                },
                {
                    "id": "#GATK_ApplyRecalibration_1.allow_potentailly_misencoded_quals"
                }
            ],
            "sbg:x": 3227.9416940321503
        },
        {
            "id": "#SBG_FASTA_Indices",
            "sbg:y": 368.3333593606951,
            "run": {
                "sbg:modifiedOn": 1458669249,
                "sbg:id": "bix-demo/sbgtools-demo/sbg-fasta-indices/5",
                "id": "bix-demo/sbgtools-demo/sbg-fasta-indices/5",
                "sbg:cmdPreview": "python /opt/sbg-fasta-indices.py --REFERENCE /path/to/reference.ext  --dict  --fai",
                "requirements": [
                    {
                        "requirements": [
                            {
                                "class": "DockerRequirement",
                                "dockerPull": "rabix/js-engine"
                            }
                        ],
                        "class": "ExpressionEngineRequirement",
                        "id": "#cwl-js-engine"
                    }
                ],
                "successCodes": [],
                "sbg:sbgMaintained": false,
                "sbg:categories": [
                    "Indexing"
                ],
                "sbg:project": "bix-demo/sbgtools-demo",
                "sbg:image_url": null,
                "stdin": "",
                "y": 368.3333593606951,
                "sbg:revision": 5,
                "sbg:createdOn": 1450911283,
                "description": "Tool allows creating FASTA dictionary and index simultaneously which is necessary for running GATK tools. This version of tool for indexing uses SAMtools faidx command (toolkit version0.1.19), while for the FASTA dictionary is used Picard CreateFastaDictionary (toolkit version 1.140)",
                "hints": [
                    {
                        "dockerImageId": "b177f5bd06db",
                        "class": "DockerRequirement",
                        "dockerPull": "images.sbgenomics.com/djordje_klisic/sbg-fasta-indices:1.0"
                    },
                    {
                        "value": 1,
                        "class": "sbg:CPURequirement"
                    },
                    {
                        "value": 2500,
                        "class": "sbg:MemRequirement"
                    }
                ],
                "label": "SBG FASTA Indices",
                "arguments": [
                    {
                        "separate": true,
                        "valueFrom": "--dict"
                    },
                    {
                        "separate": true,
                        "valueFrom": "--fai"
                    }
                ],
                "stdout": "",
                "baseCommand": [
                    "python",
                    "/opt/sbg-fasta-indices.py"
                ],
                "temporaryFailCodes": [],
                "sbg:latestRevision": 5,
                "sbg:validationErrors": [],
                "sbg:modifiedBy": "markop",
                "cwlVersion": "sbg:draft-2",
                "sbg:license": "Apache License 2.0",
                "class": "CommandLineTool",
                "x": 733.3336788416034,
                "inputs": [
                    {
                        "sbg:stageInput": "link",
                        "required": true,
                        "id": "#reference",
                        "inputBinding": {
                            "prefix": "--REFERENCE",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "FASTA file to be indexed",
                        "type": [
                            "File"
                        ],
                        "label": "FASTA file"
                    }
                ],
                "sbg:job": {
                    "allocatedResources": {
                        "mem": 2500,
                        "cpu": 1
                    },
                    "inputs": {
                        "reference": {
                            "size": 0,
                            "class": "File",
                            "secondaryFiles": [],
                            "path": "/path/to/reference.ext"
                        }
                    }
                },
                "sbg:createdBy": "bix-demo",
                "sbg:revisionsInfo": [
                    {
                        "sbg:modifiedOn": 1450911283,
                        "sbg:revision": 0,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1450911283,
                        "sbg:revision": 1,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1458655509,
                        "sbg:revision": 3,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1458655251,
                        "sbg:revision": 2,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1458658019,
                        "sbg:revision": 4,
                        "sbg:modifiedBy": "markop"
                    },
                    {
                        "sbg:modifiedOn": 1458669249,
                        "sbg:revision": 5,
                        "sbg:modifiedBy": "markop"
                    }
                ],
                "sbg:toolAuthor": "Sanja Mijalkovic, Seven Bridges Genomics, <sanja.mijalkovic@sbgenomics.com>",
                "sbg:contributors": [
                    "markop",
                    "bix-demo"
                ],
                "outputs": [
                    {
                        "sbg:fileTypes": "FASTA",
                        "id": "#fasta_reference",
                        "outputBinding": {
                            "glob": {
                                "script": "{\n  return $job.inputs.reference.path.split(\"/\").pop()\n}",
                                "engine": "#cwl-js-engine",
                                "class": "Expression"
                            },
                            "secondaryFiles": [
                                ".fai",
                                "^.dict"
                            ],
                            "sbg:inheritMetadataFrom": "#reference"
                        },
                        "type": [
                            "null",
                            "File"
                        ],
                        "label": "Reference",
                        "fileTypes": "FASTA, FA"
                    },
                    {
                        "sbg:fileTypes": "FAI",
                        "label": "FASTA Index",
                        "outputBinding": {
                            "glob": "*.fai",
                            "sbg:metadata": {}
                        },
                        "id": "#fasta_index",
                        "type": [
                            "null",
                            "File"
                        ]
                    },
                    {
                        "sbg:fileTypes": "DICT",
                        "label": "FASTA Dictionary",
                        "outputBinding": {
                            "glob": "*.dict",
                            "sbg:metadata": {}
                        },
                        "id": "#fasta_dict",
                        "type": [
                            "null",
                            "File"
                        ]
                    }
                ],
                "sbg:toolkit": "SBGTools"
            },
            "outputs": [
                {
                    "id": "#SBG_FASTA_Indices.fasta_reference"
                },
                {
                    "id": "#SBG_FASTA_Indices.fasta_index"
                },
                {
                    "id": "#SBG_FASTA_Indices.fasta_dict"
                }
            ],
            "inputs": [
                {
                    "id": "#SBG_FASTA_Indices.reference",
                    "source": [
                        "#SBG_Untar_fasta.output_fasta"
                    ]
                }
            ],
            "sbg:x": 733.3336788416034
        },
        {
            "id": "#SBG_Html2b64",
            "scatter": "#SBG_Html2b64.input_file",
            "sbg:y": 442.3333612812897,
            "run": {
                "sbg:modifiedOn": 1459963571,
                "sbg:id": "bix-demo/sbgtools-demo/sbg-html2b64/2",
                "sbg:toolkitVersion": "1.0",
                "sbg:cmdPreview": "python /opt/sbg_html_to_b64.py",
                "requirements": [],
                "successCodes": [],
                "sbg:sbgMaintained": false,
                "sbg:categories": [
                    "Converters",
                    "Plotting-and-Rendering"
                ],
                "sbg:project": "bix-demo/sbgtools-demo",
                "sbg:image_url": null,
                "stdin": "",
                "id": "bix-demo/sbgtools-demo/sbg-html2b64/2",
                "sbg:revision": 2,
                "sbg:createdOn": 1450911294,
                "description": "Tool for converting archived html output of FastQC and similar tools to b64html so it can easily be displayed in web browsers or on SBG platform.",
                "hints": [
                    {
                        "dockerImageId": "8c35d2a2d8d1",
                        "class": "DockerRequirement",
                        "dockerPull": "images.sbgenomics.com/mladenlsbg/sbg-html-to-b64:1.0.1"
                    },
                    {
                        "value": 1,
                        "class": "sbg:CPURequirement"
                    },
                    {
                        "value": 1000,
                        "class": "sbg:MemRequirement"
                    }
                ],
                "label": "SBG Html2b64",
                "arguments": [],
                "stdout": "",
                "baseCommand": [
                    "python",
                    "/opt/sbg_html_to_b64.py"
                ],
                "temporaryFailCodes": [],
                "sbg:latestRevision": 2,
                "y": 442.3333612812897,
                "sbg:validationErrors": [],
                "sbg:modifiedBy": "bix-demo",
                "cwlVersion": "sbg:draft-2",
                "sbg:license": "Apache License 2.0",
                "class": "CommandLineTool",
                "x": 349.33335738711946,
                "inputs": [
                    {
                        "sbg:category": "File input.",
                        "sbg:fileTypes": "ZIP",
                        "id": "#input_file",
                        "inputBinding": {
                            "prefix": "--input",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Compressed archive.",
                        "required": false,
                        "label": "Input file",
                        "type": [
                            "null",
                            "File"
                        ]
                    }
                ],
                "sbg:job": {
                    "allocatedResources": {
                        "mem": 1000,
                        "cpu": 1
                    },
                    "inputs": {
                        "input_file": {
                            "size": 0,
                            "class": "File",
                            "secondaryFiles": [],
                            "path": "input_file.ext"
                        }
                    }
                },
                "sbg:createdBy": "bix-demo",
                "sbg:revisionsInfo": [
                    {
                        "sbg:modifiedOn": 1450911294,
                        "sbg:revision": 0,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1450911294,
                        "sbg:revision": 1,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1459963571,
                        "sbg:revision": 2,
                        "sbg:modifiedBy": "bix-demo"
                    }
                ],
                "sbg:toolAuthor": "Seven Bridges",
                "sbg:contributors": [
                    "bix-demo"
                ],
                "outputs": [
                    {
                        "sbg:fileTypes": "HTML, B64HTML",
                        "id": "#b64html",
                        "outputBinding": {
                            "glob": "*b64html",
                            "sbg:metadata": {},
                            "sbg:inheritMetadataFrom": "#input_file"
                        },
                        "description": "Output file, b64html.",
                        "type": [
                            "null",
                            "File"
                        ],
                        "label": "B64html"
                    }
                ],
                "sbg:toolkit": "SBGTools"
            },
            "outputs": [
                {
                    "id": "#SBG_Html2b64.b64html"
                }
            ],
            "inputs": [
                {
                    "id": "#SBG_Html2b64.input_file",
                    "source": [
                        "#FastQC.report_zip"
                    ]
                }
            ],
            "sbg:x": 349.33335738711946
        },
        {
            "id": "#SBG_Untar_fasta",
            "sbg:y": -95.57292397444452,
            "run": {
                "sbg:modifiedOn": 1466077480,
                "sbg:id": "bix-demo/sbgtools-demo/sbg-untar-fasta/7",
                "sbg:toolkitVersion": "v1.0",
                "sbg:cmdPreview": "echo Passing input file",
                "sbg:job": {
                    "allocatedResources": {
                        "mem": 1000,
                        "cpu": 1
                    },
                    "inputs": {
                        "input_tar_with_reference": {
                            "size": 0,
                            "class": "File",
                            "secondaryFiles": [],
                            "path": "input_file.fasta"
                        }
                    }
                },
                "requirements": [
                    {
                        "requirements": [
                            {
                                "class": "DockerRequirement",
                                "dockerPull": "rabix/js-engine"
                            }
                        ],
                        "class": "ExpressionEngineRequirement",
                        "id": "#cwl-js-engine"
                    }
                ],
                "successCodes": [],
                "sbg:sbgMaintained": false,
                "sbg:categories": [
                    "Other"
                ],
                "sbg:project": "bix-demo/sbgtools-demo",
                "sbg:image_url": null,
                "stdin": "",
                "id": "bix-demo/sbgtools-demo/sbg-untar-fasta/7",
                "sbg:revision": 7,
                "sbg:createdOn": 1466002722,
                "description": "SBG Untar fasta outputs FA/FASTA/FA.GZ/FASTA.GZ from TAR.",
                "hints": [
                    {
                        "dockerImageId": "58b79c627f95",
                        "class": "DockerRequirement",
                        "dockerPull": "images.sbgenomics.com/markop/sbg-decompressor:1.0"
                    },
                    {
                        "value": 1,
                        "class": "sbg:CPURequirement"
                    },
                    {
                        "value": 1000,
                        "class": "sbg:MemRequirement"
                    }
                ],
                "label": "SBG Untar fasta",
                "arguments": [],
                "sbg:validationErrors": [],
                "baseCommand": [
                    {
                        "script": "{\n  reference_file = $job.inputs.input_tar_with_reference.path.split('/')[$job.inputs.input_tar_with_reference.path.split('/').length-1]\n  ext = reference_file.split('.')[reference_file.split('.').length-1]\n  if(ext=='tar'){\n    return 'tar -xf ' + reference_file    \n  }\n  else{\n    return 'echo Passing input file '\n  }\n}",
                        "engine": "#cwl-js-engine",
                        "class": "Expression"
                    }
                ],
                "stdout": "",
                "y": -95.57292397444452,
                "sbg:latestRevision": 7,
                "sbg:modifiedBy": "vladimirk",
                "temporaryFailCodes": [],
                "sbg:homepage": "https://igor.sbgenomics.com/",
                "cwlVersion": "sbg:draft-2",
                "class": "CommandLineTool",
                "x": 293.3333436648053,
                "inputs": [
                    {
                        "type": [
                            "File"
                        ],
                        "sbg:fileTypes": "TAR,FA,FASTA,FA.GZ,FASTA.GZ",
                        "id": "#input_tar_with_reference",
                        "description": "The input archive file to be unpacked.",
                        "required": true,
                        "sbg:stageInput": "link",
                        "label": "Input archive file with fasta"
                    }
                ],
                "sbg:license": "Apache License 2.0",
                "sbg:createdBy": "bix-demo",
                "sbg:revisionsInfo": [
                    {
                        "sbg:modifiedOn": 1466002722,
                        "sbg:revision": 0,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1466003214,
                        "sbg:revision": 1,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:modifiedOn": 1466004710,
                        "sbg:revision": 2,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1466004986,
                        "sbg:revision": 3,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1466005081,
                        "sbg:revision": 4,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1466005599,
                        "sbg:revision": 5,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1466007588,
                        "sbg:revision": 6,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:modifiedOn": 1466077480,
                        "sbg:revision": 7,
                        "sbg:modifiedBy": "vladimirk"
                    }
                ],
                "sbg:toolAuthor": "Vladimir Kovacevic, Seven Bridges Genomics",
                "sbg:contributors": [
                    "vladimirk",
                    "bix-demo"
                ],
                "outputs": [
                    {
                        "type": [
                            "File"
                        ],
                        "label": "Unpacked fasta file",
                        "outputBinding": {
                            "glob": "{*.fasta,*.fa,*.fa.gz,*.fasta.gz}",
                            "sbg:inheritMetadataFrom": "#input_tar_with_reference"
                        },
                        "description": "Unpacked fasta file from the input archive.",
                        "id": "#output_fasta"
                    }
                ],
                "sbg:toolkit": "SBGTools"
            },
            "outputs": [
                {
                    "id": "#SBG_Untar_fasta.output_fasta"
                }
            ],
            "inputs": [
                {
                    "id": "#SBG_Untar_fasta.input_tar_with_reference",
                    "source": [
                        "#reference"
                    ]
                }
            ],
            "sbg:x": 293.3333436648053
        },
        {
            "id": "#BWA_INDEX",
            "sbg:y": 28.333334326744097,
            "run": {
                "sbg:modifiedOn": 1469449858,
                "sbg:id": "vladimirk/bwa-mem-bundle-0-7-13-demo/bwa-index/15",
                "sbg:toolkitVersion": "0.7.13",
                "sbg:cmdPreview": "/opt/bwa-0.7.13/bwa index reference.fasta   -a bwtsw      -6    ; tar -cf reference.fasta.tar reference.fasta *.amb *.ann *.bwt *.pac *.sa",
                "sbg:revision": 15,
                "requirements": [
                    {
                        "requirements": [
                            {
                                "class": "DockerRequirement",
                                "dockerPull": "rabix/js-engine"
                            }
                        ],
                        "class": "ExpressionEngineRequirement",
                        "id": "#cwl-js-engine"
                    }
                ],
                "successCodes": [],
                "sbg:sbgMaintained": false,
                "sbg:categories": [
                    "Indexing",
                    "FASTA-Processing"
                ],
                "sbg:project": "vladimirk/bwa-mem-bundle-0-7-13-demo",
                "sbg:image_url": null,
                "stdin": "",
                "id": "vladimirk/bwa-mem-bundle-0-7-13-demo/bwa-index/15",
                "sbg:links": [
                    {
                        "label": "Homepage",
                        "id": "http://bio-bwa.sourceforge.net/"
                    },
                    {
                        "label": "Source code",
                        "id": "https://github.com/lh3/bwa"
                    },
                    {
                        "label": "Wiki",
                        "id": "http://bio-bwa.sourceforge.net/bwa.shtml"
                    },
                    {
                        "label": "Download",
                        "id": "http://sourceforge.net/projects/bio-bwa/"
                    },
                    {
                        "label": "Publication",
                        "id": "http://www.ncbi.nlm.nih.gov/pubmed/19451168"
                    }
                ],
                "sbg:createdOn": 1458658817,
                "description": "BWA INDEX constructs the FM-index (Full-text index in Minute space) for the reference genome.\nGenerated index files will be used with BWA MEM, BWA ALN, BWA SAMPE and BWA SAMSE tools.\n\nIf input reference file has TAR extension it is assumed that BWA indices came together with it. BWA INDEX will only pass that TAR to the output. If input is not TAR, the creation of BWA indices and its packing in TAR file (together with the reference) will be performed.",
                "hints": [
                    {
                        "dockerImageId": "2f813371e803",
                        "class": "DockerRequirement",
                        "dockerPull": "images.sbgenomics.com/vladimirk/bwa:0.7.13"
                    },
                    {
                        "value": 1,
                        "class": "sbg:CPURequirement"
                    },
                    {
                        "value": {
                            "script": "{\n  GB_1 = 1024*1024*1024\n  reads_size = $job.inputs.reference.size\n\n  if(!reads_size) { reads_size = GB_1 }\n  \n  if($job.inputs.total_memory){\n    return $job.inputs.total_memory * 1024\n  } else {\n    return (parseInt(1.5 * reads_size / (1024*1024)))\n  }\n}",
                            "engine": "#cwl-js-engine",
                            "class": "Expression"
                        },
                        "class": "sbg:MemRequirement"
                    }
                ],
                "label": "BWA INDEX",
                "arguments": [
                    {
                        "separate": true,
                        "valueFrom": {
                            "script": "{\n  reference_file = $job.inputs.reference.path.split('/')[$job.inputs.reference.path.split('/').length-1]\n  ext = reference_file.split('.')[reference_file.split('.').length-1]\n  if(ext=='tar' || !$job.inputs.bwt_construction){\n    return ''\n  } else {\n    return '-a ' + $job.inputs.bwt_construction\n  }\n}",
                            "engine": "#cwl-js-engine",
                            "class": "Expression"
                        }
                    },
                    {
                        "separate": true,
                        "valueFrom": {
                            "script": "{\n  reference_file = $job.inputs.reference.path.split('/')[$job.inputs.reference.path.split('/').length-1]\n  ext = reference_file.split('.')[reference_file.split('.').length-1]\n  if(ext=='tar' || !$job.inputs.prefix){\n    return ''\n  } else {\n    return '-p ' + $job.inputs.prefix\n  }\n}\n",
                            "engine": "#cwl-js-engine",
                            "class": "Expression"
                        }
                    },
                    {
                        "separate": true,
                        "valueFrom": {
                            "script": "{\n  reference_file = $job.inputs.reference.path.split('/')[$job.inputs.reference.path.split('/').length-1]\n  ext = reference_file.split('.')[reference_file.split('.').length-1]\n  if(ext=='tar' || !$job.inputs.block_size){\n    return ''\n  } else {\n    return '-b ' + $job.inputs.block_size\n  }\n}\n\n",
                            "engine": "#cwl-js-engine",
                            "class": "Expression"
                        }
                    },
                    {
                        "separate": true,
                        "valueFrom": {
                            "script": "{\n  reference_file = $job.inputs.reference.path.split('/')[$job.inputs.reference.path.split('/').length-1]\n  ext = reference_file.split('.')[reference_file.split('.').length-1]\n  if(ext=='tar' || !$job.inputs.add_64_to_fasta_name){\n    return ''\n  } else {\n    return '-6 '\n  }\n}\n",
                            "engine": "#cwl-js-engine",
                            "class": "Expression"
                        }
                    },
                    {
                        "separate": true,
                        "valueFrom": {
                            "script": "{\n  reference_file = $job.inputs.reference.path.split('/')[$job.inputs.reference.path.split('/').length-1]\n  ext = reference_file.split('.')[reference_file.split('.').length-1]\n  if(ext=='tar'){\n    return ''\n  }\n  else{\n    tar_cmd = 'tar -cf ' + reference_file + '.tar ' + reference_file + ' *.amb' + ' *.ann' + ' *.bwt' + ' *.pac' + ' *.sa' \n    return ' ; ' + tar_cmd\n  }\n}",
                            "engine": "#cwl-js-engine",
                            "class": "Expression"
                        }
                    }
                ],
                "stdout": "",
                "baseCommand": [
                    {
                        "script": "{\n  reference_file = $job.inputs.reference.path.split('/')[$job.inputs.reference.path.split('/').length-1]\n  ext = reference_file.split('.')[reference_file.split('.').length-1]\n  if(ext=='tar'){\n    return 'echo Index files passed without any processing!'\n  }\n  else{\n    index_cmd = '/opt/bwa-0.7.13/bwa index '+ reference_file + ' '\n    return index_cmd\n  }\n}",
                        "engine": "#cwl-js-engine",
                        "class": "Expression"
                    }
                ],
                "temporaryFailCodes": [],
                "sbg:latestRevision": 15,
                "y": 28.333334326744097,
                "sbg:validationErrors": [],
                "sbg:modifiedBy": "vladimirk",
                "cwlVersion": "sbg:draft-2",
                "sbg:license": "GNU Affero General Public License v3.0, MIT License",
                "class": "CommandLineTool",
                "x": 580.3333612283075,
                "inputs": [
                    {
                        "sbg:category": "Configuration",
                        "type": [
                            "null",
                            "int"
                        ],
                        "label": "Total memory [Gb]",
                        "id": "#total_memory",
                        "description": "Total memory [GB] to be reserved for the tool (Default value is 1.5 x size_of_the_reference)."
                    },
                    {
                        "sbg:category": "File input",
                        "sbg:fileTypes": "FASTA,FA,FA.GZ,FASTA.GZ,TAR",
                        "id": "#reference",
                        "description": "Input reference fasta of TAR file with reference and indices.",
                        "required": true,
                        "sbg:stageInput": "link",
                        "label": "Reference",
                        "type": [
                            "File"
                        ]
                    },
                    {
                        "sbg:category": "Configuration",
                        "type": [
                            "null",
                            "string"
                        ],
                        "label": "Prefix of the index to be output",
                        "id": "#prefix_of_the_index_to_be_output",
                        "description": "Prefix of the index [same as fasta name]."
                    },
                    {
                        "sbg:category": "Configuration",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "bwt_construction",
                                "symbols": [
                                    "bwtsw",
                                    "is",
                                    "div"
                                ]
                            }
                        ],
                        "id": "#bwt_construction",
                        "inputBinding": {
                            "prefix": "-a",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Algorithm for constructing BWT index. Available options are:s\tIS linear-time algorithm for constructing suffix array. It requires 5.37N memory where N is the size of the database. IS is moderately fast, but does not work with database larger than 2GB. IS is the default algorithm due to its simplicity. The current codes for IS algorithm are reimplemented by Yuta Mori. bwtsw\tAlgorithm implemented in BWT-SW. This method works with the whole human genome. Warning: `-a bwtsw' does not work for short genomes, while `-a is' and `-a div' do not work not for long genomes.",
                        "sbg:toolDefaultValue": "auto",
                        "label": "Bwt construction"
                    },
                    {
                        "sbg:category": "Configuration",
                        "sbg:toolDefaultValue": "10000000",
                        "id": "#block_size",
                        "description": "Block size for the bwtsw algorithm (effective with -a bwtsw).",
                        "type": [
                            "null",
                            "int"
                        ],
                        "label": "Block size"
                    },
                    {
                        "sbg:category": "Configuration",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "label": "Output index files renamed by adding 64",
                        "id": "#add_64_to_fasta_name",
                        "description": "Index files named as <in.fasta>64 instead of <in.fasta>.*."
                    }
                ],
                "sbg:job": {
                    "allocatedResources": {
                        "mem": 1536,
                        "cpu": 1
                    },
                    "inputs": {
                        "add_64_to_fasta_name": true,
                        "total_memory": null,
                        "bwt_construction": "bwtsw",
                        "block_size": 0,
                        "reference": {
                            "size": 0,
                            "class": "File",
                            "secondaryFiles": [
                                {
                                    "path": ".amb"
                                },
                                {
                                    "path": ".ann"
                                },
                                {
                                    "path": ".bwt"
                                },
                                {
                                    "path": ".pac"
                                },
                                {
                                    "path": ".sa"
                                }
                            ],
                            "path": "/path/to/the/reference.fasta"
                        },
                        "prefix_of_the_index_to_be_output": "prefix"
                    }
                },
                "sbg:createdBy": "vladimirk",
                "sbg:revisionsInfo": [
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1458658817,
                        "sbg:revision": 0,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1458658836,
                        "sbg:revision": 1,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1458745340,
                        "sbg:revision": 2,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1460643813,
                        "sbg:revision": 3,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1462801955,
                        "sbg:revision": 4,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1465227109,
                        "sbg:revision": 5,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1465231882,
                        "sbg:revision": 6,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1465990497,
                        "sbg:revision": 7,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1465992672,
                        "sbg:revision": 8,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1465993183,
                        "sbg:revision": 9,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1465994793,
                        "sbg:revision": 10,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1466070064,
                        "sbg:revision": 11,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1466071727,
                        "sbg:revision": 12,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1466072504,
                        "sbg:revision": 13,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1466077580,
                        "sbg:revision": 14,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1469449858,
                        "sbg:revision": 15,
                        "sbg:modifiedBy": "vladimirk"
                    }
                ],
                "sbg:toolAuthor": "Heng Li",
                "sbg:contributors": [
                    "vladimirk"
                ],
                "outputs": [
                    {
                        "sbg:fileTypes": "TAR",
                        "id": "#indexed_reference",
                        "outputBinding": {
                            "glob": {
                                "script": "{\n  reference_file = $job.inputs.reference.path.split('/')[$job.inputs.reference.path.split('/').length-1]\n  ext = reference_file.split('.')[reference_file.split('.').length-1]\n  if(ext=='tar'){\n    return reference_file\n  }\n  else{\n    return reference_file + '.tar'\n  }\n}\n",
                                "engine": "#cwl-js-engine",
                                "class": "Expression"
                            },
                            "sbg:inheritMetadataFrom": "#reference"
                        },
                        "description": "TARed fasta with its BWA indices.",
                        "type": [
                            "null",
                            "File"
                        ],
                        "label": "TARed fasta with its BWA indices",
                        "fileTypes": "TAR"
                    }
                ],
                "sbg:toolkit": "BWA"
            },
            "outputs": [
                {
                    "id": "#BWA_INDEX.indexed_reference"
                }
            ],
            "inputs": [
                {
                    "id": "#BWA_INDEX.total_memory"
                },
                {
                    "id": "#BWA_INDEX.reference",
                    "source": [
                        "#reference"
                    ]
                },
                {
                    "id": "#BWA_INDEX.prefix_of_the_index_to_be_output"
                },
                {
                    "id": "#BWA_INDEX.bwt_construction"
                },
                {
                    "id": "#BWA_INDEX.block_size"
                },
                {
                    "id": "#BWA_INDEX.add_64_to_fasta_name"
                }
            ],
            "sbg:x": 580.3333612283075
        },
        {
            "id": "#SnpEff",
            "sbg:y": 269.4271676577653,
            "run": {
                "sbg:modifiedOn": 1472212308,
                "sbg:id": "vladimirk/snpeff-4-2-demo/snpeff-4-2/23",
                "sbg:toolkitVersion": "4.2",
                "sbg:cmdPreview": "unzip -o /path/to/database/GRCh37.75.zip -d /opt/snpEff ; java -Xmx3072M -jar /opt/snpEff/snpEff.jar  -nodownload  -noLog  GRCh37.75  path/to/variance/varinats_file.vcf  > varinats_file.snpEff_annotated.vcf",
                "sbg:revision": 23,
                "requirements": [
                    {
                        "requirements": [
                            {
                                "class": "DockerRequirement",
                                "dockerPull": "rabix/js-engine"
                            }
                        ],
                        "class": "ExpressionEngineRequirement",
                        "id": "#cwl-js-engine"
                    }
                ],
                "successCodes": [],
                "sbg:sbgMaintained": false,
                "sbg:categories": [
                    "Annotation",
                    "VCF-Processing"
                ],
                "sbg:project": "vladimirk/snpeff-4-2-demo",
                "sbg:image_url": null,
                "stdin": "",
                "id": "vladimirk/snpeff-4-2-demo/snpeff-4-2/23",
                "sbg:links": [
                    {
                        "label": "Homepage",
                        "id": "http://snpeff.sourceforge.net/index.html"
                    },
                    {
                        "label": "Source Code",
                        "id": "https://github.com/pcingola/SnpEff"
                    },
                    {
                        "label": "Wiki",
                        "id": "http://snpeff.sourceforge.net/SnpEff_manual.html"
                    },
                    {
                        "label": "Download",
                        "id": "http://sourceforge.net/projects/snpeff/files/snpEff_latest_core.zip"
                    },
                    {
                        "label": "Publication",
                        "id": "http://snpeff.sourceforge.net/SnpEff_paper.pdf"
                    }
                ],
                "sbg:createdOn": 1459258963,
                "sbg:revisionNotes": "typos",
                "hints": [
                    {
                        "dockerImageId": "aae3dcb89b53",
                        "class": "DockerRequirement",
                        "dockerPull": "images.sbgenomics.com/vladimirk/snpeff:4.2"
                    },
                    {
                        "value": 1,
                        "class": "sbg:CPURequirement"
                    },
                    {
                        "value": {
                            "script": "{\n  if ($job.inputs.total_memory)\n  {\n    return $job.inputs.total_memory * 1024\n  }\n  \n  else\n  {\n    return 4096\n  }\n}",
                            "engine": "#cwl-js-engine",
                            "class": "Expression"
                        },
                        "class": "sbg:MemRequirement"
                    }
                ],
                "label": "SnpEff",
                "arguments": [
                    {
                        "position": 5000,
                        "separate": true,
                        "valueFrom": {
                            "script": "{\t\n  filename = $job.inputs.variants_file.path\n  basename = filename.split('.').slice(0, filename.split('.').length-1).join('.').replace(/^.*[\\\\\\/]/, '')\n \n  \n  if($job.inputs.output_format === \"txt\")\n  {\n    name = basename.concat(\".snpEff_annotated.txt\")\n  }\n  else if ($job.inputs.output_format === \"bed\" || $job.inputs.output_format === \"bedAnn\")\n  {\n    name = basename.concat(\".snpEff_annotated.bed\")\n  }\n  else\n  {\n    name = basename.concat(\".snpEff_annotated.vcf\")\n  }\n  return '> ' + name\n}\n",
                            "engine": "#cwl-js-engine",
                            "class": "Expression"
                        }
                    },
                    {
                        "position": 0,
                        "separate": true,
                        "valueFrom": "-nodownload"
                    },
                    {
                        "position": 0,
                        "separate": true,
                        "valueFrom": "-noLog"
                    }
                ],
                "stdout": "",
                "baseCommand": [
                    {
                        "script": "{\n  return 'unzip -o ' + $job.inputs.database.path + ' -d /opt/snpEff ;'\n}",
                        "engine": "#cwl-js-engine",
                        "class": "Expression"
                    },
                    "java",
                    {
                        "script": "{\n  //java -Xmx4g path/to/snpEff/snpEff.jar -c path/to/snpEff/snpEff.config GRCh37.75 path/to/snps.vcf\n  if($job.inputs.total_memory){\n    mem_mb = parseInt($job.inputs.total_memory) * 1024\n  \treturn '-Xmx'.concat(mem_mb, 'M')\n  }\n  \treturn '-Xmx4096M'\n}\n\n",
                        "engine": "#cwl-js-engine",
                        "class": "Expression"
                    },
                    "-jar",
                    "/opt/snpEff/snpEff.jar"
                ],
                "temporaryFailCodes": [],
                "sbg:latestRevision": 23,
                "y": 269.4271676577653,
                "sbg:validationErrors": [],
                "sbg:modifiedBy": "vladimirk",
                "cwlVersion": "sbg:draft-2",
                "sbg:license": "GNU Lesser General Public License v3.0 only",
                "description": "SnpEff is a variant annotation and effect prediction\u200b tool. It annotates and predicts the effects of variants on genes, such as amino acid changes.\n\nTypical usage assumes the user chooses inputs that are predicted variants (SNPs, insertions, deletions, and MNPs). This input file is usually the result of a sequencing experiment, and it is usually in variant call format (VCF). SnpEff analyzes the input variants and, in the process, it annotates the variants and calculates the effects they produce on known genes (e.g. amino acid changes). The output file can be in several file formats. The most common format is VCF.\n\nThere is also a command line option to control the amount of RAM in MB [-Xmx%m] for java, which is a custom parameter.\nCommon issues:\n- Name of the snpEff file with database must contain the name that exactly relates to the reference that it is for (e.g. GRCh37.75.zip, hg19.zip).",
                "class": "CommandLineTool",
                "x": 3451.667128947061,
                "inputs": [
                    {
                        "sbg:category": "File type inputs",
                        "sbg:fileTypes": "VCF, TXT, PILEUP, BED",
                        "id": "#variants_file",
                        "inputBinding": {
                            "position": 2001,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Input variants file.",
                        "required": true,
                        "label": "Input variants file",
                        "type": [
                            "File"
                        ]
                    },
                    {
                        "sbg:category": "Database optins",
                        "sbg:stageInput": null,
                        "id": "#up_down_stream_len",
                        "inputBinding": {
                            "position": 490,
                            "prefix": "-upDownStreamLen",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Set upstream downstream interval length (in bases).",
                        "type": [
                            "null",
                            "int"
                        ],
                        "label": "Upstream downstream interval length"
                    },
                    {
                        "sbg:category": "Other input types",
                        "sbg:toolDefaultValue": "2048",
                        "id": "#total_memory",
                        "description": "RAM requirement for the java process execution [Gb].",
                        "type": [
                            "null",
                            "int"
                        ],
                        "label": "Java Xmx%m requirement [Gb]"
                    },
                    {
                        "sbg:category": "Other input types",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "id": "#threads",
                        "inputBinding": {
                            "position": 280,
                            "prefix": "-t",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Use multiple threads (implies '-noStats'). Default: False.",
                        "sbg:toolDefaultValue": "FALSE",
                        "label": "Use multiple threads (implies '-noStats')"
                    },
                    {
                        "sbg:category": "Database optins",
                        "sbg:stageInput": null,
                        "id": "#strict",
                        "inputBinding": {
                            "position": 480,
                            "prefix": "-strict",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Only use 'validated' transcripts (i.e. sequence has been checked). Default: false.",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "label": "Only use validated transcripts"
                    },
                    {
                        "sbg:category": "Other input types",
                        "sbg:altPrefix": "-s",
                        "id": "#stats",
                        "inputBinding": {
                            "position": 60,
                            "prefix": "-stats",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Name of stats file (summary).",
                        "sbg:toolDefaultValue": "snpEff_summary.html",
                        "label": "Name of stats file (summary)",
                        "type": [
                            "null",
                            "string"
                        ]
                    },
                    {
                        "sbg:category": "Other input types",
                        "sbg:altPrefix": "-ss",
                        "id": "#splicesitesize",
                        "inputBinding": {
                            "position": 430,
                            "prefix": "--spliceSiteSize",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Set size for splice sites (donor and acceptor) in bases.",
                        "sbg:toolDefaultValue": "2",
                        "label": "Set size for splice sites (donor and acceptor) in bases",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "Database options",
                        "type": [
                            "null",
                            "int"
                        ],
                        "id": "#splice_region_exons_size",
                        "inputBinding": {
                            "position": 440,
                            "prefix": "-spliceRegionExonSize",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Set size for splice site region within exons. Default: 3 bases.",
                        "sbg:toolDefaultValue": "3",
                        "label": "Set size for splice site region within exons"
                    },
                    {
                        "sbg:category": "Annotations options",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "id": "#sequenceontology",
                        "inputBinding": {
                            "position": 250,
                            "prefix": "-sequenceOntology",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Use Sequence Ontology terms. Default: false.",
                        "sbg:toolDefaultValue": "FALSE",
                        "label": "Use Sequence Ontology terms"
                    },
                    {
                        "sbg:category": "Other input types",
                        "type": [
                            "null",
                            {
                                "type": "array",
                                "name": "reg",
                                "items": {
                                    "type": "string"
                                }
                            }
                        ],
                        "id": "#reg",
                        "inputBinding": {
                            "position": 420,
                            "itemSeparator": null,
                            "prefix": "-reg",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Regulation track to use (this option can be used add several times).",
                        "label": "Regulation track to use (this option can be used add several times)"
                    },
                    {
                        "sbg:category": "Other input types",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "output_format",
                                "symbols": [
                                    "txt",
                                    "vcf",
                                    "gatk",
                                    "bed",
                                    "bedAnn"
                                ]
                            }
                        ],
                        "id": "#output_format",
                        "inputBinding": {
                            "position": 50,
                            "prefix": "-o",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Ouput format. Possible values: {txt, vcf, gatk, bed, bedAnn}.",
                        "sbg:toolDefaultValue": "vcf",
                        "label": "Ouput format"
                    },
                    {
                        "sbg:category": "Other input types",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "id": "#onlyreg",
                        "inputBinding": {
                            "position": 400,
                            "prefix": "--onlyReg",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Only use regulation tracks.",
                        "label": "Only use regulation tracks"
                    },
                    {
                        "sbg:category": "Database optins",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "id": "#only_protein",
                        "inputBinding": {
                            "position": 410,
                            "prefix": "-onlyProtein",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Only use protein coding transcripts. Default: false.",
                        "sbg:toolDefaultValue": "FALSE",
                        "label": "Only protein"
                    },
                    {
                        "sbg:category": "Annotations options",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "id": "#oicr",
                        "inputBinding": {
                            "position": 240,
                            "prefix": "-oicr",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Add OICR tag in VCF file. Default: false.",
                        "sbg:toolDefaultValue": "FALSE",
                        "label": "Add OICR tag in VCF file"
                    },
                    {
                        "sbg:category": "Other input types",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "id": "#nostats",
                        "inputBinding": {
                            "position": 70,
                            "prefix": "-noStats",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Do not create stats (summary) file.",
                        "label": "Do not create stats (summary) file"
                    },
                    {
                        "sbg:category": "Results filter options",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "id": "#no_utr",
                        "inputBinding": {
                            "position": 130,
                            "prefix": "-no-utr",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Do not show 5_PRIME_UTR or 3_PRIME_UTR changes.",
                        "label": "Do not show 5_PRIME_UTR or 3_PRIME_UTR changes"
                    },
                    {
                        "sbg:category": "Results filter options",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "id": "#no_upstream",
                        "inputBinding": {
                            "position": 120,
                            "prefix": "-no-upstream",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Do not show UPSTREAM changes.",
                        "label": "Do not show UPSTREAM changes"
                    },
                    {
                        "sbg:stageInput": null,
                        "sbg:category": "Annotations options",
                        "id": "#no_shift_hgvs",
                        "inputBinding": {
                            "position": 230,
                            "prefix": "-noShiftHgvs",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "sbg:toolDefaultValue": "False",
                        "description": "Do not shift variants according to HGVS notation (most 3prime end).",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "label": "Do not shift variants according to HGVS"
                    },
                    {
                        "sbg:category": "Database options",
                        "sbg:stageInput": null,
                        "id": "#no_next_prot",
                        "inputBinding": {
                            "position": 390,
                            "prefix": "-noNextProt",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Disable NextProt annotations.",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "label": "Disable NextProt annotations"
                    },
                    {
                        "sbg:category": "Database options",
                        "sbg:stageInput": null,
                        "id": "#no_motif",
                        "inputBinding": {
                            "position": 380,
                            "prefix": "-noMotif",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Disable motif annotations.",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "label": "Disable motif annotations"
                    },
                    {
                        "sbg:category": "Annotations options",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "id": "#no_lof",
                        "inputBinding": {
                            "position": 220,
                            "prefix": "-noLof",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Do not add LOF and NMD annotations.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Do not add LOF and NMD annotations"
                    },
                    {
                        "sbg:category": "Results filter options",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "id": "#no_intron",
                        "inputBinding": {
                            "position": 110,
                            "prefix": "-no-intron",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Do not show INTRON changes.",
                        "label": "Do not show INTRON changes"
                    },
                    {
                        "sbg:category": "Results filter options",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "id": "#no_intergenic",
                        "inputBinding": {
                            "position": 100,
                            "prefix": "-no-intergenic",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Do not show INTERGENIC changes.",
                        "label": "Do not show INTERGENIC changes"
                    },
                    {
                        "sbg:category": "Database options",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "id": "#no_interaction",
                        "inputBinding": {
                            "position": 370,
                            "prefix": "-noInteraction",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Disable interaction annotations. Default: false.",
                        "sbg:toolDefaultValue": "FALSE",
                        "label": "Disable interaction annotations"
                    },
                    {
                        "sbg:category": "Annotations options",
                        "sbg:stageInput": null,
                        "id": "#no_hgvs",
                        "inputBinding": {
                            "position": 210,
                            "prefix": "-noHgvs",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Do not add HGVS annotations.",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "label": "Do not add HGVS annotations"
                    },
                    {
                        "sbg:category": "Database options",
                        "sbg:stageInput": null,
                        "id": "#no_genome",
                        "inputBinding": {
                            "position": 360,
                            "prefix": "-noGenome",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Do not load any genomic database (e.g. annotate using custom files).",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "label": "Do not load any genomic database"
                    },
                    {
                        "sbg:category": "Results filter options",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "id": "#no_downstream",
                        "inputBinding": {
                            "position": 90,
                            "prefix": "-no-downstream",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Do not show DOWNSTREAM changes.",
                        "label": "Do not show DOWNSTREAM changes"
                    },
                    {
                        "sbg:category": "Other input types",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "id": "#nextprot",
                        "inputBinding": {
                            "position": 350,
                            "prefix": "-nextProt",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Annotate using NextProt (requires NextProt database).",
                        "label": "Annotate using NextProt (requires NextProt database)"
                    },
                    {
                        "sbg:category": "Other input types",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "id": "#motif",
                        "inputBinding": {
                            "position": 340,
                            "prefix": "--motif",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Annotate using motifs (requires Motif database).",
                        "label": "Annotate using motifs (requires Motif database)"
                    },
                    {
                        "sbg:category": "Database options",
                        "sbg:stageInput": null,
                        "id": "#max_tsl",
                        "inputBinding": {
                            "position": 330,
                            "prefix": "-maxTSL",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Only use transcripts having Transcript Support Level lower than <TSL_number>.",
                        "type": [
                            "null",
                            "int"
                        ],
                        "label": "Max TSL"
                    },
                    {
                        "sbg:category": "Other input types",
                        "sbg:fileTypes": "interval",
                        "id": "#interval",
                        "inputBinding": {
                            "position": 320,
                            "prefix": "-interval",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Use a custom intervals in TXT/BED/BigBed/VCF/GFF file (you may use this option many times).",
                        "required": false,
                        "sbg:stageInput": "link",
                        "label": "Use a custom intervals in TXT/BED/BigBed/VCF/GFF file (you may use this option many times)",
                        "type": [
                            "null",
                            "File"
                        ]
                    },
                    {
                        "sbg:category": "Database options",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "id": "#interaction",
                        "inputBinding": {
                            "position": 310,
                            "prefix": "-interaction",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Annotate using inteactions (requires interaciton database). Default: true.",
                        "sbg:toolDefaultValue": "TRUE",
                        "label": "Annotate using interactions"
                    },
                    {
                        "sbg:category": "Other input types",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "input_format",
                                "symbols": [
                                    "vcf",
                                    " txt",
                                    " pileup",
                                    " bed"
                                ]
                            }
                        ],
                        "id": "#input_format",
                        "inputBinding": {
                            "position": 40,
                            "prefix": "-i",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Input format. Possible values: {vcf, txt, pileup, bed}. [Default: vcf].",
                        "sbg:toolDefaultValue": "vcf",
                        "label": "Input format"
                    },
                    {
                        "sbg:category": "Configuration",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "id": "#hgvs_tr_id",
                        "inputBinding": {
                            "position": 190,
                            "prefix": "-hgvsTrId",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Use transcript ID in HGVS notation. Default: false.",
                        "label": "Use transcript ID in HGVS"
                    },
                    {
                        "sbg:category": "Annotations options",
                        "sbg:stageInput": null,
                        "id": "#hgvs_1_letter",
                        "inputBinding": {
                            "position": 180,
                            "prefix": "-hgvs1LetterAa",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Use one letter Amino acid codes in HGVS notation. Default: false.",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "label": "Use one letter Amino acid codes in HGVS"
                    },
                    {
                        "sbg:category": "Annotations options",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "id": "#geneid",
                        "inputBinding": {
                            "position": 170,
                            "prefix": "-geneId",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Use gene ID instead of gene name (VCF output). Default: false.",
                        "sbg:toolDefaultValue": "FALSE",
                        "label": "Use gene ID instead of gene name (VCF output)"
                    },
                    {
                        "sbg:category": "Annotations options",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "id": "#format_eff",
                        "inputBinding": {
                            "position": 160,
                            "prefix": "-formatEff",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Use 'EFF' field compatible with older versions (instead of 'ANN').",
                        "label": "Use EFF field"
                    },
                    {
                        "sbg:category": "Results filter options",
                        "sbg:fileTypes": "interval",
                        "id": "#filterinterval",
                        "inputBinding": {
                            "position": 80,
                            "prefix": "--filterInterval",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Only analyze changes that intersect with the intervals specified in this file.",
                        "sbg:altPrefix": "-fi",
                        "required": false,
                        "label": "Only analyze changes that intersect with the intervals specified in this file (you may use this option many times)",
                        "type": [
                            "null",
                            {
                                "type": "array",
                                "name": "filterinterval",
                                "items": "File"
                            }
                        ]
                    },
                    {
                        "sbg:category": "File type inputs",
                        "sbg:fileTypes": "ZIP",
                        "id": "#database",
                        "inputBinding": {
                            "position": 2000,
                            "sbg:cmdInclude": true,
                            "separate": true,
                            "valueFrom": {
                                "script": "{\n  input_database = $job.inputs.database\n  full_name = input_database.path.split('/')[input_database.path.split('/').length-1] \n  name = full_name.slice(0, -4) // Cut .zip extension\n  return name\n}",
                                "engine": "#cwl-js-engine",
                                "class": "Expression"
                            }
                        },
                        "description": "SnpEff database file is zip archive that can be downloaded from the SnpEff official site, or using the SnpEff download app.",
                        "required": true,
                        "label": "SnpEff database file",
                        "type": [
                            "File"
                        ]
                    },
                    {
                        "sbg:category": "Other input types",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "id": "#csvstats",
                        "inputBinding": {
                            "position": 20,
                            "prefix": "-csvStats",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Create CSV summary file instead of HTML.",
                        "label": "Create CSV summary file instead of HTML"
                    },
                    {
                        "sbg:category": "Generic options",
                        "sbg:fileTypes": "config",
                        "id": "#configuration_file",
                        "inputBinding": {
                            "position": 260,
                            "prefix": "-c",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Specify config file.",
                        "required": false,
                        "sbg:stageInput": "link",
                        "label": "Configuration file",
                        "type": [
                            "null",
                            "File"
                        ]
                    },
                    {
                        "sbg:category": "General options",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "id": "#classic",
                        "inputBinding": {
                            "position": 10,
                            "prefix": "--classic",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Use old style annotations instead of Sequence Ontology and Hgvs.",
                        "label": "Use old style annotations"
                    },
                    {
                        "sbg:category": "Database options",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "id": "#canon",
                        "inputBinding": {
                            "position": 300,
                            "prefix": "-canon",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Only use canonical transcripts.",
                        "label": "Only use canonical transcripts"
                    },
                    {
                        "sbg:category": "Annotations options",
                        "sbg:fileTypes": "TXT",
                        "id": "#cancersamples",
                        "inputBinding": {
                            "position": 150,
                            "prefix": "-cancerSamples",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Two column TXT file defining 'original \\t derived' samples.",
                        "required": false,
                        "label": "Two column TXT file defining 'original and derived' samples",
                        "type": [
                            "null",
                            "File"
                        ]
                    },
                    {
                        "sbg:category": "Annotations options",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "id": "#cancer",
                        "inputBinding": {
                            "position": 140,
                            "prefix": "-cancer",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Perform 'cancer' comparisons (Somatic vs Germline).",
                        "sbg:toolDefaultValue": "FALSE",
                        "label": "Perform 'cancer' comparisons (Somatic vs Germline)"
                    },
                    {
                        "sbg:category": "Other input types",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "id": "#add_lof_tag",
                        "inputBinding": {
                            "position": 200,
                            "prefix": "-lof",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Add loss of function (LOF) and Nonsense mediated decay (NMD) tags.",
                        "label": "Add loss of function (LOF) and Nonsense mediated decay (NMD) tags"
                    },
                    {
                        "sbg:category": "Annotations options",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "id": "#add_hgvs_anno",
                        "inputBinding": {
                            "position": 170,
                            "prefix": "--hgvs",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Use HGVS annotations for amino acid sub-field. Default: true.",
                        "sbg:toolDefaultValue": "TRUE",
                        "label": "Use HGVS annotations for amino acid sub-field"
                    }
                ],
                "sbg:job": {
                    "allocatedResources": {
                        "mem": 3072,
                        "cpu": 1
                    },
                    "inputs": {
                        "no_hgvs": false,
                        "no_interaction": false,
                        "no_shift_hgvs": false,
                        "hgvs_tr_id": false,
                        "threads": true,
                        "up_down_stream_len": null,
                        "stats": "",
                        "total_memory": 3,
                        "format_eff": false,
                        "no_genome": false,
                        "strict": false,
                        "database": {
                            "metadata": {},
                            "path": "/path/to/database/GRCh37.75.zip",
                            "secondaryFiles": []
                        },
                        "hgvs_1_letter": false,
                        "variants_file": {
                            "size": 0,
                            "class": "File",
                            "secondaryFiles": [],
                            "path": "path/to/variance/varinats_file.vcf"
                        },
                        "no_next_prot": false,
                        "oicr": false,
                        "configuration_file": {
                            "size": 0,
                            "class": "File",
                            "secondaryFiles": [],
                            "path": null
                        },
                        "no_motif": false,
                        "no_lof": false,
                        "input_format": "vcf",
                        "only_protein": false,
                        "nostats": false,
                        "classic": false,
                        "output_format": "vcf",
                        "splice_region_exons_size": null,
                        "interaction": false,
                        "interval": {
                            "size": 0,
                            "class": "File",
                            "secondaryFiles": [],
                            "path": "/path/to/interval.ext"
                        },
                        "csvstats": false,
                        "max_tsl": null
                    }
                },
                "sbg:createdBy": "vladimirk",
                "sbg:revisionsInfo": [
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1459258963,
                        "sbg:revision": 0,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1459268644,
                        "sbg:revision": 1,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1459334075,
                        "sbg:revision": 2,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1459344734,
                        "sbg:revision": 3,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1459346778,
                        "sbg:revision": 4,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1459349594,
                        "sbg:revision": 5,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1459350669,
                        "sbg:revision": 6,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1459352131,
                        "sbg:revision": 7,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1459353590,
                        "sbg:revision": 8,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1460986857,
                        "sbg:revision": 9,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1460989537,
                        "sbg:revision": 10,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1460994055,
                        "sbg:revision": 11,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1461079628,
                        "sbg:revision": 12,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1461145387,
                        "sbg:revision": 13,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1461146419,
                        "sbg:revision": 14,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1461857375,
                        "sbg:revision": 15,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1461857546,
                        "sbg:revision": 16,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1464273953,
                        "sbg:revision": 17,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1464279085,
                        "sbg:revision": 18,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1464625627,
                        "sbg:revision": 19,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": "typos",
                        "sbg:modifiedOn": 1471007312,
                        "sbg:revision": 20,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": "Peer-review comments implemented.",
                        "sbg:modifiedOn": 1472209344,
                        "sbg:revision": 21,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": "Peer-review comments and typos implemented.",
                        "sbg:modifiedOn": 1472209772,
                        "sbg:revision": 22,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": "typos",
                        "sbg:modifiedOn": 1472212308,
                        "sbg:revision": 23,
                        "sbg:modifiedBy": "vladimirk"
                    }
                ],
                "sbg:toolAuthor": "Pablo Cingolani/Broad Institue",
                "sbg:contributors": [
                    "vladimirk"
                ],
                "outputs": [
                    {
                        "sbg:fileTypes": "TXT",
                        "id": "#summary_text",
                        "outputBinding": {
                            "glob": "*.txt",
                            "sbg:inheritMetadataFrom": "#variants_file"
                        },
                        "description": "SnpEff Summary in text format.",
                        "type": [
                            "null",
                            "File"
                        ],
                        "label": "Summary"
                    },
                    {
                        "sbg:fileTypes": "HTML, CSV",
                        "id": "#summary",
                        "outputBinding": {
                            "glob": "*.html",
                            "sbg:inheritMetadataFrom": "#variants_file"
                        },
                        "description": "SnpEff summary file in HTML or CSV file format.",
                        "type": [
                            "null",
                            "File"
                        ],
                        "label": "Summary file"
                    },
                    {
                        "sbg:fileTypes": "VCF, TXT, GATK, BED, BEDANN",
                        "id": "#annotated",
                        "outputBinding": {
                            "glob": {
                                "script": "{\t\n  filename = $job.inputs.variants_file.path\n  basename = filename.split('.').slice(0, filename.split('.').length-1).join('.').replace(/^.*[\\\\\\/]/, '')\n \n  \n  if($job.inputs.output_format === \"txt\")\n  {\n    return basename.concat(\".snpEff_annotated.txt\")\n  }\n  else if ($job.inputs.output_format === \"bed\" || $job.inputs.output_format === \"bedAnn\")\n  {\n    return basename.concat(\".snpEff_annotated.bed\")\n  }\n  else\n  {\n    return basename.concat(\".snpEff_annotated.vcf\")\n  }\n}",
                                "engine": "#cwl-js-engine",
                                "class": "Expression"
                            },
                            "sbg:metadata": {},
                            "sbg:inheritMetadataFrom": "#variants_file"
                        },
                        "description": "SnpEff Annotated file.",
                        "type": [
                            "null",
                            "File"
                        ],
                        "label": "SnpEff Annotated file"
                    }
                ],
                "sbg:toolkit": "SnpEff"
            },
            "outputs": [
                {
                    "id": "#SnpEff.summary_text"
                },
                {
                    "id": "#SnpEff.summary"
                },
                {
                    "id": "#SnpEff.annotated"
                }
            ],
            "inputs": [
                {
                    "id": "#SnpEff.variants_file",
                    "source": [
                        "#GATK_ApplyRecalibration_1.vcf"
                    ]
                },
                {
                    "id": "#SnpEff.up_down_stream_len"
                },
                {
                    "id": "#SnpEff.total_memory",
                    "default": 10
                },
                {
                    "id": "#SnpEff.threads",
                    "default": true
                },
                {
                    "id": "#SnpEff.strict"
                },
                {
                    "id": "#SnpEff.stats"
                },
                {
                    "id": "#SnpEff.splicesitesize"
                },
                {
                    "id": "#SnpEff.splice_region_exons_size"
                },
                {
                    "id": "#SnpEff.sequenceontology"
                },
                {
                    "id": "#SnpEff.reg"
                },
                {
                    "id": "#SnpEff.output_format",
                    "default": "vcf"
                },
                {
                    "id": "#SnpEff.onlyreg"
                },
                {
                    "id": "#SnpEff.only_protein"
                },
                {
                    "id": "#SnpEff.oicr"
                },
                {
                    "id": "#SnpEff.nostats"
                },
                {
                    "id": "#SnpEff.no_utr"
                },
                {
                    "id": "#SnpEff.no_upstream"
                },
                {
                    "id": "#SnpEff.no_shift_hgvs"
                },
                {
                    "id": "#SnpEff.no_next_prot"
                },
                {
                    "id": "#SnpEff.no_motif"
                },
                {
                    "id": "#SnpEff.no_lof"
                },
                {
                    "id": "#SnpEff.no_intron"
                },
                {
                    "id": "#SnpEff.no_intergenic"
                },
                {
                    "id": "#SnpEff.no_interaction"
                },
                {
                    "id": "#SnpEff.no_hgvs"
                },
                {
                    "id": "#SnpEff.no_genome"
                },
                {
                    "id": "#SnpEff.no_downstream"
                },
                {
                    "id": "#SnpEff.nextprot"
                },
                {
                    "id": "#SnpEff.motif"
                },
                {
                    "id": "#SnpEff.max_tsl"
                },
                {
                    "id": "#SnpEff.interval"
                },
                {
                    "id": "#SnpEff.interaction"
                },
                {
                    "id": "#SnpEff.input_format"
                },
                {
                    "id": "#SnpEff.hgvs_tr_id"
                },
                {
                    "id": "#SnpEff.hgvs_1_letter"
                },
                {
                    "id": "#SnpEff.geneid"
                },
                {
                    "id": "#SnpEff.format_eff"
                },
                {
                    "id": "#SnpEff.filterinterval"
                },
                {
                    "id": "#SnpEff.database",
                    "source": [
                        "#database_1"
                    ]
                },
                {
                    "id": "#SnpEff.csvstats"
                },
                {
                    "id": "#SnpEff.configuration_file"
                },
                {
                    "id": "#SnpEff.classic"
                },
                {
                    "id": "#SnpEff.canon"
                },
                {
                    "id": "#SnpEff.cancersamples"
                },
                {
                    "id": "#SnpEff.cancer"
                },
                {
                    "id": "#SnpEff.add_lof_tag"
                },
                {
                    "id": "#SnpEff.add_hgvs_anno"
                }
            ],
            "sbg:x": 3451.667128947061
        },
        {
            "id": "#Sambamba_View",
            "scatter": "#Sambamba_View.input",
            "sbg:y": -346.66673050986617,
            "run": {
                "sbg:modifiedOn": 1476709202,
                "sbg:id": "bix-demo/sambamba-0-5-9-demo/sambamba-view-0-5-9/9",
                "sbg:toolkitVersion": "0.5.9",
                "sbg:cmdPreview": "/opt/sambamba_0.5.9/sambamba_v0.5.9 view --format=bam  /root/dir/example.bam -o example.filtered.bam",
                "sbg:revision": 9,
                "requirements": [
                    {
                        "requirements": [
                            {
                                "class": "DockerRequirement",
                                "dockerPull": "rabix/js-engine"
                            }
                        ],
                        "class": "ExpressionEngineRequirement",
                        "id": "#cwl-js-engine"
                    }
                ],
                "successCodes": [],
                "sbg:sbgMaintained": false,
                "sbg:categories": [
                    "SAM/BAM-Processing"
                ],
                "sbg:project": "bix-demo/sambamba-0-5-9-demo",
                "sbg:image_url": null,
                "stdin": "",
                "id": "bix-demo/sambamba-0-5-9-demo/sambamba-view-0-5-9/9",
                "sbg:links": [
                    {
                        "label": "Homepage",
                        "id": "http://lomereiter.github.io/sambamba/docs/sambamba-view.html"
                    },
                    {
                        "label": "Source code",
                        "id": "https://github.com/lomereiter/sambamba"
                    },
                    {
                        "label": "Wiki",
                        "id": "https://github.com/lomereiter/sambamba/wiki"
                    },
                    {
                        "label": "Download",
                        "id": "https://github.com/lomereiter/sambamba/releases/tag/v0.5.9"
                    },
                    {
                        "label": "Publication",
                        "id": "http://lomereiter.github.io/sambamba/docs/sambamba-view.html"
                    }
                ],
                "sbg:createdOn": 1450911559,
                "sbg:revisionNotes": "Added reserved number of threads.",
                "hints": [
                    {
                        "dockerImageId": "59e577b13d5d",
                        "class": "DockerRequirement",
                        "dockerPull": "images.sbgenomics.com/mladenlsbg/sambamba:0.5.9"
                    },
                    {
                        "value": {
                            "script": "{\n  if ($job.inputs.reserved_threads) {\n    \n    return $job.inputs.reserved_threads\n    \n  } else if ($job.inputs.nthreads) {\n    \n    return $job.inputs.nthreads\n    \n  } else {\n    \n    return 1\n  }\n  \n}",
                            "engine": "#cwl-js-engine",
                            "class": "Expression"
                        },
                        "class": "sbg:CPURequirement"
                    },
                    {
                        "value": {
                            "script": "{\n  if ($job.inputs.mem_mb) {\n    \n    return $job.inputs.mem_mb\n    \n  } else {\n    \n    return 1024\n    \n  }\n  \n}",
                            "engine": "#cwl-js-engine",
                            "class": "Expression"
                        },
                        "class": "sbg:MemRequirement"
                    }
                ],
                "label": "Sambamba View",
                "arguments": [
                    {
                        "position": 3,
                        "prefix": "-o",
                        "separate": true,
                        "valueFrom": {
                            "script": "{\n  fnameRegex = /^(.*?)(?:\\.([^.]+))?$/;\n  if ($job.inputs.input) \n  {\n  \tfile_path = $job.inputs.input.path;\n  \tbase_name = fnameRegex.exec(file_path)[1];\n  \tfile_name = base_name.replace(/^.*[\\\\\\/]/, '');\n  \n  if ($job.inputs.output == 'sam'){\n  \treturn file_name + '.filtered.sam'\n  }\n  else if ($job.inputs.output == 'bam'){\n  \treturn file_name.concat('.filtered.bam')\n  }\n  else if ($job.inputs.output == 'json'){\n  \treturn file_name.concat('.filtered.json')\n  }\n  else if ($job.inputs.output == 'msgpack'){\n  \treturn file_name.concat('.filtered.msgpack')\n  }\n  else\t{\n  \treturn file_name + '.filtered.sam'\n  }\n  }\n}",
                            "engine": "#cwl-js-engine",
                            "class": "Expression"
                        }
                    }
                ],
                "stdout": "",
                "baseCommand": [
                    "/opt/sambamba_0.5.9/sambamba_v0.5.9",
                    "view"
                ],
                "temporaryFailCodes": [],
                "sbg:latestRevision": 9,
                "y": -346.66673050986617,
                "sbg:validationErrors": [],
                "sbg:modifiedBy": "vladimirk",
                "cwlVersion": "sbg:draft-2",
                "sbg:license": "GNU General Public License v2.0 only",
                "description": "Sambamba View efficiently filters a BAM file for alignments satisfying various conditions. It also accesses its SAM header and information about reference sequences. A JSON output is provided to make this data readily available for use with Perl, Python, and Ruby scripts.\n\nBy default, the tool expects a BAM file as an input. In order to work with a SAM file as an input, specify --sam-input command-line option. The tool does NOT automatically detect file format from its extension. Beware that when reading SAM, the tool will skip tags which don't conform to the SAM/BAM specification and set invalid fields to their default values. However, only syntax is checked, use --valid for full validation.",
                "class": "CommandLineTool",
                "x": 1760.0002332263598,
                "inputs": [
                    {
                        "sbg:category": "Execution",
                        "sbg:altPrefix": "h",
                        "id": "#with_header",
                        "inputBinding": {
                            "prefix": "--with-header",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Print header before reads (always done for BAM output).",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "label": "With header"
                    },
                    {
                        "sbg:category": "Execution",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "label": "Valid",
                        "id": "#valid",
                        "description": "Output only valid reads."
                    },
                    {
                        "sbg:category": "Execution",
                        "type": [
                            "null",
                            "int"
                        ],
                        "id": "#subsampling_seed",
                        "inputBinding": {
                            "prefix": "--subsampling-seed",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Set seed for subsampling.",
                        "label": "Subsampling seed"
                    },
                    {
                        "sbg:category": "Execution",
                        "sbg:altPrefix": "s",
                        "id": "#subsample",
                        "inputBinding": {
                            "prefix": "--subsample=",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Subsample reads (read pairs).",
                        "sbg:stageInput": null,
                        "label": "Subsample",
                        "type": [
                            "null",
                            "float"
                        ]
                    },
                    {
                        "sbg:category": "Execution",
                        "sbg:altPrefix": "S",
                        "id": "#sam_input",
                        "inputBinding": {
                            "prefix": "--sam-input",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Specify that input is in SAM format.",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "label": "SAM input"
                    },
                    {
                        "sbg:category": "Execution",
                        "type": [
                            "null",
                            "int"
                        ],
                        "id": "#reserved_threads",
                        "description": "Number of threads reserved on the instance passed to the scheduler (number of jobs).",
                        "sbg:toolDefaultValue": "1",
                        "sbg:stageInput": null,
                        "label": "Number of threads reserved on the instance"
                    },
                    {
                        "sbg:category": "File input.",
                        "sbg:fileTypes": "BED",
                        "id": "#regions",
                        "inputBinding": {
                            "prefix": "--regions=",
                            "sbg:cmdInclude": true,
                            "separate": false
                        },
                        "description": "Output only reads overlapping one of regions from the BED file.",
                        "sbg:altPrefix": "L",
                        "required": false,
                        "label": "Regions",
                        "type": [
                            "null",
                            "File"
                        ]
                    },
                    {
                        "sbg:category": "Execution",
                        "sbg:fileTypes": "FASTA,FA",
                        "id": "#ref_filename",
                        "inputBinding": {
                            "prefix": "--ref-filename=",
                            "sbg:cmdInclude": true,
                            "separate": false
                        },
                        "description": "Specify reference for writing CRAM.",
                        "sbg:altPrefix": "T",
                        "required": false,
                        "label": "Reference",
                        "type": [
                            "null",
                            "File"
                        ]
                    },
                    {
                        "sbg:category": "Execution",
                        "sbg:altPrefix": "-f",
                        "id": "#output",
                        "inputBinding": {
                            "position": 1,
                            "prefix": "--format=",
                            "sbg:cmdInclude": true,
                            "separate": false
                        },
                        "description": "Specify which format to use for output (default is SAM).",
                        "type": [
                            {
                                "type": "enum",
                                "name": "output",
                                "symbols": [
                                    "sam",
                                    "bam",
                                    "cram",
                                    "json"
                                ]
                            }
                        ],
                        "label": "Output format"
                    },
                    {
                        "sbg:category": "Execution",
                        "sbg:altPrefix": "-t",
                        "id": "#nthreads",
                        "inputBinding": {
                            "prefix": "--nthreads=",
                            "sbg:cmdInclude": true,
                            "separate": false,
                            "valueFrom": {
                                "script": "{\n  if ($job.inputs.nthreads)\n    return $job.inputs.nthreads\n  else\n    return 8\n}",
                                "engine": "#cwl-js-engine",
                                "class": "Expression"
                            }
                        },
                        "description": "Number of threads to use.",
                        "sbg:toolDefaultValue": "8",
                        "label": "Number of threads",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "Execution",
                        "type": [
                            "null",
                            "int"
                        ],
                        "id": "#mem_mb",
                        "description": "Memory in MB.",
                        "sbg:toolDefaultValue": "1024",
                        "sbg:stageInput": null,
                        "label": "Memory in MB"
                    },
                    {
                        "sbg:category": "Inputs",
                        "sbg:fileTypes": "BAM, SAM",
                        "id": "#input",
                        "inputBinding": {
                            "position": 2,
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "BAM or SAM file.",
                        "required": true,
                        "label": "Input",
                        "type": [
                            "File"
                        ]
                    },
                    {
                        "sbg:category": "Basic Options",
                        "sbg:altPrefix": "-F",
                        "id": "#filter",
                        "inputBinding": {
                            "itemSeparator": " ",
                            "prefix": "--filter",
                            "sbg:cmdInclude": true,
                            "separate": true,
                            "valueFrom": {
                                "script": "{\n  if ($job.inputs.filter)\n  {\n  \treturn '\"'.concat($job.inputs.filter, '\"')\n  }\n}",
                                "engine": "#cwl-js-engine",
                                "class": "Expression"
                            }
                        },
                        "description": "Set custom filter for alignments.",
                        "type": [
                            "null",
                            "string"
                        ],
                        "label": "Filter"
                    },
                    {
                        "sbg:category": "Execution",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "id": "#cram_input",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--cram-input",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Specify that input is in CRAM format.",
                        "label": "CRAM input"
                    },
                    {
                        "sbg:category": "Execution",
                        "sbg:altPrefix": "c",
                        "id": "#count",
                        "inputBinding": {
                            "prefix": "--count",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Output to stdout only count of matching records, hHI are ignored.",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "label": "Count"
                    },
                    {
                        "sbg:category": "Execution",
                        "sbg:altPrefix": "l",
                        "id": "#compression_level",
                        "inputBinding": {
                            "prefix": "--compression-level",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Specify compression level (from 0 to 9, works only for BAM output).",
                        "type": [
                            "null",
                            "int"
                        ],
                        "label": "Compression level"
                    }
                ],
                "sbg:job": {
                    "allocatedResources": {
                        "mem": 7,
                        "cpu": 1
                    },
                    "inputs": {
                        "input": {
                            "path": "/root/dir/example.bam"
                        },
                        "nthreads": null,
                        "mem_mb": 7,
                        "output": "bam",
                        "subsample": 9.236016917973757,
                        "reserved_threads": 8,
                        "filter": "unmapped"
                    }
                },
                "sbg:createdBy": "bix-demo",
                "sbg:revisionsInfo": [
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1450911559,
                        "sbg:revision": 0,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1450911560,
                        "sbg:revision": 1,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1450911561,
                        "sbg:revision": 2,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1450911561,
                        "sbg:revision": 3,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1470050578,
                        "sbg:revision": 4,
                        "sbg:modifiedBy": "ognjenm"
                    },
                    {
                        "sbg:revisionNotes": "Added reference file type",
                        "sbg:modifiedOn": 1470050707,
                        "sbg:revision": 5,
                        "sbg:modifiedBy": "ognjenm"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1470050762,
                        "sbg:revision": 6,
                        "sbg:modifiedBy": "ognjenm"
                    },
                    {
                        "sbg:revisionNotes": "\"subsample\" type set to float.",
                        "sbg:modifiedOn": 1472475927,
                        "sbg:revision": 7,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": "Added resource parameters",
                        "sbg:modifiedOn": 1475064551,
                        "sbg:revision": 8,
                        "sbg:modifiedBy": "ognjenm"
                    },
                    {
                        "sbg:revisionNotes": "Added reserved number of threads.",
                        "sbg:modifiedOn": 1476709202,
                        "sbg:revision": 9,
                        "sbg:modifiedBy": "vladimirk"
                    }
                ],
                "sbg:toolAuthor": "Artem Tarasov",
                "sbg:contributors": [
                    "vladimirk",
                    "bix-demo",
                    "ognjenm"
                ],
                "outputs": [
                    {
                        "sbg:fileTypes": "BAM, SAM, JSON, MSGPACK",
                        "id": "#filtered",
                        "outputBinding": {
                            "glob": {
                                "script": "{\n  fnameRegex = /^(.*?)(?:\\.([^.]+))?$/;\n  file_path = $job.inputs.input.path;\n  base_name = fnameRegex.exec(file_path)[1];\n  file_name = base_name.replace(/^.*[\\\\\\/]/, '');\n  \n  if ($job.inputs.output == 'sam'){\n  \treturn file_name + '.filtered.sam'\n  }\n  else if ($job.inputs.output == 'bam'){\n  \treturn file_name.concat('.filtered.bam')\n  }\n  else if ($job.inputs.output == 'json'){\n  \treturn file_name.concat('.filtered.json')\n  }\n  else if ($job.inputs.output == 'msgpack'){\n  \treturn file_name.concat('.filtered.msgpack')\n  }\n  else\t{\n  \treturn file_name + '.filtered.sam'\n  }\n}",
                                "engine": "#cwl-js-engine",
                                "class": "Expression"
                            },
                            "sbg:metadata": {},
                            "sbg:inheritMetadataFrom": "#input"
                        },
                        "description": "Bam file.",
                        "type": [
                            "null",
                            "File"
                        ],
                        "label": "BAM file"
                    }
                ],
                "sbg:toolkit": "Sambamba"
            },
            "outputs": [
                {
                    "id": "#Sambamba_View.filtered"
                }
            ],
            "inputs": [
                {
                    "id": "#Sambamba_View.with_header"
                },
                {
                    "id": "#Sambamba_View.valid"
                },
                {
                    "id": "#Sambamba_View.subsampling_seed"
                },
                {
                    "id": "#Sambamba_View.subsample"
                },
                {
                    "id": "#Sambamba_View.sam_input"
                },
                {
                    "id": "#Sambamba_View.reserved_threads"
                },
                {
                    "id": "#Sambamba_View.regions"
                },
                {
                    "id": "#Sambamba_View.ref_filename"
                },
                {
                    "id": "#Sambamba_View.output",
                    "default": "bam"
                },
                {
                    "id": "#Sambamba_View.nthreads",
                    "default": 7
                },
                {
                    "id": "#Sambamba_View.mem_mb"
                },
                {
                    "id": "#Sambamba_View.input",
                    "source": [
                        "#BWA_MEM_Bundle_0_7_13.aligned_reads"
                    ]
                },
                {
                    "id": "#Sambamba_View.filter",
                    "default": "unmapped and mate_is_unmapped"
                },
                {
                    "id": "#Sambamba_View.cram_input"
                },
                {
                    "id": "#Sambamba_View.count"
                },
                {
                    "id": "#Sambamba_View.compression_level"
                }
            ],
            "sbg:x": 1760.0002332263598
        },
        {
            "id": "#Sambamba_Merge",
            "sbg:y": -445.5729166666669,
            "run": {
                "sbg:modifiedOn": 1476706820,
                "sbg:id": "bix-demo/sambamba-0-5-9-demo/sambamba-merge-0-5-9/18",
                "sbg:toolkitVersion": "0.5.9",
                "sbg:cmdPreview": "/opt/sambamba_0.5.9/sambamba_v0.5.9 merge  -t 6  /path/to/uuu_bams.bam  /path/to/uyyy_bams.bam  testmeta__bams.merged.bam",
                "sbg:revision": 18,
                "requirements": [
                    {
                        "requirements": [
                            {
                                "class": "DockerRequirement",
                                "dockerPull": "rabix/js-engine"
                            }
                        ],
                        "class": "ExpressionEngineRequirement",
                        "id": "#cwl-js-engine"
                    }
                ],
                "successCodes": [],
                "sbg:sbgMaintained": false,
                "sbg:categories": [
                    "SAM/BAM-Processing"
                ],
                "sbg:project": "bix-demo/sambamba-0-5-9-demo",
                "sbg:image_url": null,
                "stdin": "",
                "id": "bix-demo/sambamba-0-5-9-demo/sambamba-merge-0-5-9/18",
                "sbg:links": [
                    {
                        "label": "Homepage",
                        "id": "http://lomereiter.github.io/sambamba/docs/sambamba-view.html"
                    },
                    {
                        "label": "Source code",
                        "id": "https://github.com/lomereiter/sambamba"
                    },
                    {
                        "label": "Wiki",
                        "id": "https://github.com/lomereiter/sambamba/wiki"
                    },
                    {
                        "label": "Download",
                        "id": "https://github.com/lomereiter/sambamba/releases/tag/v0.5.9"
                    },
                    {
                        "label": "Publication",
                        "id": "http://lomereiter.github.io/sambamba/docs/sambamba-view.html"
                    }
                ],
                "sbg:createdOn": 1458920412,
                "sbg:revisionNotes": "Added reserved number of threads.",
                "hints": [
                    {
                        "value": {
                            "script": "{\n  if ($job.inputs.reserved_threads) {\n    \n    return $job.inputs.reserved_threads\n    \n  } else if ($job.inputs.num_of_threads) {\n    \n    return $job.inputs.num_of_threads\n    \n  } else {\n    \n    return 1\n  }\n  \n}",
                            "engine": "#cwl-js-engine",
                            "class": "Expression"
                        },
                        "class": "sbg:CPURequirement"
                    },
                    {
                        "value": {
                            "script": "{\n  if ($job.inputs.mem_mb) {\n    \n    return $job.inputs.mem_mb\n    \n  } else {\n    \n    return 1024\n    \n  }\n  \n}",
                            "engine": "#cwl-js-engine",
                            "class": "Expression"
                        },
                        "class": "sbg:MemRequirement"
                    },
                    {
                        "dockerImageId": "",
                        "class": "DockerRequirement",
                        "dockerPull": "images.sbgenomics.com/mladenlsbg/sambamba:0.5.9"
                    }
                ],
                "label": "Sambamba Merge",
                "arguments": [
                    {
                        "position": 10,
                        "separate": true,
                        "valueFrom": {
                            "script": "{\n  if ($job.inputs.bams instanceof Array) { // VK\n    if ($job.inputs.bams[0] instanceof Array) {\n      \n      // Support for input received as list of one-element-lists \n      in_var = []\n      for (i=0;i<$job.inputs.bams.length;i++) \n  \t\tin_var = in_var.concat($job.inputs.bams[i]);\n      \n    } else {\n      in_var = [].concat($job.inputs.bams)\n    }\n  \n  \n  } else {\n    in_var = [].concat($job.inputs.bams)\n  }\n  \n  comm=''\n  if(in_var.length==1)\n  {\n  \tcomm+='. '\n  \n  \tif(in_var[0].secondaryFiles!=undefined && in_var[0].secondaryFiles.length>0)\n  \t{\n    \t comm+='| cp '\n    \t comm+=in_var[0].secondaryFiles[0].path\n    \t comm+=' . '\n  \t}\n  }\n  return comm\n}",
                            "engine": "#cwl-js-engine",
                            "class": "Expression"
                        }
                    },
                    {
                        "position": 5,
                        "separate": true,
                        "valueFrom": {
                            "script": "{\n\n  function common_end(strs) {\n  \n  \t// Find minimum length of file name\n  \n  \tls = [];\n    whole = [];\n\tfor (i=0;i<strs.length;i++){\n  \t\tls = ls.concat(strs[i].path.split('/').pop().length);\n        whole = whole.concat(strs[i].path.length);\n  \t}\n \tl = Math.min.apply(Math,ls);\n  \n  \t// Loop from the end through characters and check if they are the same for all\n  \n \tind = 0;\n \tflag = 0;\n \tfor (i=1;i<=l;i++){\n    \tfor (j=1;j<strs.length;j++){\n      \t\tif (strs[0].path[whole[0]-i]!=strs[j].path[whole[j]-i]){\n        \tflag = 1;\n        \tbreak\n      \t\t}\n   \t\t}\n   \t \tif (flag == 1){\n   \t \t  \tbreak\n   \t    } else {\n      \t\tind = ind + 1;\n        }\n  \t }\n  \n  // Assign and return longest ending common substring\n  if (ind>0) {\n  \tcomstr = strs[0].path.slice(-ind);\n  } else {\n    comstr = 'different_extensions'\n  }\n  \n  return comstr\n  \n  }\n  \n  if ($job.inputs.bams instanceof Array) { // VK\n    if ($job.inputs.bams[0] instanceof Array) {\n      \n      // Support for input received as list of one-element-lists \n      in_var = []\n      for (i=0;i<$job.inputs.bams.length;i++) \n  \t\tin_var = in_var.concat($job.inputs.bams[i]);\n      \n    } else {\n      in_var = [].concat($job.inputs.bams)\n    }\n  \n  \n  } else {\n    in_var = [].concat($job.inputs.bams)\n  }\n  \n  prefix=''\n  \n  if(in_var.length==1) { \n    return '' // Input will be just passed to output\n  }else if (in_var[0].metadata){\n \t   if (\"sample_id\" in in_var[0].metadata){   \n  \t\t prefix = in_var[0].metadata[\"sample_id\"];      \n   \t    } else {\n   \t\t  prefix = 'sample_unknown';\n        }\n   \n  }else {\n    prefix = 'sample_unknown';   \n  }\n  \n  // Create joint name and add the merged suffix\n  joint_name = prefix + '_' + common_end(in_var);\n  name = joint_name.split('.').slice(0,-1).join('.') + '.merged.bam'\n  \n  \n  \n  return name\n  \n}\n\n\n",
                            "engine": "#cwl-js-engine",
                            "class": "Expression"
                        }
                    }
                ],
                "stdout": "",
                "baseCommand": [
                    {
                        "script": "{\n  if ($job.inputs.bams instanceof Array) { // VK\n    if ($job.inputs.bams[0] instanceof Array) {\n      \n      // Support for input received as list of one-element-lists \n      in_var = []\n      for (i=0;i<$job.inputs.bams.length;i++) \n  \t\tin_var = in_var.concat($job.inputs.bams[i]);\n      \n    } else {\n      in_var = [].concat($job.inputs.bams)\n    }\n  \n  \n  } else {\n    in_var = [].concat($job.inputs.bams)\n  }\n  comm=''\n  if(in_var instanceof Array) // Always true\n  {\n    if(in_var.length==1)\n    {\n      comm+='cp '\n      \n    }\n  \telse if(in_var.length>1)\n  \t{\n    \n    \tcomm+='/opt/sambamba_0.5.9/sambamba_v0.5.9 merge '\n    \tif($job.inputs.num_of_threads)\n  \t\t{\n    \t\tcomm+=' -t '\n    \t\tcomm+=$job.inputs.num_of_threads\n  \t\t}\n  \t\tif($job.inputs.compression_level)\n  \t\t{\n   \t\t\tcomm+=' -l '\n    \t\tcomm+=$job.inputs.compression_level\n  \t\t}\n   \t\t\n    }\n  \n  \t\n\n  }\n  return comm\n}",
                        "engine": "#cwl-js-engine",
                        "class": "Expression"
                    }
                ],
                "temporaryFailCodes": [],
                "sbg:latestRevision": 18,
                "y": -445.5729166666669,
                "sbg:validationErrors": [],
                "sbg:modifiedBy": "vladimirk",
                "cwlVersion": "sbg:draft-2",
                "sbg:license": "GNU General Public License v2.0 only",
                "description": "Sambamba Merge is used for merging several sorted BAM files into one. The sorting order of all the files must be the same, and it is maintained in the output file.",
                "class": "CommandLineTool",
                "x": 2026.6666666666679,
                "inputs": [
                    {
                        "sbg:category": "Execution",
                        "sbg:toolDefaultValue": "1",
                        "id": "#reserved_threads",
                        "description": "Number of threads reserved on the instance passed to the scheduler (number of jobs).",
                        "type": [
                            "null",
                            "int"
                        ],
                        "label": "Number of threads reserved on the instance"
                    },
                    {
                        "sbg:category": "Merge",
                        "type": [
                            "null",
                            "int"
                        ],
                        "label": "Number of threads to use",
                        "id": "#num_of_threads",
                        "description": "Number of threads to use for compression/decompression."
                    },
                    {
                        "sbg:category": "Execution",
                        "type": [
                            "null",
                            "int"
                        ],
                        "id": "#mem_mb",
                        "description": "Memory in MB.",
                        "sbg:toolDefaultValue": "1024",
                        "sbg:stageInput": null,
                        "label": "Memory in MB"
                    },
                    {
                        "sbg:category": "Merge",
                        "type": [
                            "null",
                            "int"
                        ],
                        "label": "Compression level",
                        "id": "#compression_level",
                        "description": "Level of compression for merged BAM file, number from 0 to 9."
                    },
                    {
                        "sbg:category": "Merge",
                        "sbg:fileTypes": "BAM",
                        "id": "#bams",
                        "inputBinding": {
                            "position": 5,
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Input BAM files.",
                        "required": true,
                        "label": "BAM files",
                        "type": [
                            {
                                "type": "array",
                                "name": "bams",
                                "items": "File"
                            }
                        ]
                    }
                ],
                "sbg:job": {
                    "allocatedResources": {
                        "mem": 2,
                        "cpu": 2
                    },
                    "inputs": {
                        "compression_level": null,
                        "reserved_threads": 2,
                        "num_of_threads": 6,
                        "mem_mb": 2,
                        "bams": [
                            {
                                "metadata": {
                                    "sample_id": "testmeta"
                                },
                                "class": "File",
                                "secondaryFiles": [],
                                "size": 0,
                                "path": "/path/to/uuu_bams.bam"
                            },
                            {
                                "size": 0,
                                "class": "File",
                                "secondaryFiles": [],
                                "path": "/path/to/uyyy_bams.bam"
                            }
                        ]
                    }
                },
                "sbg:createdBy": "nevenam.sudo",
                "sbg:revisionsInfo": [
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1458920412,
                        "sbg:revision": 0,
                        "sbg:modifiedBy": "nevenam.sudo"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1458920459,
                        "sbg:revision": 1,
                        "sbg:modifiedBy": "nevenam.sudo"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1462963630,
                        "sbg:revision": 2,
                        "sbg:modifiedBy": "nevenam"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1462963660,
                        "sbg:revision": 3,
                        "sbg:modifiedBy": "nevenam"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1468849940,
                        "sbg:revision": 4,
                        "sbg:modifiedBy": "ognjenm"
                    },
                    {
                        "sbg:revisionNotes": "Changed to common name",
                        "sbg:modifiedOn": 1470679574,
                        "sbg:revision": 5,
                        "sbg:modifiedBy": "ognjenm"
                    },
                    {
                        "sbg:revisionNotes": "Smart naming introduced",
                        "sbg:modifiedOn": 1470752287,
                        "sbg:revision": 6,
                        "sbg:modifiedBy": "ognjenm"
                    },
                    {
                        "sbg:revisionNotes": "Corrected single file case",
                        "sbg:modifiedOn": 1470753233,
                        "sbg:revision": 7,
                        "sbg:modifiedBy": "ognjenm"
                    },
                    {
                        "sbg:revisionNotes": "Changed glob",
                        "sbg:modifiedOn": 1470753950,
                        "sbg:revision": 8,
                        "sbg:modifiedBy": "ognjenm"
                    },
                    {
                        "sbg:revisionNotes": "Updated sample id tag",
                        "sbg:modifiedOn": 1470756561,
                        "sbg:revision": 9,
                        "sbg:modifiedBy": "ognjenm"
                    },
                    {
                        "sbg:revisionNotes": "Added inherit metadata",
                        "sbg:modifiedOn": 1470757408,
                        "sbg:revision": 10,
                        "sbg:modifiedBy": "ognjenm"
                    },
                    {
                        "sbg:revisionNotes": "Added support for receiving bams as list inside list.",
                        "sbg:modifiedOn": 1472994215,
                        "sbg:revision": 11,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": "Glob returns *.bam",
                        "sbg:modifiedOn": 1473000652,
                        "sbg:revision": 12,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": "Added support for input.bams received as list of one-element-lists.",
                        "sbg:modifiedOn": 1473071971,
                        "sbg:revision": 13,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": "Added protection from null (10)",
                        "sbg:modifiedOn": 1473257751,
                        "sbg:revision": 14,
                        "sbg:modifiedBy": "ognjenm"
                    },
                    {
                        "sbg:revisionNotes": "Returned revision that accepts list of one-element lists.",
                        "sbg:modifiedOn": 1473424164,
                        "sbg:revision": 15,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": "Added resource parameters",
                        "sbg:modifiedOn": 1475064412,
                        "sbg:revision": 16,
                        "sbg:modifiedBy": "ognjenm"
                    },
                    {
                        "sbg:revisionNotes": "Changed mem error",
                        "sbg:modifiedOn": 1475064631,
                        "sbg:revision": 17,
                        "sbg:modifiedBy": "ognjenm"
                    },
                    {
                        "sbg:revisionNotes": "Added reserved number of threads.",
                        "sbg:modifiedOn": 1476706820,
                        "sbg:revision": 18,
                        "sbg:modifiedBy": "vladimirk"
                    }
                ],
                "sbg:toolAuthor": "Artem Tarasov",
                "sbg:contributors": [
                    "nevenam",
                    "nevenam.sudo",
                    "vladimirk",
                    "ognjenm"
                ],
                "outputs": [
                    {
                        "sbg:fileTypes": "BAM",
                        "id": "#merged_bam",
                        "outputBinding": {
                            "glob": "*.bam",
                            "secondaryFiles": [
                                ".bai",
                                "^.bai"
                            ],
                            "sbg:inheritMetadataFrom": "#bams"
                        },
                        "description": "Merged bam.",
                        "type": [
                            "null",
                            "File"
                        ],
                        "label": "Merged bam"
                    }
                ],
                "sbg:toolkit": "Sambamba"
            },
            "outputs": [
                {
                    "id": "#Sambamba_Merge.merged_bam"
                }
            ],
            "inputs": [
                {
                    "id": "#Sambamba_Merge.reserved_threads",
                    "default": 7
                },
                {
                    "id": "#Sambamba_Merge.num_of_threads",
                    "default": 7
                },
                {
                    "id": "#Sambamba_Merge.mem_mb"
                },
                {
                    "id": "#Sambamba_Merge.compression_level"
                },
                {
                    "id": "#Sambamba_Merge.bams",
                    "source": [
                        "#GATK_PrintReads.recalibrated_bam",
                        "#Sambamba_View.filtered"
                    ]
                }
            ],
            "sbg:x": 2026.6666666666679
        },
        {
            "id": "#GATK_RealignerTargetCreator",
            "scatter": "#GATK_RealignerTargetCreator.intervals_file",
            "sbg:y": 412.7608035840242,
            "run": {
                "sbg:modifiedOn": 1475576477,
                "sbg:id": "bix-demo/gatk-2-3-9-lite-demo/gatk-2-3-9-lite-realignertargetcreator/8",
                "sbg:toolkitVersion": "2.3.9 Lite",
                "sbg:cmdPreview": "java -Xmx1M -jar /opt/GenomeAnalysisTKLite.jar --analysis_type RealignerTargetCreator -nt 2 --reference_sequence /folder/reference.fasta --known /folder/indels.vcf --out input.intervals",
                "sbg:revision": 8,
                "requirements": [
                    {
                        "requirements": [
                            {
                                "class": "DockerRequirement",
                                "dockerPull": "rabix/js-engine"
                            }
                        ],
                        "class": "ExpressionEngineRequirement",
                        "id": "#cwl-js-engine"
                    }
                ],
                "successCodes": [],
                "sbg:sbgMaintained": false,
                "sbg:categories": [
                    "Analysis"
                ],
                "sbg:project": "bix-demo/gatk-2-3-9-lite-demo",
                "sbg:image_url": null,
                "stdin": "",
                "id": "bix-demo/gatk-2-3-9-lite-demo/gatk-2-3-9-lite-realignertargetcreator/8",
                "sbg:links": [
                    {
                        "label": "Homepage",
                        "id": "https://www.broadinstitute.org/gatk/index.php"
                    },
                    {
                        "label": "Source code",
                        "id": "https://github.com/broadgsa/gatk-protected"
                    },
                    {
                        "label": "Wiki",
                        "id": "https://www.broadinstitute.org/gatk/guide/pdfdocs/GATK_GuideBook_2.3-9.pdf"
                    },
                    {
                        "label": "Download",
                        "id": "ttps://www.broadinstitute.org/gatk/download/auth?package=GATK-archive&version=2.3-9-ge5ebf34"
                    },
                    {
                        "label": "Publication",
                        "id": "https://www.broadinstitute.org/gatk/about/#in-the-literature"
                    },
                    {
                        "label": "Documentation",
                        "id": "https://www.broadinstitute.org/gatk/gatkdocs/org_broadinstitute_gatk_tools_walkers_indels_RealignerTargetCreator.php"
                    }
                ],
                "sbg:createdOn": 1450911384,
                "sbg:revisionNotes": "BAMs are not required input",
                "hints": [
                    {
                        "dockerImageId": "47510cb2da55",
                        "class": "DockerRequirement",
                        "dockerPull": "images.sbgenomics.com/stefanristeski/gatk2-lite:2.3-9"
                    },
                    {
                        "value": {
                            "script": "{\n  if($job.inputs.cpu_per_job){\n  \treturn $job.inputs.cpu_per_job\n  }\n  return 1\n}",
                            "engine": "#cwl-js-engine",
                            "class": "Expression"
                        },
                        "class": "sbg:CPURequirement"
                    },
                    {
                        "value": {
                            "script": "{\n  if($job.inputs.memory_per_job){\n    if($job.inputs.memory_overhead_per_job){\n    \treturn $job.inputs.memory_per_job + $job.inputs.memory_overhead_per_job\n    }\n    else\n  \t\treturn $job.inputs.memory_per_job\n  }\n  else if(!$job.inputs.memory_per_job && $job.inputs.memory_overhead_per_job){\n\t\treturn 2048 + $job.inputs.memory_overhead_per_job  \n  }\n  else\n  \treturn 2048\n}",
                            "engine": "#cwl-js-engine",
                            "class": "Expression"
                        },
                        "class": "sbg:MemRequirement"
                    }
                ],
                "label": "GATK RealignerTargetCreator",
                "arguments": [
                    {
                        "prefix": "--out",
                        "separate": true,
                        "valueFrom": {
                            "script": "{\n  if($job.inputs.reads){\n    read_name = [].concat($job.inputs.reads)[0].path.replace(/^.*[\\\\\\/]/, '').split('.')\n    read_namebase = read_name.slice(0, read_name.length-1).join('.')\n  } else read_namebase = 'known_only'\n  return read_namebase + '.intervals'\n}",
                            "engine": "#cwl-js-engine",
                            "class": "Expression"
                        }
                    }
                ],
                "stdout": "",
                "baseCommand": [
                    "java",
                    {
                        "script": "{\n  if($job.inputs.memory_per_job){\n  \treturn '-Xmx'.concat($job.inputs.memory_per_job, 'M')\n  }\n  \treturn '-Xmx2048M'\n}",
                        "engine": "#cwl-js-engine",
                        "class": "Expression"
                    },
                    "-jar",
                    "/opt/GenomeAnalysisTKLite.jar",
                    "--analysis_type",
                    "RealignerTargetCreator",
                    {
                        "script": "{ \n  if(!$job.inputs.threads_per_job){\n    return '-nt '.concat(4)\n  }\n  else{\n  \treturn '-nt '.concat($job.inputs.threads_per_job)\n  }\n}",
                        "engine": "#cwl-js-engine",
                        "class": "Expression"
                    }
                ],
                "temporaryFailCodes": [],
                "sbg:latestRevision": 8,
                "y": 412.7608035840242,
                "sbg:validationErrors": [],
                "sbg:modifiedBy": "vladimirk",
                "cwlVersion": "sbg:draft-2",
                "sbg:license": "MIT License",
                "description": "Overview\n\nThe local realignment process is designed to consume one or more BAM files and to locally realign reads such that the number of mismatching bases is minimized across all the reads. In general, a large percent of regions requiring local realignment are due to the presence of an insertion or deletion (indels) in the individual's genome with respect to the reference genome. Such alignment artifacts result in many bases mismatching the reference near the misalignment, which are easily mistaken as SNPs. Moreover, since read mapping algorithms operate on each read independently, it is impossible to place reads on the reference genome such that mismatches are minimized across all reads. Consequently, even when some reads are correctly mapped with indels, reads covering the indel near just the start or end of the read are often incorrectly mapped with respect the true indel, also requiring realignment. Local realignment serves to transform regions with misalignments due to indels into clean reads containing a consensus indel suitable for standard variant discovery approaches. Unlike most mappers, this tool uses the full alignment context to determine whether an appropriate alternate reference (i.e. indel) exists.\n\nThere are 2 steps to the realignment process:\nDetermining (small) suspicious intervals which are likely in need of realignment (RealignerTargetCreator)\nRunning the realigner over those intervals (see the IndelRealigner tool)\nFor more details, see the indel realignment method documentation.\n\nInputs\nOne or more aligned BAM files and optionally, one or more lists of known indels.\n\nOutput\nA list of target intervals to pass to the IndelRealigner.\n\nUsage example:\n java -jar GenomeAnalysisTK.jar \\\n   -T RealignerTargetCreator \\\n   -R reference.fasta \\\n   -I input.bam \\\n   --known indels.vcf \\\n   -o forIndelRealigner.intervals\n \nNotes\n\nThe input BAM(s), reference, and known indel file(s) should be the same ones to be used for the IndelRealigner step.\nWhen multiple potential indels are found by the tool in the same general region, the tool will choose the most likely one for realignment to the exclusion of the others. This is a known limitation of the tool.\nBecause reads produced from the 454 technology inherently contain false indels, the realigner will not work with them (or with reads from similar technologies).\nThis tool also ignores MQ0 reads and reads with consecutive indel operators in the CIGAR string.\n\n(IMPORTANT) Reference \".fasta\" Secondary Files\n\nTools in GATK that require a fasta reference file also look for the reference file's corresponding .fai (fasta index) and .dict (fasta dictionary) files. The fasta index file allows random access to reference bases and the dictionary file is a dictionary of the contig names and sizes contained within the fasta reference. These two secondary files are essential for GATK to work properly. To append these two files to your fasta reference please use the 'SBG FASTA Indices' tool within your GATK based workflow before using any of the GATK tools.",
                "class": "CommandLineTool",
                "x": 1250.0003344350512,
                "inputs": [
                    {
                        "sbg:category": "Realigner Target Creator",
                        "sbg:altPrefix": "-window",
                        "id": "#window_size",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--windowSize",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Window size for calculating entropy or SNP clusters. Any two SNP calls and/or high entropy positions are considered clustered when they occur no more than this many base pairs apart.",
                        "sbg:toolDefaultValue": "10",
                        "label": "Window size",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-S",
                        "id": "#validation_strictness",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--validation_strictness",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "How strict should we be with validation.",
                        "sbg:toolDefaultValue": "SILENT",
                        "label": "Validation Strictness",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "validation_strictness",
                                "symbols": [
                                    "SILENT",
                                    "LENIENT",
                                    "STRICT"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-OQ",
                        "id": "#use_original_qualities",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--useOriginalQualities",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "If set, use the original base quality scores from the OQ tag when present instead of the standard scores.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Use Original Qualities",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-use_legacy_downsampler",
                        "id": "#use_legacy_downsampler",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--use_legacy_downsampler",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Use the legacy downsampling implementation instead of the newer, less-tested implementation.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Use Legacy Downsampler",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-U",
                        "id": "#unsafe",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--unsafe",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "If set, enables unsafe operations: nothing will be checked at runtime.  For expert users only who know what they are doing.  We do not support usage of this argument.",
                        "sbg:toolDefaultValue": "",
                        "label": "Unsafe",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "unsafe",
                                "symbols": [
                                    "ALLOW_UNINDEXED_BAM",
                                    "ALLOW_UNSET_BAM_SORT_ORDER",
                                    "NO_READ_ORDER_VERIFICATION",
                                    "ALLOW_SEQ_DICT_INCOMPATIBILITY",
                                    "LENIENT_VCF_PROCESSING",
                                    "ALL"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "Execution",
                        "sbg:altPrefix": null,
                        "id": "#threads_per_job",
                        "description": "For tools which support multiprocessing, this value can be used to set the number of threads to be used.",
                        "sbg:toolDefaultValue": "4",
                        "label": "Threads per job",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-tag",
                        "id": "#tag",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--tag",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Arbitrary tag string to identify this GATK run as part of a group of runs, for later analysis.",
                        "sbg:toolDefaultValue": "",
                        "label": "Tag",
                        "type": [
                            "null",
                            "string"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-rpr",
                        "id": "#remove_program_records",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--remove_program_records",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Should we override the Walker's default and remove program records from the SAM header.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Remove Program Records",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "Input Files",
                        "sbg:fileTypes": "FASTA, FA",
                        "id": "#reference",
                        "inputBinding": {
                            "itemSeparator": " ",
                            "prefix": "--reference_sequence",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Reference Genome in FASTA format.",
                        "sbg:altPrefix": "-R",
                        "required": true,
                        "label": "Reference Genome",
                        "type": [
                            "File"
                        ]
                    },
                    {
                        "sbg:category": "Input Files",
                        "sbg:fileTypes": "SAM, BAM",
                        "id": "#reads",
                        "inputBinding": {
                            "secondaryFiles": [
                                ".bai"
                            ],
                            "itemSeparator": null,
                            "prefix": "--input_file",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Read sequences in BAM format.",
                        "sbg:altPrefix": "-I",
                        "required": false,
                        "label": "Read sequences",
                        "type": [
                            "null",
                            {
                                "type": "array",
                                "name": "reads",
                                "items": "File"
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-rgbl",
                        "id": "#read_group_black_list",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--read_group_black_list",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Filters out read groups matching : or a .txt file containing the filter strings one per line.",
                        "sbg:toolDefaultValue": "[]",
                        "label": "Read Group Black List",
                        "type": [
                            "null",
                            {
                                "type": "array",
                                "items": "string"
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-rf",
                        "id": "#read_filter",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--read_filter",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Specify filtration criteria to apply to each read individually.",
                        "sbg:toolDefaultValue": "[]",
                        "label": "Read Filter",
                        "type": [
                            "null",
                            {
                                "type": "array",
                                "items": {
                                    "type": "enum",
                                    "name": "read_filter",
                                    "symbols": [
                                        "BadCigarFilter",
                                        "BadMateFilter",
                                        "CountingFilteringIterator.CountingReadFilter",
                                        "DuplicateReadFilter",
                                        "FailsVendorQualityCheckFilter",
                                        "HCMappingQualityFilter",
                                        "LibraryReadFilter",
                                        "MalformedReadFilter",
                                        "MappingQualityFilter",
                                        "MappingQualityUnavailableFilter",
                                        "MappingQualityZeroFilter",
                                        "MateSameStrandFilter",
                                        "MaxInsertSizeFilter",
                                        "MissingReadGroupFilter",
                                        "NoOriginalQualityScoresFilter",
                                        "NotPrimaryAlignmentFilter",
                                        "OverclippedReadFilter",
                                        "Platform454Filter",
                                        "PlatformFilter",
                                        "PlatformUnitFilter",
                                        "ReadGroupBlackListFilter",
                                        "ReadLengthFilter",
                                        "ReadNameFilter",
                                        "ReadStrandFilter",
                                        "ReassignMappingQualityFilter",
                                        "ReassignOneMappingQualityFilter",
                                        "SampleFilter",
                                        "SingleReadGroupFilter",
                                        "UnmappedReadFilter"
                                    ]
                                }
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-preserveQ",
                        "id": "#preserve_qscores_less_than",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--preserve_qscores_less_than",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Bases with quality scores less than this threshold won't be recalibrated (with -BQSR).",
                        "sbg:toolDefaultValue": "6",
                        "label": "Preserve Qscores Less Than",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-et",
                        "id": "#phone_home",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--phone_home",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "What kind of GATK run report should we generate? STANDARD is the default, can be NO_ET so nothing is posted to the run repository. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.",
                        "sbg:toolDefaultValue": "STANDARD",
                        "label": "Phone Home",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "phone_home",
                                "symbols": [
                                    "NO_ET",
                                    "STANDARD"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-pedValidationType",
                        "id": "#pedigree_validation_type",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--pedigreeValidationType",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "How strict should we be in validating the pedigree information?.",
                        "sbg:toolDefaultValue": "STRICT",
                        "label": "Pedigree Validation Type",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "pedigree_validation_type",
                                "symbols": [
                                    "STRICT",
                                    "SILENT"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-pedString",
                        "id": "#pedigree_string",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--pedigreeString",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Pedigree string for samples.",
                        "sbg:toolDefaultValue": "[]",
                        "label": "Pedigree String",
                        "type": [
                            "null",
                            {
                                "type": "array",
                                "items": "string"
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-ndrs",
                        "id": "#non_deterministic_random_seed",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--nonDeterministicRandomSeed",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Makes the GATK behave non deterministically, that is, the random numbers generated will be different in every run.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Non Deterministic Random Seed",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "Realigner Target Creator",
                        "sbg:altPrefix": "-mismatch",
                        "id": "#mismatch_fraction",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--mismatchFraction",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Fraction of base qualities needing to mismatch for a position to have high entropy. To disable this behavior, set this value to <= 0 or > 1. This feature is really only necessary when using an ungapped aligner (e.g. MAQ in the case of single-end read data) and should be used in conjunction with USE_SW' option.",
                        "sbg:toolDefaultValue": "0.0",
                        "label": "Mismatch fraction",
                        "type": [
                            "null",
                            "float"
                        ]
                    },
                    {
                        "sbg:category": "Realigner Target Creator",
                        "sbg:altPrefix": "-minReads",
                        "id": "#min_reads_at_locus",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--minReadsAtLocus",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Minimum reads at a locus to enable using the entropy calculation.",
                        "sbg:toolDefaultValue": "4",
                        "label": "Minimum reads at locus",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "Execution",
                        "sbg:altPrefix": null,
                        "id": "#memory_per_job",
                        "description": "Amount of RAM memory in MB to be used per job.",
                        "sbg:toolDefaultValue": "2048",
                        "label": "Memory per job",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "Execution",
                        "sbg:toolDefaultValue": "0",
                        "id": "#memory_overhead_per_job",
                        "description": "Memory overhead per job. By default this parameter value is set to '0' (zero megabytes). This parameter value is added to the Memory per job parameter value. This results in the allocation of the sum total (Memory per job and Memory overhead per job) amount of memory per job. By default the memory per job parameter value is set to 2048 megabytes, unless specified otherwise.",
                        "type": [
                            "null",
                            "int"
                        ],
                        "label": "Memory overhead per job"
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-maxRuntimeUnits",
                        "id": "#max_runtime_units",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--maxRuntimeUnits",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "The TimeUnit for maxRuntime.",
                        "sbg:toolDefaultValue": "MINUTES",
                        "label": "Max Runtime Units",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "max_runtime_units",
                                "symbols": [
                                    "NANOSECONDS",
                                    "MICROSECONDS",
                                    "MILLISECONDS",
                                    "SECONDS",
                                    "MINUTES",
                                    "HOURS",
                                    "DAYS"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-maxRuntime",
                        "id": "#max_runtime",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--maxRuntime",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "If provided, that GATK will stop execution cleanly as soon after maxRuntime has been exceeded, truncating the run but not exiting with a failure.  By default the value is interpreted in minutes, but this can be changed by maxRuntimeUnits.",
                        "sbg:toolDefaultValue": "-1",
                        "label": "Max Runtime",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "Realigner Target Creator",
                        "sbg:altPrefix": "-maxInterval",
                        "id": "#max_interval_size",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--maxIntervalSize",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Maximum interval size. Because the realignment algorithm is N^2, allowing too large an interval might take too long to completely realign.",
                        "sbg:toolDefaultValue": "500",
                        "label": "Maximum interval size",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "Input Files",
                        "sbg:fileTypes": "VCF",
                        "id": "#known",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--known",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "VCF file with known indels.",
                        "required": true,
                        "sbg:stageInput": "link",
                        "label": "Known indels",
                        "type": [
                            {
                                "type": "array",
                                "name": "known",
                                "items": "File"
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-kpr",
                        "id": "#keep_program_records",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--keep_program_records",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Should we override the Walker's default and keep program records from the SAM header.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Keep Program Records",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "Input Files",
                        "sbg:fileTypes": "TXT, BED, VCF",
                        "id": "#intervals_file",
                        "inputBinding": {
                            "itemSeparator": " ",
                            "prefix": "--intervals",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "One or more genomic intervals over which to operate. Can be an specified in an .intervals file or a rod file.",
                        "sbg:altPrefix": "-L",
                        "required": false,
                        "label": "Intervals",
                        "type": [
                            "null",
                            "File"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": null,
                        "id": "#intervals",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "-L",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "One or more genomic intervals over which to operate.",
                        "sbg:toolDefaultValue": "sample",
                        "label": "Intervals",
                        "type": [
                            "null",
                            "string"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-isr",
                        "id": "#interval_set_rule",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--interval_set_rule",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Indicates the set merging approach the interval parser should use to combine the various -L or -XL inputs.",
                        "sbg:toolDefaultValue": "UNION",
                        "label": "Interval Set Rule",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "interval_set_rule",
                                "symbols": [
                                    "UNION",
                                    "INTERSECTION"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-ip",
                        "id": "#interval_padding",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--interval_padding",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Indicates how many basepairs of padding to include around each of the intervals specified with the -L/--intervals argument.",
                        "sbg:toolDefaultValue": "0",
                        "label": "Interval Padding",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-im",
                        "id": "#interval_merging",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--interval_merging",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Indicates the interval merging rule we should use for abutting intervals.",
                        "sbg:toolDefaultValue": "ALL",
                        "label": "Interval Merging",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "interval_merging",
                                "symbols": [
                                    "ALL",
                                    "OVERLAPPING_ONLY"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "Input Files",
                        "sbg:fileTypes": "KEY, LICENSE",
                        "id": "#gatk_key",
                        "inputBinding": {
                            "itemSeparator": " ",
                            "prefix": "--gatk_key",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "GATK Key file. Required if running with -et NO_ET. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.",
                        "sbg:altPrefix": "-K",
                        "required": false,
                        "label": "Gatk key",
                        "type": [
                            "null",
                            "File"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-fixMisencodedQuals",
                        "id": "#fix_misencoded_quals",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "-fixMisencodedQuals",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Fix mis-encoded base quality scores.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Fix Misencoded Quals",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "Input Files",
                        "sbg:fileTypes": "TXT, BED, VCF",
                        "id": "#exclude_intervals",
                        "inputBinding": {
                            "itemSeparator": " ",
                            "prefix": "--excludeIntervals",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "One or more genomic intervals to exclude from processing. Can be an .intervals file or a rod file.",
                        "sbg:altPrefix": "-XL",
                        "required": false,
                        "label": "Exclude Intervals",
                        "type": [
                            "null",
                            "File"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-EOQ",
                        "id": "#emit_original_quals",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--emit_original_quals",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "If true, enables printing of the OQ tag with the original base qualities (with -BQSR).",
                        "sbg:toolDefaultValue": "False",
                        "label": "Emit Original Quals",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-dt",
                        "id": "#downsampling_type",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--downsampling_type",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Type of reads downsampling to employ at a given locus. Reads will be selected randomly to be removed from the pile based on the method described here.",
                        "sbg:toolDefaultValue": "",
                        "label": "Downsampling Type",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "downsampling_type",
                                "symbols": [
                                    "NONE",
                                    "ALL_READS",
                                    "BY_SAMPLE"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-dfrac",
                        "id": "#downsample_to_fraction",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--downsample_to_fraction",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Fraction [0.0-1.0] of reads to downsample to.",
                        "sbg:toolDefaultValue": "",
                        "label": "Downsample to Fraction",
                        "type": [
                            "null",
                            "float"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-dcov",
                        "id": "#downsample_to_coverage",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--downsample_to_coverage",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Coverage to downsample to at any given locus; note that downsampled reads are randomly selected from all possible reads at a locus. For non-locus-based traversals (eg., ReadWalkers), this sets the maximum number of reads at each alignment start position.",
                        "sbg:toolDefaultValue": "",
                        "label": "Downsample to Coverage",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": null,
                        "id": "#disable_radnomization",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--disableRandomization",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Completely eliminates randomization from nondeterministic methods. To be used mostly in the testing framework where dynamic parallelism can result in differing numbers of calls to the generator.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Disable Randomization",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-DIQ",
                        "id": "#disable_indel_quals",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--disable_indel_quals",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "If 'true', disables printing of base insertion and base deletion tags (with -BQSR). Turns off printing of the base insertion and base deletion tags when using the -BQSR argument and only the base substitution qualities will be produced.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Disable Indel Quals",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-DBQ",
                        "id": "#default_base_qualities",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--defaultBaseQualities",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "If reads are missing some or all base quality scores, this value will be used for all base quality scores.",
                        "sbg:toolDefaultValue": "-1",
                        "label": "Default Base Qualities",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "Execution",
                        "sbg:altPrefix": null,
                        "id": "#cpu_per_job",
                        "description": "Number of CPUs per job.",
                        "sbg:toolDefaultValue": "1",
                        "label": "CPU per job",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-baqGOP",
                        "id": "#baq_gap_open_penalty",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--baqGapOpenPenalty",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "BAQ gap open penalty (Phred Scaled). Default value is 40. 30 is perhaps better for whole genome call sets.",
                        "sbg:toolDefaultValue": "40.0",
                        "label": "BAQ Gap Open Penalty",
                        "type": [
                            "null",
                            "float"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-baq",
                        "id": "#baq",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--baq",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Type of BAQ calculation to apply in the engine.",
                        "sbg:toolDefaultValue": "OFF",
                        "label": "BAQ Calculation Type",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "baq",
                                "symbols": [
                                    "OFF",
                                    "CALCULATE_AS_NECESSARY",
                                    "RECALCULATE"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "--allow_potentially_misencoded_quality_scores",
                        "id": "#allow_potentailly_misencoded_quals",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "-allowPotentiallyMisencodedQuals",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Do not fail when encountered base qualities that are too high and seemingly indicate a problem with the base quality encoding of the BAM file.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Allow Potentially Misencoded Quals",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    }
                ],
                "sbg:job": {
                    "allocatedResources": {
                        "mem": 1,
                        "cpu": 1
                    },
                    "inputs": {
                        "memory_overhead_per_job": 0,
                        "intervals_file": {
                            "metadata": {
                                "sbg_scatter": "true"
                            },
                            "path": "/path/to/file/rrrrrr.bed",
                            "secondaryFiles": []
                        },
                        "threads_per_job": 2,
                        "reference": {
                            "path": "/folder/reference.fasta"
                        },
                        "intervals": "",
                        "reads": [
                            {
                                "path": "input.bam"
                            }
                        ],
                        "known": [
                            {
                                "path": "/folder/indels.vcf"
                            }
                        ],
                        "cpu_per_job": 1,
                        "memory_per_job": 1
                    }
                },
                "sbg:createdBy": "bix-demo",
                "sbg:revisionsInfo": [
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1450911384,
                        "sbg:revision": 0,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1450911384,
                        "sbg:revision": 1,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1450911385,
                        "sbg:revision": 2,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1450911386,
                        "sbg:revision": 3,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1450911387,
                        "sbg:revision": 4,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:revisionNotes": "known link staged.",
                        "sbg:modifiedOn": 1471364087,
                        "sbg:revision": 5,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": "Scatter metadata.",
                        "sbg:modifiedOn": 1472650598,
                        "sbg:revision": 6,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": ".bai as secondary",
                        "sbg:modifiedOn": 1472724438,
                        "sbg:revision": 7,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": "BAMs are not required input",
                        "sbg:modifiedOn": 1475576477,
                        "sbg:revision": 8,
                        "sbg:modifiedBy": "vladimirk"
                    }
                ],
                "sbg:toolAuthor": "Broad Institute",
                "sbg:contributors": [
                    "vladimirk",
                    "bix-demo"
                ],
                "outputs": [
                    {
                        "sbg:fileTypes": "INTERVALS",
                        "id": "#indel_realigner_intervals_file",
                        "outputBinding": {
                            "glob": "*.intervals",
                            "sbg:metadata": {
                                "intervals_file": {
                                    "script": "{\n  if ($job.inputs.intervals_file)\n    if($job.inputs.intervals_file.metadata)\n      if($job.inputs.intervals_file.metadata.sbg_scatter)\n        return $job.inputs.intervals_file.path.split('/').pop()\n  return 'NO_INTERVALS'\n}",
                                    "engine": "#cwl-js-engine",
                                    "class": "Expression"
                                }
                            },
                            "sbg:inheritMetadataFrom": "#reads"
                        },
                        "description": "An output file created by the walker.",
                        "type": [
                            "null",
                            "File"
                        ],
                        "label": "Intervals"
                    }
                ],
                "sbg:toolkit": "GATK"
            },
            "outputs": [
                {
                    "id": "#GATK_RealignerTargetCreator.indel_realigner_intervals_file"
                }
            ],
            "inputs": [
                {
                    "id": "#GATK_RealignerTargetCreator.window_size"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.validation_strictness"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.use_original_qualities"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.use_legacy_downsampler"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.unsafe"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.threads_per_job",
                    "default": 4
                },
                {
                    "id": "#GATK_RealignerTargetCreator.tag"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.remove_program_records"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.reference",
                    "source": [
                        "#SBG_FASTA_Indices.fasta_reference"
                    ]
                },
                {
                    "id": "#GATK_RealignerTargetCreator.reads",
                    "source": [
                        "#BWA_MEM_Bundle_0_7_13.aligned_reads"
                    ]
                },
                {
                    "id": "#GATK_RealignerTargetCreator.read_group_black_list"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.read_filter"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.preserve_qscores_less_than"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.phone_home"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.pedigree_validation_type"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.pedigree_string"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.non_deterministic_random_seed"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.mismatch_fraction"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.min_reads_at_locus"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.memory_per_job",
                    "default": 2048
                },
                {
                    "id": "#GATK_RealignerTargetCreator.memory_overhead_per_job",
                    "default": 64
                },
                {
                    "id": "#GATK_RealignerTargetCreator.max_runtime_units"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.max_runtime"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.max_interval_size"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.known",
                    "source": [
                        "#known_1"
                    ]
                },
                {
                    "id": "#GATK_RealignerTargetCreator.keep_program_records"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.intervals_file",
                    "source": [
                        "#SBG_Prepare_Intervals.intervals"
                    ]
                },
                {
                    "id": "#GATK_RealignerTargetCreator.intervals"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.interval_set_rule"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.interval_padding"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.interval_merging"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.gatk_key"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.fix_misencoded_quals"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.exclude_intervals"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.emit_original_quals"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.downsampling_type"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.downsample_to_fraction"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.downsample_to_coverage"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.disable_radnomization"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.disable_indel_quals"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.default_base_qualities"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.cpu_per_job",
                    "default": 1
                },
                {
                    "id": "#GATK_RealignerTargetCreator.baq_gap_open_penalty"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.baq"
                },
                {
                    "id": "#GATK_RealignerTargetCreator.allow_potentailly_misencoded_quals"
                }
            ],
            "sbg:x": 1250.0003344350512
        },
        {
            "id": "#GATK_PrintReads",
            "scatter": "#GATK_PrintReads.reads",
            "sbg:y": 406.0939039029232,
            "run": {
                "sbg:modifiedOn": 1476372560,
                "sbg:id": "bix-demo/gatk-2-3-9-lite-demo/gatk-2-3-9-lite-printreads/12",
                "sbg:toolkitVersion": "2.3.9 Lite",
                "sbg:cmdPreview": "java -Xmx2048M -jar /opt/GenomeAnalysisTKLite.jar --analysis_type PrintReads -nct 4 --reference_sequence /folder/reference.fasta --input_file /folder/input1.bam --out input1.bam ; mv input1.bai input1.bam.bai",
                "sbg:revision": 12,
                "requirements": [
                    {
                        "requirements": [
                            {
                                "class": "DockerRequirement",
                                "dockerPull": "rabix/js-engine"
                            }
                        ],
                        "class": "ExpressionEngineRequirement",
                        "id": "#cwl-js-engine"
                    }
                ],
                "successCodes": [],
                "sbg:sbgMaintained": false,
                "sbg:categories": [
                    "SAM/BAM-Processing"
                ],
                "sbg:project": "bix-demo/gatk-2-3-9-lite-demo",
                "sbg:image_url": null,
                "stdin": "",
                "id": "bix-demo/gatk-2-3-9-lite-demo/gatk-2-3-9-lite-printreads/12",
                "sbg:links": [
                    {
                        "label": "Homepage",
                        "id": "https://www.broadinstitute.org/gatk/index.php"
                    },
                    {
                        "label": "Source Code",
                        "id": "https://github.com/broadgsa/gatk-protected"
                    },
                    {
                        "label": "Wiki",
                        "id": "https://www.broadinstitute.org/gatk/guide/pdfdocs/GATK_GuideBook_2.3-9.pdf"
                    },
                    {
                        "label": "Download",
                        "id": "https://www.broadinstitute.org/gatk/download/auth?package=GATK-archive&version=2.3-9-ge5ebf34"
                    },
                    {
                        "label": "Publication",
                        "id": "https://www.broadinstitute.org/gatk/about/#in-the-literature"
                    },
                    {
                        "label": "Documentation",
                        "id": "https://www.broadinstitute.org/gatk/gatkdocs/org_broadinstitute_gatk_tools_walkers_readutils_PrintReads.php"
                    }
                ],
                "sbg:createdOn": 1450911393,
                "sbg:revisionNotes": "Read_filter names corrected (\"Filter\" string removed)",
                "hints": [
                    {
                        "dockerImageId": "47510cb2da55",
                        "class": "DockerRequirement",
                        "dockerPull": "images.sbgenomics.com/stefanristeski/gatk2-lite:2.3-9"
                    },
                    {
                        "value": {
                            "script": "{\n  if($job.inputs.cpu_per_job){\n  \treturn $job.inputs.cpu_per_job\n  }\n\treturn 1\n}",
                            "engine": "#cwl-js-engine",
                            "class": "Expression"
                        },
                        "class": "sbg:CPURequirement"
                    },
                    {
                        "value": {
                            "script": "{\n  if($job.inputs.memory_per_job){\n    if($job.inputs.memory_overhead_per_job){\n    \treturn $job.inputs.memory_per_job + $job.inputs.memory_overhead_per_job\n    }\n    else\n  \t\treturn $job.inputs.memory_per_job\n  }\n  else if(!$job.inputs.memory_per_job && $job.inputs.memory_overhead_per_job){\n\t\treturn 2048 + $job.inputs.memory_overhead_per_job  \n  }\n  else\n  \treturn 2048\n}",
                            "engine": "#cwl-js-engine",
                            "class": "Expression"
                        },
                        "class": "sbg:MemRequirement"
                    }
                ],
                "label": "GATK PrintReads",
                "arguments": [
                    {
                        "prefix": "--out",
                        "separate": true,
                        "valueFrom": {
                            "script": "{\n  read_name = [].concat($job.inputs.reads)[0].path.replace(/^.*[\\\\\\/]/, '').split('.')\n  read_namebase = read_name.slice(0, read_name.length-1).join('.')\n\n  if($job.inputs.bqsr){\n  \treturn read_namebase + '.base_recalibrated.bam'\n  }\n  else{\n  \treturn read_namebase + '.bam'\n  }\n}",
                            "engine": "#cwl-js-engine",
                            "class": "Expression"
                        }
                    },
                    {
                        "position": 10000,
                        "prefix": ";",
                        "separate": true,
                        "valueFrom": {
                            "script": "{\n  read_name = [].concat($job.inputs.reads)[0].path.replace(/^.*[\\\\\\/]/, '').split('.')\n  read_namebase = read_name.slice(0, read_name.length-1).join('.')\n  if($job.inputs.bqsr){\n\treturn 'mv ' + read_namebase + '.base_recalibrated.bai '+ read_namebase + '.base_recalibrated.bam.bai'\n  }\n  else{\n  \treturn 'mv ' + read_namebase + '.bai '+read_namebase+'.bam.bai'\n  }\n}",
                            "engine": "#cwl-js-engine",
                            "class": "Expression"
                        }
                    }
                ],
                "stdout": "",
                "baseCommand": [
                    "java",
                    {
                        "script": "{\n  if($job.inputs.memory_per_job){\n  \treturn '-Xmx'.concat($job.inputs.memory_per_job, 'M')\n  }\n  \treturn '-Xmx2048M'\n}",
                        "engine": "#cwl-js-engine",
                        "class": "Expression"
                    },
                    "-jar",
                    "/opt/GenomeAnalysisTKLite.jar",
                    "--analysis_type",
                    "PrintReads",
                    {
                        "script": "{ \n  if($job.inputs.threads_per_job){\n    return '-nct '.concat($job.inputs.threads_per_job)\n  }\n  else{\n  \treturn '-nct '.concat(4)\n  }\n}",
                        "engine": "#cwl-js-engine",
                        "class": "Expression"
                    }
                ],
                "temporaryFailCodes": [],
                "sbg:latestRevision": 12,
                "y": 406.0939039029232,
                "sbg:validationErrors": [],
                "sbg:modifiedBy": "vladimirk",
                "cwlVersion": "sbg:draft-2",
                "sbg:license": "MIT License",
                "description": "Overview\n\nPrintReads is a generic utility tool for manipulating sequencing data in SAM/BAM format. It can dynamically merge the contents of multiple input BAM files, resulting in merged output sorted in coordinate order. It can also optionally filter reads based on various read properties such as read group tags using the `--read_filter/-rf` command line argument (see documentation on read filters for more information).\n\nNote that when PrintReads is used as part of the Base Quality Score Recalibration workflow, it takes the `--BQSR` engine argument, which is listed under Inherited Arguments > CommandLineGATK below.\n\nInput\nOne or more bam files.\n\nOutput\nA single processed bam file.\n\nUsage examples:\n\n // Prints all reads that have a mapping quality above zero\n java -jar GenomeAnalysisTK.jar \\\n   -T PrintReads \\\n   -R reference.fasta \\\n   -I input1.bam \\\n   -I input2.bam \\\n   -o output.bam \\\n   --read_filter MappingQualityZero\n\n // Prints the first 2000 reads in the BAM file\n java -jar GenomeAnalysisTK.jar \\\n   -T PrintReads \\\n   -R reference.fasta \\\n   -I input.bam \\\n   -o output.bam \\\n   -n 2000\n\n // Downsamples BAM file to 25%\n java -jar GenomeAnalysisTK.jar \\\n   -T PrintReads \\\n   -R reference.fasta \\\n   -I input.bam \\\n   -o output.bam \\\n   -dfrac 0.25\n\n(IMPORTANT) Reference \".fasta\" Secondary Files\n\nTools in GATK that require a fasta reference file also look for the reference file's corresponding .fai (fasta index) and .dict (fasta dictionary) files. The fasta index file allows random access to reference bases and the dictionary file is a dictionary of the contig names and sizes contained within the fasta reference. These two secondary files are essential for GATK to work properly. To append these two files to your fasta reference please use the 'SBG FASTA Indices' tool within your GATK based workflow before using any of the GATK tools.",
                "class": "CommandLineTool",
                "x": 1768.3340922859265,
                "inputs": [
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-S",
                        "id": "#validation_strictness",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--validation_strictness",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "How strict should we be with validation.",
                        "sbg:toolDefaultValue": "SILENT",
                        "label": "Validation Strictness",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "validation_strictness",
                                "symbols": [
                                    "SILENT",
                                    "LENIENT",
                                    "STRICT"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-OQ",
                        "id": "#use_original_qualities",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--useOriginalQualities",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "If set, use the original base quality scores from the OQ tag when present instead of the standard scores.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Use Original Qualities",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-use_legacy_downsampler",
                        "id": "#use_legacy_downsampler",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--use_legacy_downsampler",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Use the legacy downsampling implementation instead of the newer, less-tested implementation.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Use Legacy Downsampler",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-U",
                        "id": "#unsafe",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--unsafe",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "If set, enables unsafe operations: nothing will be checked at runtime.  For expert users only who know what they are doing.  We do not support usage of this argument.",
                        "sbg:toolDefaultValue": "",
                        "label": "Unsafe",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "unsafe",
                                "symbols": [
                                    "ALLOW_UNINDEXED_BAM",
                                    "ALLOW_UNSET_BAM_SORT_ORDER",
                                    "NO_READ_ORDER_VERIFICATION",
                                    "ALLOW_SEQ_DICT_INCOMPATIBILITY",
                                    "LENIENT_VCF_PROCESSING",
                                    "ALL"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "Execution",
                        "sbg:altPrefix": null,
                        "id": "#threads_per_job",
                        "description": "For tools which support multiprocessing, this value can be used to set the number of threads to be used.",
                        "sbg:toolDefaultValue": "4",
                        "label": "Threads per job",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-tag",
                        "id": "#tag",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--tag",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Arbitrary tag string to identify this GATK run as part of a group of runs, for later analysis.",
                        "sbg:toolDefaultValue": "",
                        "label": "Tag",
                        "type": [
                            "null",
                            "string"
                        ]
                    },
                    {
                        "sbg:category": "Print Reads",
                        "sbg:altPrefix": "-s",
                        "id": "#simplify",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--simplify",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Simplify all reads.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Simplify",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "Print Reads",
                        "sbg:altPrefix": "-sn",
                        "id": "#sample_name",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--sample_name",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Sample name to be included in the analysis. Can be specified multiple times.",
                        "sbg:toolDefaultValue": "[]",
                        "label": "Sample Name",
                        "type": [
                            "null",
                            {
                                "type": "array",
                                "items": "string"
                            }
                        ]
                    },
                    {
                        "sbg:category": "Input Files",
                        "required": false,
                        "id": "#sample_file",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--sample_file",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "File containing a list of samples (one per line). Can be specified multiple times.",
                        "sbg:altPrefix": "-sf",
                        "label": "Sample File",
                        "type": [
                            "null",
                            {
                                "type": "array",
                                "items": "File"
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-rpr",
                        "id": "#remove_program_records",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--remove_program_records",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Should we override the Walker's default and remove program records from the SAM header.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Remove Program Records",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "Input Files",
                        "sbg:fileTypes": "FASTA, FA",
                        "id": "#reference",
                        "inputBinding": {
                            "itemSeparator": " ",
                            "prefix": "--reference_sequence",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Reference Genome in FASTA format.",
                        "sbg:altPrefix": "-R",
                        "required": true,
                        "label": "Reference Genome",
                        "type": [
                            "File"
                        ]
                    },
                    {
                        "sbg:category": "Input Files",
                        "sbg:fileTypes": "SAM, BAM",
                        "id": "#reads",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--input_file",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Read sequences in BAM format.",
                        "sbg:altPrefix": "-I",
                        "required": true,
                        "label": "Read sequences",
                        "type": [
                            {
                                "type": "array",
                                "items": "File"
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-rgbl",
                        "id": "#read_group_black_list",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--read_group_black_list",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Filters out read groups matching : or a .txt file containing the filter strings one per line.",
                        "sbg:toolDefaultValue": "[]",
                        "label": "Read Group Black List",
                        "type": [
                            "null",
                            {
                                "type": "array",
                                "items": "string"
                            }
                        ]
                    },
                    {
                        "sbg:category": "Print Reads",
                        "sbg:altPrefix": "-readGroup",
                        "id": "#read_group",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--readGroup",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Exclude all reads with this read group from the output.",
                        "sbg:toolDefaultValue": "",
                        "label": "Read Group",
                        "type": [
                            "null",
                            "string"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-rf",
                        "id": "#read_filter",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--read_filter",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Specify filtration criteria to apply to each read individually.",
                        "sbg:toolDefaultValue": "[]",
                        "label": "Read Filter",
                        "type": [
                            "null",
                            {
                                "type": "array",
                                "name": "read_filter",
                                "items": {
                                    "type": "enum",
                                    "name": "read_filter",
                                    "symbols": [
                                        "BadCigar",
                                        "BadMate",
                                        "CountingFilteringIterator.CountingRead",
                                        "DuplicateRead",
                                        "FailsVendorQualityCheck",
                                        "HCMappingQuality",
                                        "LibraryRead",
                                        "MalformedRead",
                                        "MappingQuality",
                                        "MappingQualityUnavailable",
                                        "MappingQualityZero",
                                        "MateSameStrand",
                                        "MaxInsertSize",
                                        "MissingReadGroup",
                                        "NoOriginalQualityScores",
                                        "NotPrimaryAlignment",
                                        "OverclippedRead",
                                        "Platform454",
                                        "PlatformFilter",
                                        "PlatformUnit",
                                        "ReadGroupBlackList",
                                        "ReadLength",
                                        "ReadName",
                                        "ReadStrand",
                                        "ReassignMappingQuality",
                                        "ReassignOneMappingQuality",
                                        "Sample",
                                        "SingleReadGroup",
                                        "UnmappedRead"
                                    ]
                                }
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-preserveQ",
                        "id": "#preserve_qscores_less_than",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--preserve_qscores_less_than",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Bases with quality scores less than this threshold won't be recalibrated (with -BQSR).",
                        "sbg:toolDefaultValue": "6",
                        "label": "Preserve Qscores Less Than",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "Print Reads",
                        "sbg:altPrefix": "-platform",
                        "id": "#platform",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--platform",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Exclude all reads with this platform from the output.",
                        "sbg:toolDefaultValue": "",
                        "label": "Platform",
                        "type": [
                            "null",
                            "string"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-et",
                        "id": "#phone_home",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--phone_home",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "What kind of GATK run report should we generate? STANDARD is the default, can be NO_ET so nothing is posted to the run repository. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.",
                        "sbg:toolDefaultValue": "STANDARD",
                        "label": "Phone Home",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "phone_home",
                                "symbols": [
                                    "NO_ET",
                                    "STANDARD"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-pedValidationType",
                        "id": "#pedigree_validation_type",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--pedigreeValidationType",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "How strict should we be in validating the pedigree information?.",
                        "sbg:toolDefaultValue": "STRICT",
                        "label": "Pedigree Validation Type",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "pedigree_validation_type",
                                "symbols": [
                                    "STRICT",
                                    "SILENT"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-pedString",
                        "id": "#pedigree_string",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--pedigreeString",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Pedigree string for samples.",
                        "sbg:toolDefaultValue": "[]",
                        "label": "Pedigree String",
                        "type": [
                            "null",
                            {
                                "type": "array",
                                "items": "string"
                            }
                        ]
                    },
                    {
                        "sbg:category": "Print Reads",
                        "sbg:altPrefix": "-n",
                        "id": "#number",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--number",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Print the first n reads from the file, discarding the rest.",
                        "sbg:toolDefaultValue": "-1",
                        "label": "Number",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-ndrs",
                        "id": "#non_deterministic_random_seed",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--nonDeterministicRandomSeed",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Makes the GATK behave non deterministically, that is, the random numbers generated will be different in every run.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Non Deterministic Random Seed",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "Execution",
                        "sbg:altPrefix": null,
                        "id": "#memory_per_job",
                        "description": "Amount of RAM memory in MB to be used per job.",
                        "sbg:toolDefaultValue": "2048",
                        "label": "Memory per job",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "Execution",
                        "sbg:toolDefaultValue": "0",
                        "id": "#memory_overhead_per_job",
                        "description": "Memory overhead per job. By default this parameter value is set to '0' (zero megabytes). This parameter value is added to the Memory per job parameter value. This results in the allocation of the sum total (Memory per job and Memory overhead per job) amount of memory per job. By default the memory per job parameter value is set to 2048 megabytes, unless specified otherwise.",
                        "type": [
                            "null",
                            "int"
                        ],
                        "label": "Memory overhead per job"
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-maxRuntimeUnits",
                        "id": "#max_runtime_units",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--maxRuntimeUnits",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "The TimeUnit for maxRuntime.",
                        "sbg:toolDefaultValue": "MINUTES",
                        "label": "Max Runtime Units",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "max_runtime_units",
                                "symbols": [
                                    "NANOSECONDS",
                                    "MICROSECONDS",
                                    "MILLISECONDS",
                                    "SECONDS",
                                    "MINUTES",
                                    "HOURS",
                                    "DAYS"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-maxRuntime",
                        "id": "#max_runtime",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--maxRuntime",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "If provided, that GATK will stop execution cleanly as soon after maxRuntime has been exceeded, truncating the run but not exiting with a failure.  By default the value is interpreted in minutes, but this can be changed by maxRuntimeUnits.",
                        "sbg:toolDefaultValue": "-1",
                        "label": "Max Runtime",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-kpr",
                        "id": "#keep_program_records",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--keep_program_records",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Should we override the Walker's default and keep program records from the SAM header.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Keep Program Records",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "Input Files",
                        "sbg:fileTypes": "TXT, BED, VCF",
                        "id": "#intervals_file",
                        "inputBinding": {
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true,
                            "valueFrom": {
                                "script": "{\n  if($job.inputs.intervals_file instanceof Array)\n    if([].concat($job.inputs.reads)[0].metadata)\n      if([].concat($job.inputs.reads)[0].metadata.intervals_file)\n        return '--intervals ' + [].concat($job.inputs.reads)[0].metadata.intervals_file\n  \n  if($job.inputs.intervals_file)\n    return '--intervals ' + $job.inputs.intervals_file.path\n  else\n    return ''\n}",
                                "engine": "#cwl-js-engine",
                                "class": "Expression"
                            }
                        },
                        "description": "One or more genomic intervals over which to operate. Can be an specified in an .intervals file or a rod file.",
                        "required": false,
                        "sbg:stageInput": "link",
                        "label": "Intervals",
                        "type": [
                            "null",
                            {
                                "type": "array",
                                "name": "intervals_file",
                                "items": "File"
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": null,
                        "id": "#intervals",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "-L",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "One or more genomic intervals over which to operate.",
                        "sbg:toolDefaultValue": "",
                        "label": "Intervals",
                        "type": [
                            "null",
                            "string"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-isr",
                        "id": "#interval_set_rule",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--interval_set_rule",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Indicates the set merging approach the interval parser should use to combine the various -L or -XL inputs.",
                        "sbg:toolDefaultValue": "UNION",
                        "label": "Interval Set Rule",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "interval_set_rule",
                                "symbols": [
                                    "UNION",
                                    "INTERSECTION"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-ip",
                        "id": "#interval_padding",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--interval_padding",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Indicates how many basepairs of padding to include around each of the intervals specified with the -L/--intervals argument.",
                        "sbg:toolDefaultValue": "0",
                        "label": "Interval Padding",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-im",
                        "id": "#interval_merging",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--interval_merging",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Indicates the interval merging rule we should use for abutting intervals.",
                        "sbg:toolDefaultValue": "ALL",
                        "label": "Interval Merging",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "interval_merging",
                                "symbols": [
                                    "ALL",
                                    "OVERLAPPING_ONLY"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "Input Files",
                        "sbg:fileTypes": "KEY, LICENSE",
                        "id": "#gatk_key",
                        "inputBinding": {
                            "itemSeparator": " ",
                            "prefix": "--gatk_key",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "GATK Key file. Required if running with -et NO_ET. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.",
                        "sbg:altPrefix": "-K",
                        "required": false,
                        "label": "Gatk key",
                        "type": [
                            "null",
                            "File"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-fixMisencodedQuals",
                        "id": "#fix_misencoded_quals",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "-fixMisencodedQuals",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Fix mis-encoded base quality scores.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Fix Misencoded Quals",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "Input Files",
                        "sbg:fileTypes": "TXT, BED, VCF",
                        "id": "#exclude_intervals",
                        "inputBinding": {
                            "itemSeparator": " ",
                            "prefix": "--excludeIntervals",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "One or more genomic intervals to exclude from processing. Can be an .intervals file or a rod file.",
                        "sbg:altPrefix": "-XL",
                        "required": false,
                        "label": "Exclude Intervals",
                        "type": [
                            "null",
                            "File"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-EOQ",
                        "id": "#emit_original_quals",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--emit_original_quals",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "If true, enables printing of the OQ tag with the original base qualities (with -BQSR).",
                        "sbg:toolDefaultValue": "False",
                        "label": "Emit Original Quals",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-dt",
                        "id": "#downsampling_type",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--downsampling_type",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Type of reads downsampling to employ at a given locus. Reads will be selected randomly to be removed from the pile based on the method described here.",
                        "sbg:toolDefaultValue": "",
                        "label": "Downsampling Type",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "downsampling_type",
                                "symbols": [
                                    "NONE",
                                    "ALL_READS",
                                    "BY_SAMPLE"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-dfrac",
                        "id": "#downsample_to_fraction",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--downsample_to_fraction",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Fraction [0.0-1.0] of reads to downsample to.",
                        "sbg:toolDefaultValue": "",
                        "label": "Downsample to Fraction",
                        "type": [
                            "null",
                            "float"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-dcov",
                        "id": "#downsample_to_coverage",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--downsample_to_coverage",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Coverage to downsample to at any given locus; note that downsampled reads are randomly selected from all possible reads at a locus. For non-locus-based traversals (eg., ReadWalkers), this sets the maximum number of reads at each alignment start position.",
                        "sbg:toolDefaultValue": "",
                        "label": "Downsample to Coverage",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": null,
                        "id": "#disable_radnomization",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--disableRandomization",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Completely eliminates randomization from nondeterministic methods. To be used mostly in the testing framework where dynamic parallelism can result in differing numbers of calls to the generator.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Disable Randomization",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-DIQ",
                        "id": "#disable_indel_quals",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--disable_indel_quals",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "If 'true', disables printing of base insertion and base deletion tags (with -BQSR). Turns off printing of the base insertion and base deletion tags when using the -BQSR argument and only the base substitution qualities will be produced.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Disable Indel Quals",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-DBQ",
                        "id": "#default_base_qualities",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--defaultBaseQualities",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "If reads are missing some or all base quality scores, this value will be used for all base quality scores.",
                        "sbg:toolDefaultValue": "-1",
                        "label": "Default Base Qualities",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "Execution",
                        "sbg:altPrefix": null,
                        "id": "#cpu_per_job",
                        "description": "Number of CPUs per job.",
                        "sbg:toolDefaultValue": "1",
                        "label": "CPU per job",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "Input Files",
                        "sbg:fileTypes": "GRP",
                        "id": "#bqsr",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--BQSR",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "The input covariates table file which enables on-the-fly base quality score recalibration.",
                        "sbg:altPrefix": null,
                        "required": false,
                        "label": "BQSR Table",
                        "type": [
                            "null",
                            {
                                "type": "array",
                                "items": "File"
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-baqGOP",
                        "id": "#baq_gap_open_penalty",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--baqGapOpenPenalty",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "BAQ gap open penalty (Phred Scaled). Default value is 40. 30 is perhaps better for whole genome call sets.",
                        "sbg:toolDefaultValue": "40.0",
                        "label": "BAQ Gap Open Penalty",
                        "type": [
                            "null",
                            "float"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-baq",
                        "id": "#baq",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--baq",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Type of BAQ calculation to apply in the engine.",
                        "sbg:toolDefaultValue": "OFF",
                        "label": "BAQ Calculation Type",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "baq",
                                "symbols": [
                                    "OFF",
                                    "CALCULATE_AS_NECESSARY",
                                    "RECALCULATE"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "--allow_potentially_misencoded_quality_scores",
                        "id": "#allow_potentailly_misencoded_quals",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "-allowPotentiallyMisencodedQuals",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Do not fail when encountered base qualities that are too high and seemingly indicate a problem with the base quality encoding of the BAM file.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Allow Potentially Misencoded Quals",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    }
                ],
                "sbg:job": {
                    "allocatedResources": {
                        "mem": 2048,
                        "cpu": 1
                    },
                    "inputs": {
                        "memory_overhead_per_job": 0,
                        "read_filter": [
                            "MappingQualityZero"
                        ],
                        "intervals_file": [
                            {
                                "size": 0,
                                "class": "File",
                                "secondaryFiles": [],
                                "path": "/path/to/intervals_file-1.ext"
                            },
                            {
                                "size": 0,
                                "class": "File",
                                "secondaryFiles": [],
                                "path": "/path/to/intervals_file-2.ext"
                            }
                        ],
                        "reads": [
                            {
                                "metadata": {
                                    "intervals_file": "3333.intervals"
                                },
                                "path": "/folder/input1.bam",
                                "secondaryFiles": []
                            }
                        ],
                        "reference": {
                            "path": "/folder/reference.fasta"
                        }
                    }
                },
                "sbg:createdBy": "bix-demo",
                "sbg:revisionsInfo": [
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1450911393,
                        "sbg:revision": 0,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1450911394,
                        "sbg:revision": 1,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1450911395,
                        "sbg:revision": 2,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1450911396,
                        "sbg:revision": 3,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1450911397,
                        "sbg:revision": 4,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1450911398,
                        "sbg:revision": 5,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1450911399,
                        "sbg:revision": 6,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1461854096,
                        "sbg:revision": 7,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1461861365,
                        "sbg:revision": 8,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:revisionNotes": "metadata scatter.",
                        "sbg:modifiedOn": 1472656041,
                        "sbg:revision": 9,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": "intervals_file - stage link",
                        "sbg:modifiedOn": 1472744347,
                        "sbg:revision": 10,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": "Added support for single bam processing without intervals",
                        "sbg:modifiedOn": 1476371132,
                        "sbg:revision": 11,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": "Read_filter names corrected (\"Filter\" string removed)",
                        "sbg:modifiedOn": 1476372560,
                        "sbg:revision": 12,
                        "sbg:modifiedBy": "vladimirk"
                    }
                ],
                "sbg:toolAuthor": "Broad Institute",
                "sbg:contributors": [
                    "vladimirk",
                    "bix-demo"
                ],
                "outputs": [
                    {
                        "sbg:fileTypes": "BAM, SAM",
                        "id": "#recalibrated_bam",
                        "outputBinding": {
                            "glob": "*.bam",
                            "sbg:metadata": {},
                            "sbg:inheritMetadataFrom": "#reads",
                            "secondaryFiles": [
                                ".bai",
                                "^.bai"
                            ]
                        },
                        "description": "Write output to this BAM filename.",
                        "type": [
                            "File"
                        ],
                        "label": "Recalibrated BAM"
                    }
                ],
                "sbg:toolkit": "GATK"
            },
            "outputs": [
                {
                    "id": "#GATK_PrintReads.recalibrated_bam"
                }
            ],
            "inputs": [
                {
                    "id": "#GATK_PrintReads.validation_strictness"
                },
                {
                    "id": "#GATK_PrintReads.use_original_qualities"
                },
                {
                    "id": "#GATK_PrintReads.use_legacy_downsampler"
                },
                {
                    "id": "#GATK_PrintReads.unsafe"
                },
                {
                    "id": "#GATK_PrintReads.threads_per_job",
                    "default": 4
                },
                {
                    "id": "#GATK_PrintReads.tag"
                },
                {
                    "id": "#GATK_PrintReads.simplify"
                },
                {
                    "id": "#GATK_PrintReads.sample_name"
                },
                {
                    "id": "#GATK_PrintReads.sample_file"
                },
                {
                    "id": "#GATK_PrintReads.remove_program_records"
                },
                {
                    "id": "#GATK_PrintReads.reference",
                    "source": [
                        "#SBG_FASTA_Indices.fasta_reference"
                    ]
                },
                {
                    "id": "#GATK_PrintReads.reads",
                    "source": [
                        "#GATK_IndelRealigner.realigned_bam_file"
                    ]
                },
                {
                    "id": "#GATK_PrintReads.read_group_black_list"
                },
                {
                    "id": "#GATK_PrintReads.read_group"
                },
                {
                    "id": "#GATK_PrintReads.read_filter"
                },
                {
                    "id": "#GATK_PrintReads.preserve_qscores_less_than"
                },
                {
                    "id": "#GATK_PrintReads.platform"
                },
                {
                    "id": "#GATK_PrintReads.phone_home"
                },
                {
                    "id": "#GATK_PrintReads.pedigree_validation_type"
                },
                {
                    "id": "#GATK_PrintReads.pedigree_string"
                },
                {
                    "id": "#GATK_PrintReads.number"
                },
                {
                    "id": "#GATK_PrintReads.non_deterministic_random_seed"
                },
                {
                    "id": "#GATK_PrintReads.memory_per_job",
                    "default": 2048
                },
                {
                    "id": "#GATK_PrintReads.memory_overhead_per_job",
                    "default": 64
                },
                {
                    "id": "#GATK_PrintReads.max_runtime_units"
                },
                {
                    "id": "#GATK_PrintReads.max_runtime"
                },
                {
                    "id": "#GATK_PrintReads.keep_program_records"
                },
                {
                    "id": "#GATK_PrintReads.intervals_file",
                    "source": [
                        "#SBG_Prepare_Intervals.intervals"
                    ]
                },
                {
                    "id": "#GATK_PrintReads.intervals"
                },
                {
                    "id": "#GATK_PrintReads.interval_set_rule"
                },
                {
                    "id": "#GATK_PrintReads.interval_padding"
                },
                {
                    "id": "#GATK_PrintReads.interval_merging"
                },
                {
                    "id": "#GATK_PrintReads.gatk_key"
                },
                {
                    "id": "#GATK_PrintReads.fix_misencoded_quals"
                },
                {
                    "id": "#GATK_PrintReads.exclude_intervals"
                },
                {
                    "id": "#GATK_PrintReads.emit_original_quals"
                },
                {
                    "id": "#GATK_PrintReads.downsampling_type"
                },
                {
                    "id": "#GATK_PrintReads.downsample_to_fraction"
                },
                {
                    "id": "#GATK_PrintReads.downsample_to_coverage"
                },
                {
                    "id": "#GATK_PrintReads.disable_radnomization"
                },
                {
                    "id": "#GATK_PrintReads.disable_indel_quals"
                },
                {
                    "id": "#GATK_PrintReads.default_base_qualities"
                },
                {
                    "id": "#GATK_PrintReads.cpu_per_job",
                    "default": 1
                },
                {
                    "id": "#GATK_PrintReads.bqsr",
                    "source": [
                        "#GATK_BaseRecalibrator.bqsr"
                    ]
                },
                {
                    "id": "#GATK_PrintReads.baq_gap_open_penalty"
                },
                {
                    "id": "#GATK_PrintReads.baq"
                },
                {
                    "id": "#GATK_PrintReads.allow_potentailly_misencoded_quals"
                }
            ],
            "sbg:x": 1768.3340922859265
        },
        {
            "id": "#SBG_Prepare_VQSR_dbSNP",
            "sbg:y": 676.0938190788879,
            "run": {
                "sbg:modifiedOn": 1476451888,
                "sbg:id": "bix-demo/sbgtools-demo/sbg-prepare-gatk-variantrecalibrator-resource/4",
                "sbg:toolkitVersion": "",
                "sbg:cmdPreview": "echo Preparing VQSR Resources",
                "requirements": [
                    {
                        "requirements": [
                            {
                                "class": "DockerRequirement",
                                "dockerPull": "rabix/js-engine"
                            }
                        ],
                        "class": "ExpressionEngineRequirement",
                        "id": "#cwl-js-engine"
                    }
                ],
                "successCodes": [],
                "sbg:sbgMaintained": false,
                "sbg:categories": [
                    "VCF-Processing"
                ],
                "sbg:project": "bix-demo/sbgtools-demo",
                "sbg:image_url": null,
                "stdin": "",
                "id": "bix-demo/sbgtools-demo/sbg-prepare-gatk-variantrecalibrator-resource/4",
                "sbg:revision": 4,
                "sbg:createdOn": 1461613037,
                "sbg:revisionNotes": "command line echo",
                "hints": [
                    {
                        "dockerImageId": "",
                        "class": "DockerRequirement",
                        "dockerPull": "ubuntu:14.04"
                    },
                    {
                        "value": 1000,
                        "class": "sbg:MemRequirement"
                    },
                    {
                        "value": 1,
                        "class": "sbg:CPURequirement"
                    }
                ],
                "label": "SBG Prepare VQSR dbSNP",
                "arguments": [],
                "stdout": "",
                "baseCommand": [
                    "echo",
                    "Preparing",
                    "VQSR",
                    "Resources"
                ],
                "temporaryFailCodes": [],
                "sbg:latestRevision": 4,
                "y": 676.0938190788879,
                "sbg:validationErrors": [],
                "sbg:modifiedBy": "bogdang",
                "cwlVersion": "sbg:draft-2",
                "sbg:license": "Apache License 2.0",
                "description": "Prepare VQSR resource is a tool for preparing resource datasets and arguments to use with VQSR. It sets a metadata for a list of sites for which to apply a prior probability of being correct, but which aren't used by the algorithm (training and truth sets are required to run).",
                "class": "CommandLineTool",
                "x": 1965.0002025365889,
                "inputs": [
                    {
                        "sbg:category": "",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "label": "Truth",
                        "id": "#truth",
                        "description": "Truth."
                    },
                    {
                        "sbg:category": "",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "label": "Training",
                        "id": "#training",
                        "description": "Training."
                    },
                    {
                        "sbg:category": "",
                        "type": [
                            "float"
                        ],
                        "label": "Prior",
                        "id": "#prior",
                        "description": "Prior."
                    },
                    {
                        "sbg:category": "",
                        "type": [
                            "string"
                        ],
                        "label": "Label",
                        "id": "#label",
                        "description": "Label."
                    },
                    {
                        "sbg:category": "",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "label": "Known",
                        "id": "#known",
                        "description": "Known."
                    },
                    {
                        "type": [
                            "null",
                            "File"
                        ],
                        "sbg:fileTypes": "VCF",
                        "id": "#input_vcf",
                        "description": "Input VCF file for GATK VariantRecalibrator Resources.",
                        "required": false,
                        "sbg:stageInput": "link",
                        "label": "VCF File"
                    }
                ],
                "sbg:job": {
                    "allocatedResources": {
                        "mem": 1000,
                        "cpu": 1
                    },
                    "inputs": {
                        "prior": 12,
                        "known": true,
                        "label": "aaa",
                        "truth": true,
                        "input_vcf": {
                            "path": "vcf"
                        }
                    }
                },
                "sbg:createdBy": "djordje_klisic",
                "sbg:revisionsInfo": [
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1461613037,
                        "sbg:revision": 0,
                        "sbg:modifiedBy": "djordje_klisic"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1461613070,
                        "sbg:revision": 1,
                        "sbg:modifiedBy": "djordje_klisic"
                    },
                    {
                        "sbg:revisionNotes": "VCF file type and required set for input_vcf.",
                        "sbg:modifiedOn": 1471362399,
                        "sbg:revision": 2,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": "VCF_input not required.",
                        "sbg:modifiedOn": 1472512980,
                        "sbg:revision": 3,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": "command line echo",
                        "sbg:modifiedOn": 1476451888,
                        "sbg:revision": 4,
                        "sbg:modifiedBy": "bogdang"
                    }
                ],
                "sbg:toolAuthor": "Seven Bridges Genomics",
                "sbg:contributors": [
                    "djordje_klisic",
                    "vladimirk",
                    "bogdang"
                ],
                "outputs": [
                    {
                        "type": [
                            "null",
                            "File"
                        ],
                        "label": "Prepared VCF",
                        "outputBinding": {
                            "glob": "*.vcf",
                            "sbg:metadata": {
                                "resources": {
                                    "script": "{  \n  if($job.inputs.known){known = 'true'}else{known = 'false'}\n  if($job.inputs.training){training = 'true'}else{training = 'false'}\n  if($job.inputs.truth){truth = 'true'}else{truth = 'false'}\n\n  res = ['-resource:' + $job.inputs.label,\n         'known=' + known,\n         'training=' + training,\n         'truth=' + truth,\n         'prior=' + $job.inputs.prior\n  ]\n  return res.join(\",\")\n}\n\n\n ",
                                    "engine": "#cwl-js-engine",
                                    "class": "Expression"
                                }
                            },
                            "sbg:inheritMetadataFrom": "#input_vcf"
                        },
                        "description": "Prepared VCF file for GATK VariantRecalibrator",
                        "id": "#output_vcf"
                    }
                ],
                "sbg:toolkit": "SBGTools"
            },
            "outputs": [
                {
                    "id": "#SBG_Prepare_VQSR_dbSNP.output_vcf"
                }
            ],
            "inputs": [
                {
                    "id": "#SBG_Prepare_VQSR_dbSNP.truth",
                    "default": true
                },
                {
                    "id": "#SBG_Prepare_VQSR_dbSNP.training",
                    "default": true
                },
                {
                    "id": "#SBG_Prepare_VQSR_dbSNP.prior",
                    "default": 2
                },
                {
                    "id": "#SBG_Prepare_VQSR_dbSNP.label",
                    "default": "dbsnp"
                },
                {
                    "id": "#SBG_Prepare_VQSR_dbSNP.known"
                },
                {
                    "id": "#SBG_Prepare_VQSR_dbSNP.input_vcf",
                    "source": [
                        "#known_sites_1"
                    ]
                }
            ],
            "sbg:x": 1965.0002025365889
        },
        {
            "id": "#SBG_Prepare_VQSR_Mills",
            "sbg:y": 389.42713929919915,
            "run": {
                "sbg:modifiedOn": 1476451888,
                "sbg:id": "bix-demo/sbgtools-demo/sbg-prepare-gatk-variantrecalibrator-resource/4",
                "sbg:toolkitVersion": "",
                "sbg:cmdPreview": "echo Preparing VQSR Resources",
                "requirements": [
                    {
                        "requirements": [
                            {
                                "class": "DockerRequirement",
                                "dockerPull": "rabix/js-engine"
                            }
                        ],
                        "class": "ExpressionEngineRequirement",
                        "id": "#cwl-js-engine"
                    }
                ],
                "successCodes": [],
                "sbg:sbgMaintained": false,
                "sbg:categories": [
                    "VCF-Processing"
                ],
                "sbg:project": "bix-demo/sbgtools-demo",
                "sbg:image_url": null,
                "stdin": "",
                "id": "bix-demo/sbgtools-demo/sbg-prepare-gatk-variantrecalibrator-resource/4",
                "sbg:revision": 4,
                "sbg:createdOn": 1461613037,
                "sbg:revisionNotes": "command line echo",
                "hints": [
                    {
                        "dockerImageId": "",
                        "class": "DockerRequirement",
                        "dockerPull": "ubuntu:14.04"
                    },
                    {
                        "value": 1000,
                        "class": "sbg:MemRequirement"
                    },
                    {
                        "value": 1,
                        "class": "sbg:CPURequirement"
                    }
                ],
                "label": "SBG Prepare VQSR Mills",
                "arguments": [],
                "stdout": "",
                "baseCommand": [
                    "echo",
                    "Preparing",
                    "VQSR",
                    "Resources"
                ],
                "temporaryFailCodes": [],
                "sbg:latestRevision": 4,
                "y": 389.42713929919915,
                "sbg:validationErrors": [],
                "sbg:modifiedBy": "bogdang",
                "cwlVersion": "sbg:draft-2",
                "sbg:license": "Apache License 2.0",
                "description": "Prepare VQSR resource is a tool for preparing resource datasets and arguments to use with VQSR. It sets a metadata for a list of sites for which to apply a prior probability of being correct, but which aren't used by the algorithm (training and truth sets are required to run).",
                "class": "CommandLineTool",
                "x": 2576.6670919921808,
                "inputs": [
                    {
                        "sbg:category": "",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "label": "Truth",
                        "id": "#truth",
                        "description": "Truth."
                    },
                    {
                        "sbg:category": "",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "label": "Training",
                        "id": "#training",
                        "description": "Training."
                    },
                    {
                        "sbg:category": "",
                        "type": [
                            "float"
                        ],
                        "label": "Prior",
                        "id": "#prior",
                        "description": "Prior."
                    },
                    {
                        "sbg:category": "",
                        "type": [
                            "string"
                        ],
                        "label": "Label",
                        "id": "#label",
                        "description": "Label."
                    },
                    {
                        "sbg:category": "",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "label": "Known",
                        "id": "#known",
                        "description": "Known."
                    },
                    {
                        "type": [
                            "null",
                            "File"
                        ],
                        "sbg:fileTypes": "VCF",
                        "id": "#input_vcf",
                        "description": "Input VCF file for GATK VariantRecalibrator Resources.",
                        "required": false,
                        "sbg:stageInput": "link",
                        "label": "VCF File"
                    }
                ],
                "sbg:job": {
                    "allocatedResources": {
                        "mem": 1000,
                        "cpu": 1
                    },
                    "inputs": {
                        "prior": 12,
                        "known": true,
                        "label": "aaa",
                        "truth": true,
                        "input_vcf": {
                            "path": "vcf"
                        }
                    }
                },
                "sbg:createdBy": "djordje_klisic",
                "sbg:revisionsInfo": [
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1461613037,
                        "sbg:revision": 0,
                        "sbg:modifiedBy": "djordje_klisic"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1461613070,
                        "sbg:revision": 1,
                        "sbg:modifiedBy": "djordje_klisic"
                    },
                    {
                        "sbg:revisionNotes": "VCF file type and required set for input_vcf.",
                        "sbg:modifiedOn": 1471362399,
                        "sbg:revision": 2,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": "VCF_input not required.",
                        "sbg:modifiedOn": 1472512980,
                        "sbg:revision": 3,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": "command line echo",
                        "sbg:modifiedOn": 1476451888,
                        "sbg:revision": 4,
                        "sbg:modifiedBy": "bogdang"
                    }
                ],
                "sbg:toolAuthor": "Seven Bridges Genomics",
                "sbg:contributors": [
                    "djordje_klisic",
                    "vladimirk",
                    "bogdang"
                ],
                "outputs": [
                    {
                        "type": [
                            "null",
                            "File"
                        ],
                        "label": "Prepared VCF",
                        "outputBinding": {
                            "glob": "*.vcf",
                            "sbg:metadata": {
                                "resources": {
                                    "script": "{  \n  if($job.inputs.known){known = 'true'}else{known = 'false'}\n  if($job.inputs.training){training = 'true'}else{training = 'false'}\n  if($job.inputs.truth){truth = 'true'}else{truth = 'false'}\n\n  res = ['-resource:' + $job.inputs.label,\n         'known=' + known,\n         'training=' + training,\n         'truth=' + truth,\n         'prior=' + $job.inputs.prior\n  ]\n  return res.join(\",\")\n}\n\n\n ",
                                    "engine": "#cwl-js-engine",
                                    "class": "Expression"
                                }
                            },
                            "sbg:inheritMetadataFrom": "#input_vcf"
                        },
                        "description": "Prepared VCF file for GATK VariantRecalibrator",
                        "id": "#output_vcf"
                    }
                ],
                "sbg:toolkit": "SBGTools"
            },
            "outputs": [
                {
                    "id": "#SBG_Prepare_VQSR_Mills.output_vcf"
                }
            ],
            "inputs": [
                {
                    "id": "#SBG_Prepare_VQSR_Mills.truth",
                    "default": true
                },
                {
                    "id": "#SBG_Prepare_VQSR_Mills.training",
                    "default": true
                },
                {
                    "id": "#SBG_Prepare_VQSR_Mills.prior",
                    "default": 12
                },
                {
                    "id": "#SBG_Prepare_VQSR_Mills.label",
                    "default": "mills"
                },
                {
                    "id": "#SBG_Prepare_VQSR_Mills.known",
                    "default": true
                },
                {
                    "id": "#SBG_Prepare_VQSR_Mills.input_vcf",
                    "source": [
                        "#input_vcf_3"
                    ]
                }
            ],
            "sbg:x": 2576.6670919921808
        },
        {
            "id": "#SBG_Prepare_VQSR_1000G",
            "sbg:y": -147.23963419596365,
            "run": {
                "sbg:modifiedOn": 1476451888,
                "sbg:id": "bix-demo/sbgtools-demo/sbg-prepare-gatk-variantrecalibrator-resource/4",
                "sbg:toolkitVersion": "",
                "sbg:cmdPreview": "echo Preparing VQSR Resources",
                "requirements": [
                    {
                        "requirements": [
                            {
                                "class": "DockerRequirement",
                                "dockerPull": "rabix/js-engine"
                            }
                        ],
                        "class": "ExpressionEngineRequirement",
                        "id": "#cwl-js-engine"
                    }
                ],
                "successCodes": [],
                "sbg:sbgMaintained": false,
                "sbg:categories": [
                    "VCF-Processing"
                ],
                "sbg:project": "bix-demo/sbgtools-demo",
                "sbg:image_url": null,
                "stdin": "",
                "id": "bix-demo/sbgtools-demo/sbg-prepare-gatk-variantrecalibrator-resource/4",
                "sbg:revision": 4,
                "sbg:createdOn": 1461613037,
                "sbg:revisionNotes": "command line echo",
                "hints": [
                    {
                        "dockerImageId": "",
                        "class": "DockerRequirement",
                        "dockerPull": "ubuntu:14.04"
                    },
                    {
                        "value": 1000,
                        "class": "sbg:MemRequirement"
                    },
                    {
                        "value": 1,
                        "class": "sbg:CPURequirement"
                    }
                ],
                "label": "SBG Prepare VQSR 1000G",
                "arguments": [],
                "stdout": "",
                "baseCommand": [
                    "echo",
                    "Preparing",
                    "VQSR",
                    "Resources"
                ],
                "temporaryFailCodes": [],
                "sbg:latestRevision": 4,
                "y": -147.23963419596365,
                "sbg:validationErrors": [],
                "sbg:modifiedBy": "bogdang",
                "cwlVersion": "sbg:draft-2",
                "sbg:license": "Apache License 2.0",
                "description": "Prepare VQSR resource is a tool for preparing resource datasets and arguments to use with VQSR. It sets a metadata for a list of sites for which to apply a prior probability of being correct, but which aren't used by the algorithm (training and truth sets are required to run).",
                "class": "CommandLineTool",
                "x": 2376.6672770182304,
                "inputs": [
                    {
                        "sbg:category": "",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "label": "Truth",
                        "id": "#truth",
                        "description": "Truth."
                    },
                    {
                        "sbg:category": "",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "label": "Training",
                        "id": "#training",
                        "description": "Training."
                    },
                    {
                        "sbg:category": "",
                        "type": [
                            "float"
                        ],
                        "label": "Prior",
                        "id": "#prior",
                        "description": "Prior."
                    },
                    {
                        "sbg:category": "",
                        "type": [
                            "string"
                        ],
                        "label": "Label",
                        "id": "#label",
                        "description": "Label."
                    },
                    {
                        "sbg:category": "",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "label": "Known",
                        "id": "#known",
                        "description": "Known."
                    },
                    {
                        "type": [
                            "null",
                            "File"
                        ],
                        "sbg:fileTypes": "VCF",
                        "id": "#input_vcf",
                        "description": "Input VCF file for GATK VariantRecalibrator Resources.",
                        "required": false,
                        "sbg:stageInput": "link",
                        "label": "VCF File"
                    }
                ],
                "sbg:job": {
                    "allocatedResources": {
                        "mem": 1000,
                        "cpu": 1
                    },
                    "inputs": {
                        "prior": 12,
                        "known": true,
                        "label": "aaa",
                        "truth": true,
                        "input_vcf": {
                            "path": "vcf"
                        }
                    }
                },
                "sbg:createdBy": "djordje_klisic",
                "sbg:revisionsInfo": [
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1461613037,
                        "sbg:revision": 0,
                        "sbg:modifiedBy": "djordje_klisic"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1461613070,
                        "sbg:revision": 1,
                        "sbg:modifiedBy": "djordje_klisic"
                    },
                    {
                        "sbg:revisionNotes": "VCF file type and required set for input_vcf.",
                        "sbg:modifiedOn": 1471362399,
                        "sbg:revision": 2,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": "VCF_input not required.",
                        "sbg:modifiedOn": 1472512980,
                        "sbg:revision": 3,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": "command line echo",
                        "sbg:modifiedOn": 1476451888,
                        "sbg:revision": 4,
                        "sbg:modifiedBy": "bogdang"
                    }
                ],
                "sbg:toolAuthor": "Seven Bridges Genomics",
                "sbg:contributors": [
                    "djordje_klisic",
                    "vladimirk",
                    "bogdang"
                ],
                "outputs": [
                    {
                        "type": [
                            "null",
                            "File"
                        ],
                        "label": "Prepared VCF",
                        "outputBinding": {
                            "glob": "*.vcf",
                            "sbg:metadata": {
                                "resources": {
                                    "script": "{  \n  if($job.inputs.known){known = 'true'}else{known = 'false'}\n  if($job.inputs.training){training = 'true'}else{training = 'false'}\n  if($job.inputs.truth){truth = 'true'}else{truth = 'false'}\n\n  res = ['-resource:' + $job.inputs.label,\n         'known=' + known,\n         'training=' + training,\n         'truth=' + truth,\n         'prior=' + $job.inputs.prior\n  ]\n  return res.join(\",\")\n}\n\n\n ",
                                    "engine": "#cwl-js-engine",
                                    "class": "Expression"
                                }
                            },
                            "sbg:inheritMetadataFrom": "#input_vcf"
                        },
                        "description": "Prepared VCF file for GATK VariantRecalibrator",
                        "id": "#output_vcf"
                    }
                ],
                "sbg:toolkit": "SBGTools"
            },
            "outputs": [
                {
                    "id": "#SBG_Prepare_VQSR_1000G.output_vcf"
                }
            ],
            "inputs": [
                {
                    "id": "#SBG_Prepare_VQSR_1000G.truth",
                    "default": true
                },
                {
                    "id": "#SBG_Prepare_VQSR_1000G.training",
                    "default": true
                },
                {
                    "id": "#SBG_Prepare_VQSR_1000G.prior",
                    "default": 10
                },
                {
                    "id": "#SBG_Prepare_VQSR_1000G.label",
                    "default": "1000G"
                },
                {
                    "id": "#SBG_Prepare_VQSR_1000G.known"
                },
                {
                    "id": "#SBG_Prepare_VQSR_1000G.input_vcf",
                    "source": [
                        "#input_vcf_2"
                    ]
                }
            ],
            "sbg:x": 2376.6672770182304
        },
        {
            "id": "#SBG_Prepare_VQSR_HapMap",
            "sbg:y": -232.23963419596367,
            "run": {
                "sbg:modifiedOn": 1476451888,
                "sbg:id": "bix-demo/sbgtools-demo/sbg-prepare-gatk-variantrecalibrator-resource/4",
                "sbg:toolkitVersion": "",
                "sbg:cmdPreview": "echo Preparing VQSR Resources",
                "requirements": [
                    {
                        "requirements": [
                            {
                                "class": "DockerRequirement",
                                "dockerPull": "rabix/js-engine"
                            }
                        ],
                        "class": "ExpressionEngineRequirement",
                        "id": "#cwl-js-engine"
                    }
                ],
                "successCodes": [],
                "sbg:sbgMaintained": false,
                "sbg:categories": [
                    "VCF-Processing"
                ],
                "sbg:project": "bix-demo/sbgtools-demo",
                "sbg:image_url": null,
                "stdin": "",
                "id": "bix-demo/sbgtools-demo/sbg-prepare-gatk-variantrecalibrator-resource/4",
                "sbg:revision": 4,
                "sbg:createdOn": 1461613037,
                "sbg:revisionNotes": "command line echo",
                "hints": [
                    {
                        "dockerImageId": "",
                        "class": "DockerRequirement",
                        "dockerPull": "ubuntu:14.04"
                    },
                    {
                        "value": 1000,
                        "class": "sbg:MemRequirement"
                    },
                    {
                        "value": 1,
                        "class": "sbg:CPURequirement"
                    }
                ],
                "label": "SBG Prepare VQSR HapMap",
                "arguments": [],
                "stdout": "",
                "baseCommand": [
                    "echo",
                    "Preparing",
                    "VQSR",
                    "Resources"
                ],
                "temporaryFailCodes": [],
                "sbg:latestRevision": 4,
                "y": -232.23963419596367,
                "sbg:validationErrors": [],
                "sbg:modifiedBy": "bogdang",
                "cwlVersion": "sbg:draft-2",
                "sbg:license": "Apache License 2.0",
                "description": "Prepare VQSR resource is a tool for preparing resource datasets and arguments to use with VQSR. It sets a metadata for a list of sites for which to apply a prior probability of being correct, but which aren't used by the algorithm (training and truth sets are required to run).",
                "class": "CommandLineTool",
                "x": 2520.0005086263036,
                "inputs": [
                    {
                        "sbg:category": "",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "label": "Truth",
                        "id": "#truth",
                        "description": "Truth."
                    },
                    {
                        "sbg:category": "",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "label": "Training",
                        "id": "#training",
                        "description": "Training."
                    },
                    {
                        "sbg:category": "",
                        "type": [
                            "float"
                        ],
                        "label": "Prior",
                        "id": "#prior",
                        "description": "Prior."
                    },
                    {
                        "sbg:category": "",
                        "type": [
                            "string"
                        ],
                        "label": "Label",
                        "id": "#label",
                        "description": "Label."
                    },
                    {
                        "sbg:category": "",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "label": "Known",
                        "id": "#known",
                        "description": "Known."
                    },
                    {
                        "type": [
                            "null",
                            "File"
                        ],
                        "sbg:fileTypes": "VCF",
                        "id": "#input_vcf",
                        "description": "Input VCF file for GATK VariantRecalibrator Resources.",
                        "required": false,
                        "sbg:stageInput": "link",
                        "label": "VCF File"
                    }
                ],
                "sbg:job": {
                    "allocatedResources": {
                        "mem": 1000,
                        "cpu": 1
                    },
                    "inputs": {
                        "prior": 12,
                        "known": true,
                        "label": "aaa",
                        "truth": true,
                        "input_vcf": {
                            "path": "vcf"
                        }
                    }
                },
                "sbg:createdBy": "djordje_klisic",
                "sbg:revisionsInfo": [
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1461613037,
                        "sbg:revision": 0,
                        "sbg:modifiedBy": "djordje_klisic"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1461613070,
                        "sbg:revision": 1,
                        "sbg:modifiedBy": "djordje_klisic"
                    },
                    {
                        "sbg:revisionNotes": "VCF file type and required set for input_vcf.",
                        "sbg:modifiedOn": 1471362399,
                        "sbg:revision": 2,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": "VCF_input not required.",
                        "sbg:modifiedOn": 1472512980,
                        "sbg:revision": 3,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": "command line echo",
                        "sbg:modifiedOn": 1476451888,
                        "sbg:revision": 4,
                        "sbg:modifiedBy": "bogdang"
                    }
                ],
                "sbg:toolAuthor": "Seven Bridges Genomics",
                "sbg:contributors": [
                    "djordje_klisic",
                    "vladimirk",
                    "bogdang"
                ],
                "outputs": [
                    {
                        "type": [
                            "null",
                            "File"
                        ],
                        "label": "Prepared VCF",
                        "outputBinding": {
                            "glob": "*.vcf",
                            "sbg:metadata": {
                                "resources": {
                                    "script": "{  \n  if($job.inputs.known){known = 'true'}else{known = 'false'}\n  if($job.inputs.training){training = 'true'}else{training = 'false'}\n  if($job.inputs.truth){truth = 'true'}else{truth = 'false'}\n\n  res = ['-resource:' + $job.inputs.label,\n         'known=' + known,\n         'training=' + training,\n         'truth=' + truth,\n         'prior=' + $job.inputs.prior\n  ]\n  return res.join(\",\")\n}\n\n\n ",
                                    "engine": "#cwl-js-engine",
                                    "class": "Expression"
                                }
                            },
                            "sbg:inheritMetadataFrom": "#input_vcf"
                        },
                        "description": "Prepared VCF file for GATK VariantRecalibrator",
                        "id": "#output_vcf"
                    }
                ],
                "sbg:toolkit": "SBGTools"
            },
            "outputs": [
                {
                    "id": "#SBG_Prepare_VQSR_HapMap.output_vcf"
                }
            ],
            "inputs": [
                {
                    "id": "#SBG_Prepare_VQSR_HapMap.truth",
                    "default": true
                },
                {
                    "id": "#SBG_Prepare_VQSR_HapMap.training",
                    "default": true
                },
                {
                    "id": "#SBG_Prepare_VQSR_HapMap.prior",
                    "default": 15
                },
                {
                    "id": "#SBG_Prepare_VQSR_HapMap.label",
                    "default": "hapmap"
                },
                {
                    "id": "#SBG_Prepare_VQSR_HapMap.known"
                },
                {
                    "id": "#SBG_Prepare_VQSR_HapMap.input_vcf",
                    "source": [
                        "#input_vcf_1"
                    ]
                }
            ],
            "sbg:x": 2520.0005086263036
        },
        {
            "id": "#SBG_Prepare_VQSR_Omni",
            "sbg:y": -325.5730056762697,
            "run": {
                "sbg:modifiedOn": 1476451888,
                "sbg:id": "bix-demo/sbgtools-demo/sbg-prepare-gatk-variantrecalibrator-resource/4",
                "sbg:toolkitVersion": "",
                "sbg:cmdPreview": "echo Preparing VQSR Resources",
                "requirements": [
                    {
                        "requirements": [
                            {
                                "class": "DockerRequirement",
                                "dockerPull": "rabix/js-engine"
                            }
                        ],
                        "class": "ExpressionEngineRequirement",
                        "id": "#cwl-js-engine"
                    }
                ],
                "successCodes": [],
                "sbg:sbgMaintained": false,
                "sbg:categories": [
                    "VCF-Processing"
                ],
                "sbg:project": "bix-demo/sbgtools-demo",
                "sbg:image_url": null,
                "stdin": "",
                "id": "bix-demo/sbgtools-demo/sbg-prepare-gatk-variantrecalibrator-resource/4",
                "sbg:revision": 4,
                "sbg:createdOn": 1461613037,
                "sbg:revisionNotes": "command line echo",
                "hints": [
                    {
                        "dockerImageId": "",
                        "class": "DockerRequirement",
                        "dockerPull": "ubuntu:14.04"
                    },
                    {
                        "value": 1000,
                        "class": "sbg:MemRequirement"
                    },
                    {
                        "value": 1,
                        "class": "sbg:CPURequirement"
                    }
                ],
                "label": "SBG Prepare VQSR Omni",
                "arguments": [],
                "stdout": "",
                "baseCommand": [
                    "echo",
                    "Preparing",
                    "VQSR",
                    "Resources"
                ],
                "temporaryFailCodes": [],
                "sbg:latestRevision": 4,
                "y": -325.5730056762697,
                "sbg:validationErrors": [],
                "sbg:modifiedBy": "bogdang",
                "cwlVersion": "sbg:draft-2",
                "sbg:license": "Apache License 2.0",
                "description": "Prepare VQSR resource is a tool for preparing resource datasets and arguments to use with VQSR. It sets a metadata for a list of sites for which to apply a prior probability of being correct, but which aren't used by the algorithm (training and truth sets are required to run).",
                "class": "CommandLineTool",
                "x": 2378.333638509116,
                "inputs": [
                    {
                        "sbg:category": "",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "label": "Truth",
                        "id": "#truth",
                        "description": "Truth."
                    },
                    {
                        "sbg:category": "",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "label": "Training",
                        "id": "#training",
                        "description": "Training."
                    },
                    {
                        "sbg:category": "",
                        "type": [
                            "float"
                        ],
                        "label": "Prior",
                        "id": "#prior",
                        "description": "Prior."
                    },
                    {
                        "sbg:category": "",
                        "type": [
                            "string"
                        ],
                        "label": "Label",
                        "id": "#label",
                        "description": "Label."
                    },
                    {
                        "sbg:category": "",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "label": "Known",
                        "id": "#known",
                        "description": "Known."
                    },
                    {
                        "type": [
                            "null",
                            "File"
                        ],
                        "sbg:fileTypes": "VCF",
                        "id": "#input_vcf",
                        "description": "Input VCF file for GATK VariantRecalibrator Resources.",
                        "required": false,
                        "sbg:stageInput": "link",
                        "label": "VCF File"
                    }
                ],
                "sbg:job": {
                    "allocatedResources": {
                        "mem": 1000,
                        "cpu": 1
                    },
                    "inputs": {
                        "prior": 12,
                        "known": true,
                        "label": "aaa",
                        "truth": true,
                        "input_vcf": {
                            "path": "vcf"
                        }
                    }
                },
                "sbg:createdBy": "djordje_klisic",
                "sbg:revisionsInfo": [
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1461613037,
                        "sbg:revision": 0,
                        "sbg:modifiedBy": "djordje_klisic"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1461613070,
                        "sbg:revision": 1,
                        "sbg:modifiedBy": "djordje_klisic"
                    },
                    {
                        "sbg:revisionNotes": "VCF file type and required set for input_vcf.",
                        "sbg:modifiedOn": 1471362399,
                        "sbg:revision": 2,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": "VCF_input not required.",
                        "sbg:modifiedOn": 1472512980,
                        "sbg:revision": 3,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": "command line echo",
                        "sbg:modifiedOn": 1476451888,
                        "sbg:revision": 4,
                        "sbg:modifiedBy": "bogdang"
                    }
                ],
                "sbg:toolAuthor": "Seven Bridges Genomics",
                "sbg:contributors": [
                    "djordje_klisic",
                    "vladimirk",
                    "bogdang"
                ],
                "outputs": [
                    {
                        "type": [
                            "null",
                            "File"
                        ],
                        "label": "Prepared VCF",
                        "outputBinding": {
                            "glob": "*.vcf",
                            "sbg:metadata": {
                                "resources": {
                                    "script": "{  \n  if($job.inputs.known){known = 'true'}else{known = 'false'}\n  if($job.inputs.training){training = 'true'}else{training = 'false'}\n  if($job.inputs.truth){truth = 'true'}else{truth = 'false'}\n\n  res = ['-resource:' + $job.inputs.label,\n         'known=' + known,\n         'training=' + training,\n         'truth=' + truth,\n         'prior=' + $job.inputs.prior\n  ]\n  return res.join(\",\")\n}\n\n\n ",
                                    "engine": "#cwl-js-engine",
                                    "class": "Expression"
                                }
                            },
                            "sbg:inheritMetadataFrom": "#input_vcf"
                        },
                        "description": "Prepared VCF file for GATK VariantRecalibrator",
                        "id": "#output_vcf"
                    }
                ],
                "sbg:toolkit": "SBGTools"
            },
            "outputs": [
                {
                    "id": "#SBG_Prepare_VQSR_Omni.output_vcf"
                }
            ],
            "inputs": [
                {
                    "id": "#SBG_Prepare_VQSR_Omni.truth",
                    "default": true
                },
                {
                    "id": "#SBG_Prepare_VQSR_Omni.training",
                    "default": true
                },
                {
                    "id": "#SBG_Prepare_VQSR_Omni.prior",
                    "default": 12
                },
                {
                    "id": "#SBG_Prepare_VQSR_Omni.label",
                    "default": "omni"
                },
                {
                    "id": "#SBG_Prepare_VQSR_Omni.known"
                },
                {
                    "id": "#SBG_Prepare_VQSR_Omni.input_vcf",
                    "source": [
                        "#input_vcf"
                    ]
                }
            ],
            "sbg:x": 2378.333638509116
        },
        {
            "id": "#GATK_IndelRealigner",
            "scatter": "#GATK_IndelRealigner.target_intervals",
            "sbg:y": 414.4274774032482,
            "run": {
                "sbg:modifiedOn": 1478713467,
                "sbg:id": "bix-demo/gatk-2-3-9-lite-demo/gatk-2-3-9-lite-indelrealigner/13",
                "sbg:toolkitVersion": "2.3.9 Lite",
                "sbg:cmdPreview": "java -Xmx2048M -jar /opt/GenomeAnalysisTKLite.jar --analysis_type IndelRealigner --reference_sequence /folder/reference.fasta --input_file /folder/input.bam --targetIntervals intervalListFromRTC.intervals --out input.realigned.bam",
                "sbg:revision": 13,
                "requirements": [
                    {
                        "requirements": [
                            {
                                "class": "DockerRequirement",
                                "dockerPull": "rabix/js-engine"
                            }
                        ],
                        "class": "ExpressionEngineRequirement",
                        "id": "#cwl-js-engine"
                    }
                ],
                "successCodes": [],
                "sbg:sbgMaintained": false,
                "sbg:categories": [
                    "Alignment"
                ],
                "sbg:project": "bix-demo/gatk-2-3-9-lite-demo",
                "sbg:image_url": null,
                "stdin": "",
                "id": "bix-demo/gatk-2-3-9-lite-demo/gatk-2-3-9-lite-indelrealigner/13",
                "sbg:links": [
                    {
                        "label": "Homepage",
                        "id": "https://www.broadinstitute.org/gatk/index.php"
                    },
                    {
                        "label": "Source code",
                        "id": "https://github.com/broadgsa/gatk-protected"
                    },
                    {
                        "label": "Wiki",
                        "id": "https://www.broadinstitute.org/gatk/guide/pdfdocs/GATK_GuideBook_2.3-9.pdf"
                    },
                    {
                        "label": "Download",
                        "id": "https://www.broadinstitute.org/gatk/download/auth?package=GATK-archive&version=2.3-9-ge5ebf34"
                    },
                    {
                        "label": "Publication",
                        "id": "https://www.broadinstitute.org/gatk/about/#in-the-literature"
                    },
                    {
                        "label": "Documentation",
                        "id": "https://www.broadinstitute.org/gatk/gatkdocs/org_broadinstitute_gatk_tools_walkers_indels_IndelRealigner.php"
                    }
                ],
                "sbg:createdOn": 1450911378,
                "sbg:revisionNotes": "Output name based on reads filename",
                "hints": [
                    {
                        "dockerImageId": "47510cb2da55",
                        "class": "DockerRequirement",
                        "dockerPull": "images.sbgenomics.com/stefanristeski/gatk2-lite:2.3-9"
                    },
                    {
                        "value": {
                            "script": "{\n  if($job.inputs.cpu_per_job){\n  \treturn $job.inputs.cpu_per_job\n  }\n\treturn 1\n}",
                            "engine": "#cwl-js-engine",
                            "class": "Expression"
                        },
                        "class": "sbg:CPURequirement"
                    },
                    {
                        "value": {
                            "script": "{\n  if($job.inputs.memory_per_job){\n    if($job.inputs.memory_overhead_per_job){\n    \treturn $job.inputs.memory_per_job + $job.inputs.memory_overhead_per_job\n    }\n    else\n  \t\treturn $job.inputs.memory_per_job\n  }\n  else if(!$job.inputs.memory_per_job && $job.inputs.memory_overhead_per_job){\n\t\treturn 2048 + $job.inputs.memory_overhead_per_job  \n  }\n  else\n  \treturn 2048\n}",
                            "engine": "#cwl-js-engine",
                            "class": "Expression"
                        },
                        "class": "sbg:MemRequirement"
                    }
                ],
                "label": "GATK IndelRealigner",
                "arguments": [
                    {
                        "prefix": "--out",
                        "separate": true,
                        "valueFrom": {
                            "script": "{\n  read_name = [].concat($job.inputs.reads)[0].path.replace(/^.*[\\\\\\/]/, '').split('.')\n  read_namebase = read_name.slice(0, read_name.length-1).join('.')\n  return read_namebase + '.realigned.bam'\n}",
                            "engine": "#cwl-js-engine",
                            "class": "Expression"
                        }
                    }
                ],
                "stdout": "",
                "baseCommand": [
                    "java",
                    {
                        "script": "{   \n  if($job.inputs.memory_per_job){\n    return '-Xmx'.concat($job.inputs.memory_per_job, 'M')\n  }   \n  \treturn '-Xmx2048M'\n}",
                        "engine": "#cwl-js-engine",
                        "class": "Expression"
                    },
                    "-jar",
                    "/opt/GenomeAnalysisTKLite.jar",
                    "--analysis_type",
                    "IndelRealigner"
                ],
                "temporaryFailCodes": [],
                "sbg:latestRevision": 13,
                "y": 414.4274774032482,
                "sbg:validationErrors": [],
                "sbg:modifiedBy": "bogdang",
                "cwlVersion": "sbg:draft-2",
                "sbg:license": "MIT License",
                "description": "Overview\n\nThe local realignment process is designed to consume one or more BAM files and to locally realign reads such that the number of mismatching bases is minimized across all the reads. In general, a large percent of regions requiring local realignment are due to the presence of an insertion or deletion (indels) in the individual's genome with respect to the reference genome. Such alignment artifacts result in many bases mismatching the reference near the misalignment, which are easily mistaken as SNPs. Moreover, since read mapping algorithms operate on each read independently, it is impossible to place reads on the reference genome such at mismatches are minimized across all reads. Consequently, even when some reads are correctly mapped with indels, reads covering the indel near just the start or end of the read are often incorrectly mapped with respect the true indel, also requiring realignment. Local realignment serves to transform regions with misalignments due to indels into clean reads containing a consensus indel suitable for standard variant discovery approaches. Unlike most mappers, this walker uses the full alignment context to determine whether an appropriate alternate reference (i.e. indel) exists. Following local realignment, the GATK tool Unified Genotyper can be used to sensitively and specifically identify indels.\n\nThere are 2 steps to the realignment process:\n\n1. Determining (small) suspicious intervals which are likely in need of realignment (see the RealignerTargetCreator tool)\n2. Running the realigner over those intervals (IndelRealigner)\nFor more details, see the indel realignment method documentation.\n\nInput\nOne or more aligned BAM files and optionally one or more lists of known indels.\n\nOutput\nA realigned version of your input BAM file(s).\n\nUsage example:\n java -jar GenomeAnalysisTK.jar \\\n   -T IndelRealigner \\\n   -R reference.fasta \\\n   -I input.bam \\\n   --known indels.vcf \\\n   -targetIntervals intervalListFromRTC.intervals \\\n   -o realignedBam.bam\n \nCaveats\n\nThe input BAM(s), reference, and known indel file(s) should be the same ones to be used for the IndelRealigner step.\nBecause reads produced from the 454 technology inherently contain false indels, the realigner will not work with them (or with reads from similar technologies).\nThis tool also ignores MQ0 reads and reads with consecutive indel operators in the CIGAR string.\n\n(IMPORTANT) Reference \".fasta\" Secondary Files\n\nTools in GATK that require a fasta reference file also look for the reference file's corresponding .fai (fasta index) and .dict (fasta dictionary) files. The fasta index file allows random access to reference bases and the dictionary file is a dictionary of the contig names and sizes contained within the fasta reference. These two secondary files are essential for GATK to work properly. To append these two files to your fasta reference please use the 'SBG FASTA Indices' tool within your GATK based workflow before using any of the GATK tools.",
                "class": "CommandLineTool",
                "x": 1421.667051858386,
                "inputs": [
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-S",
                        "id": "#validation_strictness",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--validation_strictness",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "How strict should we be with validation.",
                        "sbg:toolDefaultValue": "SILENT",
                        "label": "Validation Strictness",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "validation_strictness",
                                "symbols": [
                                    "SILENT",
                                    "LENIENT",
                                    "STRICT"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-OQ",
                        "id": "#use_original_qualities",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--useOriginalQualities",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "If set, use the original base quality scores from the OQ tag when present instead of the standard scores.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Use Original Qualities",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-use_legacy_downsampler",
                        "id": "#use_legacy_downsampler",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--use_legacy_downsampler",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Use the legacy downsampling implementation instead of the newer, less-tested implementation.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Use Legacy Downsampler",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-U",
                        "id": "#unsafe",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--unsafe",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "If set, enables unsafe operations: nothing will be checked at runtime.  For expert users only who know what they are doing.  We do not support usage of this argument.",
                        "sbg:toolDefaultValue": "",
                        "label": "Unsafe",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "unsafe",
                                "symbols": [
                                    "ALLOW_UNINDEXED_BAM",
                                    "ALLOW_UNSET_BAM_SORT_ORDER",
                                    "NO_READ_ORDER_VERIFICATION",
                                    "ALLOW_SEQ_DICT_INCOMPATIBILITY",
                                    "LENIENT_VCF_PROCESSING",
                                    "ALL"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "Input Files",
                        "sbg:fileTypes": "TXT,INTERVALS",
                        "id": "#target_intervals",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--targetIntervals",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Intervals file output from RealignerTargetCreator.",
                        "sbg:altPrefix": "-targetIntervals",
                        "required": true,
                        "label": "Target Intervals",
                        "type": [
                            "File"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-tag",
                        "id": "#tag",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--tag",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Arbitrary tag string to identify this GATK run as part of a group of runs, for later analysis.",
                        "sbg:toolDefaultValue": "",
                        "label": "Tag",
                        "type": [
                            "null",
                            "string"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-rpr",
                        "id": "#remove_program_records",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--remove_program_records",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Should we override the Walker's default and remove program records from the SAM header.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Remove Program Records",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "Input Files",
                        "sbg:fileTypes": "FASTA, FA",
                        "id": "#reference",
                        "inputBinding": {
                            "itemSeparator": " ",
                            "prefix": "--reference_sequence",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Reference Genome in FASTA format.",
                        "sbg:altPrefix": "-R",
                        "required": true,
                        "label": "Reference Genome",
                        "type": [
                            "File"
                        ]
                    },
                    {
                        "sbg:category": "Input Files",
                        "sbg:fileTypes": "SAM, BAM",
                        "id": "#reads",
                        "inputBinding": {
                            "secondaryFiles": [
                                ".bai"
                            ],
                            "itemSeparator": null,
                            "prefix": "--input_file",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Read sequences in BAM format.",
                        "sbg:altPrefix": "-I",
                        "required": true,
                        "label": "Read sequences",
                        "type": [
                            {
                                "type": "array",
                                "name": "reads",
                                "items": "File"
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-rgbl",
                        "id": "#read_group_black_list",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--read_group_black_list",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Filters out read groups matching : or a .txt file containing the filter strings one per line.",
                        "sbg:toolDefaultValue": "[]",
                        "label": "Read Group Black List",
                        "type": [
                            "null",
                            {
                                "type": "array",
                                "items": "string"
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-rf",
                        "id": "#read_filter",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--read_filter",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Specify filtration criteria to apply to each read individually.",
                        "sbg:toolDefaultValue": "[]",
                        "label": "Read Filter",
                        "type": [
                            "null",
                            {
                                "type": "array",
                                "items": {
                                    "type": "enum",
                                    "name": "read_filter",
                                    "symbols": [
                                        "BadCigarFilter",
                                        "BadMateFilter",
                                        "CountingFilteringIterator.CountingReadFilter",
                                        "DuplicateReadFilter",
                                        "FailsVendorQualityCheckFilter",
                                        "HCMappingQualityFilter",
                                        "LibraryReadFilter",
                                        "MalformedReadFilter",
                                        "MappingQualityFilter",
                                        "MappingQualityUnavailableFilter",
                                        "MappingQualityZeroFilter",
                                        "MateSameStrandFilter",
                                        "MaxInsertSizeFilter",
                                        "MissingReadGroupFilter",
                                        "NoOriginalQualityScoresFilter",
                                        "NotPrimaryAlignmentFilter",
                                        "OverclippedReadFilter",
                                        "Platform454Filter",
                                        "PlatformFilter",
                                        "PlatformUnitFilter",
                                        "ReadGroupBlackListFilter",
                                        "ReadLengthFilter",
                                        "ReadNameFilter",
                                        "ReadStrandFilter",
                                        "ReassignMappingQualityFilter",
                                        "ReassignOneMappingQualityFilter",
                                        "SampleFilter",
                                        "SingleReadGroupFilter",
                                        "UnmappedReadFilter"
                                    ]
                                }
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-preserveQ",
                        "id": "#preserve_qscores_less_than",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--preserve_qscores_less_than",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Bases with quality scores less than this threshold won't be recalibrated (with -BQSR).",
                        "sbg:toolDefaultValue": "6",
                        "label": "Preserve Qscores Less Than",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-et",
                        "id": "#phone_home",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--phone_home",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "What kind of GATK run report should we generate? STANDARD is the default, can be NO_ET so nothing is posted to the run repository. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.",
                        "sbg:toolDefaultValue": "STANDARD",
                        "label": "Phone Home",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "phone_home",
                                "symbols": [
                                    "NO_ET",
                                    "STANDARD"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-pedValidationType",
                        "id": "#pedigree_validation_type",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--pedigreeValidationType",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "How strict should we be in validating the pedigree information?.",
                        "sbg:toolDefaultValue": "STRICT",
                        "label": "Pedigree Validation Type",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "pedigree_validation_type",
                                "symbols": [
                                    "STRICT",
                                    "SILENT"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-pedString",
                        "id": "#pedigree_string",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--pedigreeString",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Pedigree string for samples.",
                        "sbg:toolDefaultValue": "[]",
                        "label": "Pedigree String",
                        "type": [
                            "null",
                            {
                                "type": "array",
                                "items": "string"
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-ndrs",
                        "id": "#non_deterministic_random_seed",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--nonDeterministicRandomSeed",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Makes the GATK behave non deterministically, that is, the random numbers generated will be different in every run.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Non Deterministic Random Seed",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "Indel Realigner",
                        "sbg:altPrefix": "-noTags",
                        "id": "#no_original_alignment_tags",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--noOriginalAlignmentTags",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Don't output the original cigar or alignment start tags for each realigned read in the output bam.",
                        "sbg:toolDefaultValue": "False",
                        "label": "No Original Alignment Tags",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "Execution",
                        "sbg:altPrefix": null,
                        "id": "#memory_per_job",
                        "description": "Amount of RAM memory in MB to be used per job.",
                        "sbg:toolDefaultValue": "2048",
                        "label": "Memory per job",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "Execution",
                        "sbg:toolDefaultValue": "0",
                        "id": "#memory_overhead_per_job",
                        "description": "Memory overhead per job. By default this parameter value is set to '0' (zero megabytes). This parameter value is added to the Memory per job parameter value. This results in the allocation of the sum total (Memory per job and Memory overhead per job) amount of memory per job. By default the memory per job parameter value is set to 2048 megabytes, unless specified otherwise.",
                        "type": [
                            "null",
                            "int"
                        ],
                        "label": "Memory overhead per job"
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-maxRuntimeUnits",
                        "id": "#max_runtime_units",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--maxRuntimeUnits",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "The TimeUnit for maxRuntime.",
                        "sbg:toolDefaultValue": "MINUTES",
                        "label": "Max Runtime Units",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "max_runtime_units",
                                "symbols": [
                                    "NANOSECONDS",
                                    "MICROSECONDS",
                                    "MILLISECONDS",
                                    "SECONDS",
                                    "MINUTES",
                                    "HOURS",
                                    "DAYS"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-maxRuntime",
                        "id": "#max_runtime",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--maxRuntime",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "If provided, that GATK will stop execution cleanly as soon after maxRuntime has been exceeded, truncating the run but not exiting with a failure.  By default the value is interpreted in minutes, but this can be changed by maxRuntimeUnits.",
                        "sbg:toolDefaultValue": "-1",
                        "label": "Max Runtime",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "Indel Realigner",
                        "sbg:altPrefix": "-maxInMemory",
                        "id": "#max_reads_in_memory",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--maxReadsInMemory",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Max reads allowed to be kept in memory at a time by the SAMFileWriter.",
                        "sbg:toolDefaultValue": "150000",
                        "label": "Max Reads In Memory",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "Indel Realigner",
                        "sbg:altPrefix": "-maxReads",
                        "id": "#max_reads_for_realignment",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--maxReadsForRealignment",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Max reads allowed at an interval for realignment.",
                        "sbg:toolDefaultValue": "20000",
                        "label": "Max Reads For Realignment",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "Indel Realigner",
                        "sbg:altPrefix": "-greedy",
                        "id": "#max_reads_for_consensuses",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--maxReadsForConsensuses",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Max reads used for finding the alternate consensuses (necessary to improve performance in deep coverage).",
                        "sbg:toolDefaultValue": "120",
                        "label": "Max Reads For Consensuses",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "Indel Realigner",
                        "sbg:altPrefix": "-maxPosMove",
                        "id": "#max_positional_move_allowed",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--maxPositionalMoveAllowed",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Maximum positional move in basepairs that a read can be adjusted during realignment.",
                        "sbg:toolDefaultValue": "200",
                        "label": "Max Positional Move Allowed",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "Indel Realigner",
                        "sbg:altPrefix": "-maxIsize",
                        "id": "#max_isize_for_movement",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--maxIsizeForMovement",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Maximum insert size of read pairs that we attempt to realign.",
                        "sbg:toolDefaultValue": "3000",
                        "label": "Max Isize For Movement",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "Indel Realigner",
                        "sbg:altPrefix": null,
                        "id": "#max_consensuses",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--maxConsensuses",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Max alternate consensuses to try (necessary to improve performance in deep coverage).",
                        "sbg:toolDefaultValue": "30",
                        "label": "Max Consensuses",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "Indel Realigner",
                        "sbg:altPrefix": "-LOD",
                        "id": "#lod_threshold_for_cleaning",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--LODThresholdForCleaning",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "LOD threshold above which the cleaner will clean.",
                        "sbg:toolDefaultValue": "5.0",
                        "label": "Lod Threshold For Cleaning",
                        "type": [
                            "null",
                            "float"
                        ]
                    },
                    {
                        "sbg:category": "Input Files",
                        "sbg:fileTypes": "VCF",
                        "id": "#known_alleles",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--knownAlleles",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Input VCF file(s) with known indels.",
                        "sbg:altPrefix": "-known",
                        "required": false,
                        "label": "Known Alleles",
                        "type": [
                            "null",
                            {
                                "type": "array",
                                "items": "File"
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-kpr",
                        "id": "#keep_program_records",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--keep_program_records",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Should we override the Walker's default and keep program records from the SAM header.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Keep Program Records",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "Input Files",
                        "sbg:fileTypes": "TXT, BED, VCF",
                        "id": "#intervals_file",
                        "inputBinding": {
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true,
                            "valueFrom": {
                                "script": "{\n  if($job.inputs.intervals_file instanceof Array)\n    if($job.inputs.target_intervals.metadata)\n      if($job.inputs.target_intervals.metadata.intervals_file)\n        return '--intervals ' + $job.inputs.target_intervals.metadata.intervals_file\n  \n  if($job.inputs.intervals_file)\n    return '--intervals ' + $job.inputs.intervals_file.path\n  else\n    return ''\n}",
                                "engine": "#cwl-js-engine",
                                "class": "Expression"
                            }
                        },
                        "description": "One or more genomic intervals over which to operate. Can be an specified in an .intervals file or a rod file.",
                        "sbg:altPrefix": "-L",
                        "required": false,
                        "sbg:stageInput": "link",
                        "label": "Intervals",
                        "type": [
                            "null",
                            {
                                "type": "array",
                                "name": "intervals_file",
                                "items": "File"
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": null,
                        "id": "#intervals",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "-L",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "One or more genomic intervals over which to operate.",
                        "sbg:toolDefaultValue": "sample",
                        "label": "Intervals",
                        "type": [
                            "null",
                            "string"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-isr",
                        "id": "#interval_set_rule",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--interval_set_rule",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Indicates the set merging approach the interval parser should use to combine the various -L or -XL inputs.",
                        "sbg:toolDefaultValue": "UNION",
                        "label": "Interval Set Rule",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "interval_set_rule",
                                "symbols": [
                                    "UNION",
                                    "INTERSECTION"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-ip",
                        "id": "#interval_padding",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--interval_padding",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Indicates how many basepairs of padding to include around each of the intervals specified with the -L/--intervals argument.",
                        "sbg:toolDefaultValue": "0",
                        "label": "Interval Padding",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-im",
                        "id": "#interval_merging",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--interval_merging",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Indicates the interval merging rule we should use for abutting intervals.",
                        "sbg:toolDefaultValue": "ALL",
                        "label": "Interval Merging",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "interval_merging",
                                "symbols": [
                                    "ALL",
                                    "OVERLAPPING_ONLY"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "Input Files",
                        "sbg:fileTypes": "KEY, LICENSE",
                        "id": "#gatk_key",
                        "inputBinding": {
                            "itemSeparator": " ",
                            "prefix": "--gatk_key",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "GATK Key file. Required if running with -et NO_ET. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.",
                        "sbg:altPrefix": "-K",
                        "required": false,
                        "label": "Gatk key",
                        "type": [
                            "null",
                            "File"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-fixMisencodedQuals",
                        "id": "#fix_misencoded_quals",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "-fixMisencodedQuals",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Fix mis-encoded base quality scores.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Fix Misencoded Quals",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "Input Files",
                        "sbg:fileTypes": "TXT, BED, VCF",
                        "id": "#exclude_intervals",
                        "inputBinding": {
                            "itemSeparator": " ",
                            "prefix": "--excludeIntervals",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "One or more genomic intervals to exclude from processing. Can be an .intervals file or a rod file.",
                        "sbg:altPrefix": "-XL",
                        "required": false,
                        "label": "Exclude Intervals",
                        "type": [
                            "null",
                            "File"
                        ]
                    },
                    {
                        "sbg:category": "Indel Realigner",
                        "sbg:altPrefix": "-entropy",
                        "id": "#entropy_threshold",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--entropyThreshold",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Percentage of mismatches at a locus to be considered having high entropy.",
                        "sbg:toolDefaultValue": "0.15",
                        "label": "Entropy Threshold",
                        "type": [
                            "null",
                            "float"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-EOQ",
                        "id": "#emit_original_quals",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--emit_original_quals",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "If true, enables printing of the OQ tag with the original base qualities (with -BQSR).",
                        "sbg:toolDefaultValue": "False",
                        "label": "Emit Original Quals",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-dt",
                        "id": "#downsampling_type",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--downsampling_type",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Type of reads downsampling to employ at a given locus. Reads will be selected randomly to be removed from the pile based on the method described here.",
                        "sbg:toolDefaultValue": "",
                        "label": "Downsampling Type",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "downsampling_type",
                                "symbols": [
                                    "NONE",
                                    "ALL_READS",
                                    "BY_SAMPLE"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-dfrac",
                        "id": "#downsample_to_fraction",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--downsample_to_fraction",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Fraction [0.0-1.0] of reads to downsample to.",
                        "sbg:toolDefaultValue": "",
                        "label": "Downsample to Fraction",
                        "type": [
                            "null",
                            "float"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-dcov",
                        "id": "#downsample_to_coverage",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--downsample_to_coverage",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Coverage to downsample to at any given locus; note that downsampled reads are randomly selected from all possible reads at a locus. For non-locus-based traversals (eg., ReadWalkers), this sets the maximum number of reads at each alignment start position.",
                        "sbg:toolDefaultValue": "",
                        "label": "Downsample to Coverage",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": null,
                        "id": "#disable_radnomization",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--disableRandomization",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Completely eliminates randomization from nondeterministic methods. To be used mostly in the testing framework where dynamic parallelism can result in differing numbers of calls to the generator.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Disable Randomization",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-DIQ",
                        "id": "#disable_indel_quals",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--disable_indel_quals",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "If 'true', disables printing of base insertion and base deletion tags (with -BQSR). Turns off printing of the base insertion and base deletion tags when using the -BQSR argument and only the base substitution qualities will be produced.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Disable Indel Quals",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-DBQ",
                        "id": "#default_base_qualities",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--defaultBaseQualities",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "If reads are missing some or all base quality scores, this value will be used for all base quality scores.",
                        "sbg:toolDefaultValue": "-1",
                        "label": "Default Base Qualities",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "Execution",
                        "sbg:altPrefix": null,
                        "id": "#cpu_per_job",
                        "description": "Number of CPUs per job.",
                        "sbg:toolDefaultValue": "1",
                        "label": "CPU per job",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "Indel Realigner",
                        "sbg:altPrefix": "-model",
                        "id": "#consensus_determination_model",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--consensusDeterminationModel",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Determines how to compute the possible alternate consenses.",
                        "sbg:toolDefaultValue": "USE_READS",
                        "label": "Consensus Determination Model",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "consensus_determination_model",
                                "symbols": [
                                    "KNOWNS_ONLY",
                                    "USE_READS",
                                    "USE_SW"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-baqGOP",
                        "id": "#baq_gap_open_penalty",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--baqGapOpenPenalty",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "BAQ gap open penalty (Phred Scaled). Default value is 40. 30 is perhaps better for whole genome call sets.",
                        "sbg:toolDefaultValue": "40.0",
                        "label": "BAQ Gap Open Penalty",
                        "type": [
                            "null",
                            "float"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-baq",
                        "id": "#baq",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--baq",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Type of BAQ calculation to apply in the engine.",
                        "sbg:toolDefaultValue": "OFF",
                        "label": "BAQ Calculation Type",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "baq",
                                "symbols": [
                                    "OFF",
                                    "CALCULATE_AS_NECESSARY",
                                    "RECALCULATE"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "--allow_potentially_misencoded_quality_scores",
                        "id": "#allow_potentailly_misencoded_quals",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "-allowPotentiallyMisencodedQuals",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Do not fail when encountered base qualities that are too high and seemingly indicate a problem with the base quality encoding of the BAM file.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Allow Potentially Misencoded Quals",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    }
                ],
                "sbg:job": {
                    "allocatedResources": {
                        "mem": 3048,
                        "cpu": 1
                    },
                    "inputs": {
                        "target_intervals": {
                            "metadata": {
                                "intervals_file": "treterfgsdfsd.4444"
                            },
                            "class": "File",
                            "secondaryFiles": [],
                            "size": 0,
                            "path": "intervalListFromRTC.intervals"
                        },
                        "intervals_file": [
                            {
                                "size": 0,
                                "class": "File",
                                "secondaryFiles": [],
                                "path": "/path/to/intervals_file-1.ext"
                            },
                            {
                                "size": 0,
                                "class": "File",
                                "secondaryFiles": [],
                                "path": "/path/to/intervals_file-2.ext"
                            }
                        ],
                        "reference": {
                            "path": "/folder/reference.fasta"
                        },
                        "memory_overhead_per_job": 1000,
                        "intervals": "",
                        "known_alleles": [
                            {
                                "path": "/folder/indels.vcf"
                            }
                        ],
                        "reads": [
                            {
                                "path": "/folder/input.bam"
                            }
                        ],
                        "memory_per_job": null
                    }
                },
                "sbg:createdBy": "bix-demo",
                "sbg:revisionsInfo": [
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1450911378,
                        "sbg:revision": 0,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1450911378,
                        "sbg:revision": 1,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1450911379,
                        "sbg:revision": 2,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1450911380,
                        "sbg:revision": 3,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1450911381,
                        "sbg:revision": 4,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1450911382,
                        "sbg:revision": 5,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1460993599,
                        "sbg:revision": 6,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:revisionNotes": "Scatter metadata support.",
                        "sbg:modifiedOn": 1472651971,
                        "sbg:revision": 7,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": "metadata scatter 2",
                        "sbg:modifiedOn": 1472652361,
                        "sbg:revision": 8,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": "scatter metadata 3",
                        "sbg:modifiedOn": 1472655804,
                        "sbg:revision": 9,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": ".bai as secondary.",
                        "sbg:modifiedOn": 1472724542,
                        "sbg:revision": 10,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": "output single file.",
                        "sbg:modifiedOn": 1472738930,
                        "sbg:revision": 11,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": "Added support for run without intervals",
                        "sbg:modifiedOn": 1476371352,
                        "sbg:revision": 12,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": "Output name based on reads filename",
                        "sbg:modifiedOn": 1478713467,
                        "sbg:revision": 13,
                        "sbg:modifiedBy": "bogdang"
                    }
                ],
                "sbg:toolAuthor": "Broad Institute",
                "sbg:contributors": [
                    "vladimirk",
                    "bix-demo",
                    "bogdang"
                ],
                "outputs": [
                    {
                        "sbg:fileTypes": "BAM",
                        "id": "#realigned_bam_file",
                        "outputBinding": {
                            "glob": "*.realigned.bam",
                            "sbg:metadata": {
                                "intervals_file": {
                                    "script": "{\n  if ($job.inputs.target_intervals)\n    if($job.inputs.target_intervals.metadata)\n      if('intervals_file' in $job.inputs.target_intervals.metadata)\n        return $job.inputs.target_intervals.metadata.intervals_file\n  return 'NO_INTERVALS'\n}",
                                    "engine": "#cwl-js-engine",
                                    "class": "Expression"
                                }
                            },
                            "sbg:inheritMetadataFrom": "#reads",
                            "secondaryFiles": [
                                ".bai",
                                "^.bai"
                            ]
                        },
                        "description": "Realigned BAM.",
                        "type": [
                            "null",
                            "File"
                        ],
                        "label": "Realigned BAM"
                    }
                ],
                "sbg:toolkit": "GATK"
            },
            "outputs": [
                {
                    "id": "#GATK_IndelRealigner.realigned_bam_file"
                }
            ],
            "inputs": [
                {
                    "id": "#GATK_IndelRealigner.validation_strictness"
                },
                {
                    "id": "#GATK_IndelRealigner.use_original_qualities"
                },
                {
                    "id": "#GATK_IndelRealigner.use_legacy_downsampler"
                },
                {
                    "id": "#GATK_IndelRealigner.unsafe"
                },
                {
                    "id": "#GATK_IndelRealigner.target_intervals",
                    "source": [
                        "#GATK_RealignerTargetCreator.indel_realigner_intervals_file"
                    ]
                },
                {
                    "id": "#GATK_IndelRealigner.tag"
                },
                {
                    "id": "#GATK_IndelRealigner.remove_program_records"
                },
                {
                    "id": "#GATK_IndelRealigner.reference",
                    "source": [
                        "#SBG_FASTA_Indices.fasta_reference"
                    ]
                },
                {
                    "id": "#GATK_IndelRealigner.reads",
                    "source": [
                        "#BWA_MEM_Bundle_0_7_13.aligned_reads"
                    ]
                },
                {
                    "id": "#GATK_IndelRealigner.read_group_black_list"
                },
                {
                    "id": "#GATK_IndelRealigner.read_filter"
                },
                {
                    "id": "#GATK_IndelRealigner.preserve_qscores_less_than"
                },
                {
                    "id": "#GATK_IndelRealigner.phone_home"
                },
                {
                    "id": "#GATK_IndelRealigner.pedigree_validation_type"
                },
                {
                    "id": "#GATK_IndelRealigner.pedigree_string"
                },
                {
                    "id": "#GATK_IndelRealigner.non_deterministic_random_seed"
                },
                {
                    "id": "#GATK_IndelRealigner.no_original_alignment_tags"
                },
                {
                    "id": "#GATK_IndelRealigner.memory_per_job",
                    "default": 2048
                },
                {
                    "id": "#GATK_IndelRealigner.memory_overhead_per_job",
                    "default": 64
                },
                {
                    "id": "#GATK_IndelRealigner.max_runtime_units"
                },
                {
                    "id": "#GATK_IndelRealigner.max_runtime"
                },
                {
                    "id": "#GATK_IndelRealigner.max_reads_in_memory"
                },
                {
                    "id": "#GATK_IndelRealigner.max_reads_for_realignment"
                },
                {
                    "id": "#GATK_IndelRealigner.max_reads_for_consensuses"
                },
                {
                    "id": "#GATK_IndelRealigner.max_positional_move_allowed"
                },
                {
                    "id": "#GATK_IndelRealigner.max_isize_for_movement"
                },
                {
                    "id": "#GATK_IndelRealigner.max_consensuses"
                },
                {
                    "id": "#GATK_IndelRealigner.lod_threshold_for_cleaning"
                },
                {
                    "id": "#GATK_IndelRealigner.known_alleles"
                },
                {
                    "id": "#GATK_IndelRealigner.keep_program_records"
                },
                {
                    "id": "#GATK_IndelRealigner.intervals_file",
                    "source": [
                        "#SBG_Prepare_Intervals.intervals"
                    ]
                },
                {
                    "id": "#GATK_IndelRealigner.intervals"
                },
                {
                    "id": "#GATK_IndelRealigner.interval_set_rule"
                },
                {
                    "id": "#GATK_IndelRealigner.interval_padding"
                },
                {
                    "id": "#GATK_IndelRealigner.interval_merging"
                },
                {
                    "id": "#GATK_IndelRealigner.gatk_key"
                },
                {
                    "id": "#GATK_IndelRealigner.fix_misencoded_quals"
                },
                {
                    "id": "#GATK_IndelRealigner.exclude_intervals"
                },
                {
                    "id": "#GATK_IndelRealigner.entropy_threshold"
                },
                {
                    "id": "#GATK_IndelRealigner.emit_original_quals"
                },
                {
                    "id": "#GATK_IndelRealigner.downsampling_type"
                },
                {
                    "id": "#GATK_IndelRealigner.downsample_to_fraction"
                },
                {
                    "id": "#GATK_IndelRealigner.downsample_to_coverage"
                },
                {
                    "id": "#GATK_IndelRealigner.disable_radnomization"
                },
                {
                    "id": "#GATK_IndelRealigner.disable_indel_quals"
                },
                {
                    "id": "#GATK_IndelRealigner.default_base_qualities"
                },
                {
                    "id": "#GATK_IndelRealigner.cpu_per_job",
                    "default": 1
                },
                {
                    "id": "#GATK_IndelRealigner.consensus_determination_model"
                },
                {
                    "id": "#GATK_IndelRealigner.baq_gap_open_penalty"
                },
                {
                    "id": "#GATK_IndelRealigner.baq"
                },
                {
                    "id": "#GATK_IndelRealigner.allow_potentailly_misencoded_quals"
                }
            ],
            "sbg:x": 1421.667051858386
        },
        {
            "id": "#BWA_MEM_Bundle_0_7_13",
            "scatter": "#BWA_MEM_Bundle_0_7_13.input_reads",
            "sbg:y": 143.00002728568273,
            "run": {
                "sbg:modifiedOn": 1480437238,
                "sbg:id": "vladimirk/bwa-mem-bundle-0-7-13-demo/bwa-mem-bundle-0-7-13/37",
                "sbg:toolkitVersion": "0.7.13",
                "sbg:cmdPreview": "/bin/bash -c \" tar -xf reference.b37.fasta.gz.tar ;  /opt/bwa-0.7.13/bwa mem  -R '@RG\\tID:rg_id-string-value\\tPL:Illumina\\tSM:dnk_sample' -t 1  reference.b37.fasta.gz  /path/to/LP6005524-DNA_C01_lane_7.sorted.converted.filtered.pe_2.gz /path/to/LP6005524-DNA_C01_lane_7.sorted.converted.filtered.pe_1.gz  | /opt/samblaster/samblaster -i /dev/stdin -o /dev/stdout | /opt/sambamba_v0.6.0 view -t 8 -f bam -l 0 -S /dev/stdin | /opt/sambamba_v0.6.0 sort -t 1 -m 5GiB --tmpdir ./ -o LP6005524-DNA_C01_lane_7.sorted.converted.filtered.bam -l 5 /dev/stdin  ;declare -i pipe_statuses=(\\${PIPESTATUS[*]});len=\\${#pipe_statuses[@]};declare -i tot=0;echo \\${pipe_statuses[*]};for (( i=0; i<\\${len}; i++ ));do if [ \\${pipe_statuses[\\$i]} -ne 0 ];then tot=\\${pipe_statuses[\\$i]}; fi;done;if [ \\$tot -ne 0 ]; then >&2 echo Error in piping. Pipe statuses: \\${pipe_statuses[*]};fi; if [ \\$tot -ne 0 ]; then false;fi\"",
                "sbg:revision": 37,
                "requirements": [
                    {
                        "requirements": [
                            {
                                "class": "DockerRequirement",
                                "dockerPull": "rabix/js-engine"
                            }
                        ],
                        "class": "ExpressionEngineRequirement",
                        "id": "#cwl-js-engine"
                    }
                ],
                "successCodes": [],
                "sbg:sbgMaintained": false,
                "sbg:categories": [
                    "Alignment",
                    "FASTQ-Processing"
                ],
                "sbg:project": "vladimirk/bwa-mem-bundle-0-7-13-demo",
                "sbg:image_url": null,
                "stdin": "",
                "id": "vladimirk/bwa-mem-bundle-0-7-13-demo/bwa-mem-bundle-0-7-13/37",
                "sbg:links": [
                    {
                        "label": "Homepage",
                        "id": "http://bio-bwa.sourceforge.net/"
                    },
                    {
                        "label": "Source code",
                        "id": "https://github.com/lh3/bwa"
                    },
                    {
                        "label": "Wiki",
                        "id": "http://bio-bwa.sourceforge.net/bwa.shtml"
                    },
                    {
                        "label": "Download",
                        "id": "http://sourceforge.net/projects/bio-bwa/"
                    },
                    {
                        "label": "Publication",
                        "id": "http://arxiv.org/abs/1303.3997"
                    },
                    {
                        "label": "Publication BWA Algorithm",
                        "id": "http://www.ncbi.nlm.nih.gov/pubmed/19451168"
                    }
                ],
                "sbg:createdOn": 1458653351,
                "sbg:revisionNotes": "Added RG ID as optional input parameter",
                "hints": [
                    {
                        "dockerImageId": "",
                        "class": "DockerRequirement",
                        "dockerPull": "images.sbgenomics.com/vladimirk/bwa:0.7.13"
                    },
                    {
                        "value": {
                            "script": "{  \n  // Calculate suggested number of CPUs depending of the input reads size\n  if ($job.inputs.input_reads.constructor == Array){\n    if ($job.inputs.input_reads[1]){\n      reads_size = $job.inputs.input_reads[0].size + $job.inputs.input_reads[1].size\n    } else{\n      reads_size = $job.inputs.input_reads[0].size\n    }\n  }\n  else{\n    reads_size = $job.inputs.input_reads.size\n  }\n  if(!reads_size) { reads_size = 0 }\n\n\n  GB_1 = 1024*1024*1024\n  if(reads_size < GB_1){ suggested_cpus = 1 }\n  else if(reads_size < 10 * GB_1){ suggested_cpus = 8 }\n  else { suggested_cpus = 31 }\n  \n  if($job.inputs.reserved_threads){ return $job.inputs.reserved_threads }\n  else if($job.inputs.threads){ return $job.inputs.threads } \n  else if($job.inputs.sambamba_threads) { return $job.inputs.sambamba_threads }\n  else{    return suggested_cpus  }\n}",
                            "engine": "#cwl-js-engine",
                            "class": "Expression"
                        },
                        "class": "sbg:CPURequirement"
                    },
                    {
                        "value": {
                            "script": "{  \n\n  // Calculate suggested number of CPUs depending of the input reads size\n  if ($job.inputs.input_reads.constructor == Array){\n    if ($job.inputs.input_reads[1]){\n      reads_size = $job.inputs.input_reads[0].size + $job.inputs.input_reads[1].size\n    } else{\n      reads_size = $job.inputs.input_reads[0].size\n    }\n  }\n  else{\n    reads_size = $job.inputs.input_reads.size\n  }\n  if(!reads_size) { reads_size = 0 }\n \n  GB_1 = 1024*1024*1024\n  if(reads_size < GB_1){ suggested_memory = 4 }\n  else if(reads_size < 10 * GB_1){ suggested_memory = 15 }\n  else { suggested_memory = 58 }\n  \n  if($job.inputs.total_memory){  \t\n    return  $job.inputs.total_memory* 1024  \n  } \n  else if($job.inputs.sort_memory){\n    return  $job.inputs.sort_memory* 1024\n  }\n  else{  \t\n    return suggested_memory * 1024  \n  }\n}",
                            "engine": "#cwl-js-engine",
                            "class": "Expression"
                        },
                        "class": "sbg:MemRequirement"
                    }
                ],
                "label": "BWA-MEM Bundle 0.7.13",
                "arguments": [
                    {
                        "position": 111,
                        "prefix": "",
                        "separate": false,
                        "valueFrom": {
                            "script": "{ \n     ///////////////////////////////////////////\n    ///  SAMBAMBA VIEW   //////////////////////\n   ///////////////////////////////////////////\nfunction common_substring(a,b) {\n  var i = 0;\n  \n  while(a[i] === b[i] && i < a.length)\n  {\n    i = i + 1;\n  }\n\n  return a.slice(0, i);\n}\n  \n   // Set output file name\n  if($job.inputs.input_reads[0] instanceof Array){\n    input_1 = $job.inputs.input_reads[0][0] // scatter mode\n    input_2 = $job.inputs.input_reads[0][1]\n  } else if($job.inputs.input_reads instanceof Array){\n    input_1 = $job.inputs.input_reads[0]\n    input_2 = $job.inputs.input_reads[1]\n  }else {\n    input_1 = [].concat($job.inputs.input_reads)[0]\n    input_2 = input_1\n  }\n  full_name = input_1.path.split('/')[input_1.path.split('/').length-1] \n\n  if($job.inputs.output_name){name = $job.inputs.output_name }\n  else if ($job.inputs.input_reads.length == 1){ \n    name = full_name\n\n    if(name.slice(-3, name.length) === '.gz' || name.slice(-3, name.length) === '.GZ')\n      name = name.slice(0, -3)   \n    if(name.slice(-3, name.length) === '.fq' || name.slice(-3, name.length) === '.FQ')\n      name = name.slice(0, -3)\n    if(name.slice(-6, name.length) === '.fastq' || name.slice(-6, name.length) === '.FASTQ')\n      name = name.slice(0, -6)\n       \n  }else{\n    full_name2 = input_2.path.split('/')[input_2.path.split('/').length-1] \n    name = common_substring(full_name, full_name2)\n    \n    if(name.slice(-1, name.length) === '_' || name.slice(-1, name.length) === '.')\n      name = name.slice(0, -1)\n    if(name.slice(-2, name.length) === 'p_' || name.slice(-1, name.length) === 'p.')\n      name = name.slice(0, -2)\n    if(name.slice(-2, name.length) === 'P_' || name.slice(-1, name.length) === 'P.')\n      name = name.slice(0, -2)\n    if(name.slice(-3, name.length) === '_p_' || name.slice(-3, name.length) === '.p.')\n      name = name.slice(0, -3)\n    if(name.slice(-3, name.length) === '_pe' || name.slice(-3, name.length) === '.pe')\n      name = name.slice(0, -3)\n  }\n  \n  // Read number of threads if defined\n  if ($job.inputs.sambamba_threads){\n    threads = $job.inputs.sambamba_threads\n  }\n  else if ($job.inputs.threads){\n    threads = $job.inputs.threads\n  }\n  else { threads = 8 }\n  \n  if ($job.inputs.filter_out_secondary_alignments){\n    filt_sec = ' --filter \\'not secondary_alignment\\' '\n  }\n  else {filt_sec=' '}\n   \n  // Set output command\n  sambamba_path = '/opt/sambamba_v0.6.0'\n  if ($job.inputs.output_format == 'BAM') {\n    return \"| \" + sambamba_path + \" view -t \"+ threads + filt_sec + \"-f bam -S /dev/stdin -o \"+ name + \".bam\"\n  }\n  else if ($job.inputs.output_format == 'SAM'){ // SAM\n    return \"> \" + name + \".sam\"\n  }\n  else { // SortedBAM is considered default\n    return \"| \" + sambamba_path + \" view -t \"+ threads + filt_sec + \"-f bam -l 0 -S /dev/stdin\"\n  }\n\n}",
                            "engine": "#cwl-js-engine",
                            "class": "Expression"
                        }
                    },
                    {
                        "position": 112,
                        "separate": false,
                        "valueFrom": {
                            "script": "{\n  ///////////////////////////////////////////\n ///  SAMBAMBA SORT   //////////////////////\n///////////////////////////////////////////\n  \nfunction common_substring(a,b) {\n  var i = 0;\n  while(a[i] === b[i] && i < a.length)\n  {\n    i = i + 1;\n  }\n\n  return a.slice(0, i);\n}\n\n   // Set output file name\n  if($job.inputs.input_reads[0] instanceof Array){\n    input_1 = $job.inputs.input_reads[0][0] // scatter mode\n    input_2 = $job.inputs.input_reads[0][1]\n  } else if($job.inputs.input_reads instanceof Array){\n    input_1 = $job.inputs.input_reads[0]\n    input_2 = $job.inputs.input_reads[1]\n  }else {\n    input_1 = [].concat($job.inputs.input_reads)[0]\n    input_2 = input_1\n  }\n  full_name = input_1.path.split('/')[input_1.path.split('/').length-1] \n  \n  if($job.inputs.output_name){name = $job.inputs.output_name }\n  else if ($job.inputs.input_reads.length == 1){\n    name = full_name\n    if(name.slice(-3, name.length) === '.gz' || name.slice(-3, name.length) === '.GZ')\n      name = name.slice(0, -3)   \n    if(name.slice(-3, name.length) === '.fq' || name.slice(-3, name.length) === '.FQ')\n      name = name.slice(0, -3)\n    if(name.slice(-6, name.length) === '.fastq' || name.slice(-6, name.length) === '.FASTQ')\n      name = name.slice(0, -6)\n       \n  }else{\n    full_name2 = input_2.path.split('/')[input_2.path.split('/').length-1] \n    name = common_substring(full_name, full_name2)\n    \n    if(name.slice(-1, name.length) === '_' || name.slice(-1, name.length) === '.')\n      name = name.slice(0, -1)\n    if(name.slice(-2, name.length) === 'p_' || name.slice(-1, name.length) === 'p.')\n      name = name.slice(0, -2)\n    if(name.slice(-2, name.length) === 'P_' || name.slice(-1, name.length) === 'P.')\n      name = name.slice(0, -2)\n    if(name.slice(-3, name.length) === '_p_' || name.slice(-3, name.length) === '.p.')\n      name = name.slice(0, -3)\n    if(name.slice(-3, name.length) === '_pe' || name.slice(-3, name.length) === '.pe')\n      name = name.slice(0, -3)\n  }\n\n  //////////////////////////\n  // Set sort memory size\n  \n  reads_size = 0 // Not used because of situations when size does not exist!\n  GB_1 = 1024*1024*1024\n  if(reads_size < GB_1){ \n    suggested_memory = 4\n    suggested_cpus = 1\n  }\n  else if(reads_size < 10 * GB_1){ \n    suggested_memory = 15\n    suggested_cpus = 8\n  }\n  else { \n    suggested_memory = 58 \n    suggested_cpus = 31\n  }\n  \n  \n  if(!$job.inputs.total_memory){ total_memory = suggested_memory }\n  else{ total_memory = $job.inputs.total_memory }\n\n  // TODO:Rough estimation, should be fine-tuned!\n  if(total_memory > 16){ sorter_memory = parseInt(total_memory / 3) }\n  else{ sorter_memory = 5 }\n          \n  if ($job.inputs.sort_memory){\n    sorter_memory_string = $job.inputs.sort_memory +'GiB'\n  }\n  else sorter_memory_string = sorter_memory + 'GiB' \n  \n  // Read number of threads if defined  \n  if ($job.inputs.sambamba_threads){\n    threads = $job.inputs.sambamba_threads\n  }\n  else if ($job.inputs.threads){\n    threads = $job.inputs.threads\n  }\n  else threads = suggested_cpus\n  \n  sambamba_path = '/opt/sambamba_v0.6.0'\n  \n  // SortedBAM is considered default\n  if (!(($job.inputs.output_format == 'BAM') || ($job.inputs.output_format == 'SAM'))){\n    cmd = \"| \" + sambamba_path + \" sort -t \" + threads\n    return cmd + \" -m \"+sorter_memory_string+\" --tmpdir ./ -o \"+ name +\".bam -l 5 /dev/stdin\"\n  }\n  else return \"\"\n}\n  \n",
                            "engine": "#cwl-js-engine",
                            "class": "Expression"
                        }
                    },
                    {
                        "position": 110,
                        "separate": true,
                        "valueFrom": {
                            "script": "{\n    ///////////////////////////////////////////\n    ///  SAMBLASTER      //////////////////////\n   ///////////////////////////////////////////\n  if ($job.inputs.deduplication == \"MarkDuplicates\"){\n    return \"| /opt/samblaster/samblaster -i /dev/stdin -o /dev/stdout\"\n  }\n  else if ($job.inputs.deduplication == \"RemoveDuplicates\"){\n    return \"| /opt/samblaster/samblaster -r -i /dev/stdin -o /dev/stdout\"\n  }\n  else{\n   return \"\" \n  }\n}",
                            "engine": "#cwl-js-engine",
                            "class": "Expression"
                        }
                    },
                    {
                        "position": 1,
                        "separate": true,
                        "valueFrom": {
                            "script": "{\n  \n  if($job.inputs.read_group_header){\n  \treturn '-R ' + $job.inputs.read_group_header\n  }\n    \n  function add_param(key, val){\n    if(!val){\n      return\n\t}\n    param_list.push(key + ':' + val)\n  }\n\n  param_list = []\n\n  // Set output file name\n  if($job.inputs.input_reads[0] instanceof Array){\n    input_1 = $job.inputs.input_reads[0][0] // scatter mode\n  } else if($job.inputs.input_reads instanceof Array){\n    input_1 = $job.inputs.input_reads[0]\n  }else {\n    input_1 = [].concat($job.inputs.input_reads)[0]\n  }\n  \n  //Read metadata for input reads\n  read_metadata = input_1.metadata\n  if(!read_metadata) read_metadata = []\n\n  if($job.inputs.rg_id){\n    add_param('ID', $job.inputs.rg_id)\n  }\n  else {\n    add_param('ID', '1')\n  } \n   \n  \n  if($job.inputs.rg_data_submitting_center){\n  \tadd_param('CN', $job.inputs.rg_data_submitting_center)\n  }\n  else if('data_submitting_center' in  read_metadata){\n  \tadd_param('CN', read_metadata.data_submitting_center)\n  }\n  \n  if($job.inputs.rg_library_id){\n  \tadd_param('LB', $job.inputs.rg_library_id)\n  }\n  else if('library_id' in read_metadata){\n  \tadd_param('LB', read_metadata.library_id)\n  }\n  \n  if($job.inputs.rg_median_fragment_length){\n  \tadd_param('PI', $job.inputs.rg_median_fragment_length)\n  }\n\n  \n  if($job.inputs.rg_platform){\n  \tadd_param('PL', $job.inputs.rg_platform)\n  }\n  else if('platform' in read_metadata){\n    if(read_metadata.platform == 'HiSeq X Ten'){\n      rg_platform = 'Illumina'\n    }\n    else{\n      rg_platform = read_metadata.platform\n    }\n  \tadd_param('PL', rg_platform)\n  }\n  \n  if($job.inputs.rg_platform_unit_id){\n  \tadd_param('PU', $job.inputs.rg_platform_unit_id)\n  }\n  else if('platform_unit_id' in read_metadata){\n  \tadd_param('PU', read_metadata.platform_unit_id)\n  }\n  \n  if($job.inputs.rg_sample_id){\n  \tadd_param('SM', $job.inputs.rg_sample_id)\n  }\n  else if('sample_id' in  read_metadata){\n  \tadd_param('SM', read_metadata.sample_id)\n  }\n    \n  return \"-R '@RG\\\\t\" + param_list.join('\\\\t') + \"'\"\n  \n}",
                            "engine": "#cwl-js-engine",
                            "class": "Expression"
                        }
                    },
                    {
                        "position": 101,
                        "separate": true,
                        "valueFrom": {
                            "script": "{\n  /////// Set input reads in the correct order depending of the paired end from metadata\n    \n     // Set output file name\n  if($job.inputs.input_reads[0] instanceof Array){\n    input_reads = $job.inputs.input_reads[0] // scatter mode\n  } else {\n    input_reads = $job.inputs.input_reads = [].concat($job.inputs.input_reads)\n  }\n  \n  \n  //Read metadata for input reads\n  read_metadata = input_reads[0].metadata\n  if(!read_metadata) read_metadata = []\n  \n  order = 0 // Consider this as normal order given at input: pe1 pe2\n  \n  // Check if paired end 1 corresponds to the first given read\n  if(read_metadata == []){ order = 0 }\n  else if('paired_end' in  read_metadata){ \n    pe1 = read_metadata.paired_end\n    if(pe1 != 1) order = 1 // change order\n  }\n\n  // Return reads in the correct order\n  if (input_reads.length == 1){\n    return input_reads[0].path // Only one read present\n  }\n  else if (input_reads.length == 2){\n    if (order == 0) return input_reads[0].path + ' ' + input_reads[1].path\n    else return input_reads[1].path + ' ' + input_reads[0].path\n  }\n\n}",
                            "engine": "#cwl-js-engine",
                            "class": "Expression"
                        }
                    },
                    {
                        "position": 2,
                        "prefix": "-t",
                        "separate": true,
                        "valueFrom": {
                            "script": "{\n  \n  reads_size = 0 \n\n  GB_1 = 1024*1024*1024\n  if(reads_size < GB_1){ suggested_threads = 1 }\n  else if(reads_size < 10 * GB_1){ suggested_threads = 8 }\n  else { suggested_threads = 31 }\n  \n  \n  if(!$job.inputs.threads){  \treturn suggested_threads  }  \n  else{    return $job.inputs.threads  }\n}",
                            "engine": "#cwl-js-engine",
                            "class": "Expression"
                        }
                    },
                    {
                        "position": 10,
                        "separate": true,
                        "valueFrom": {
                            "script": "{\n  reference_file = $job.inputs.reference_index_tar.path.split('/')[$job.inputs.reference_index_tar.path.split('/').length-1]\n  name = reference_file.slice(0, -4) // cut .tar extension \n  \n  return name\n  \n}",
                            "engine": "#cwl-js-engine",
                            "class": "Expression"
                        }
                    },
                    {
                        "position": 10000,
                        "separate": true,
                        "valueFrom": {
                            "script": "{\n  cmd = \";declare -i pipe_statuses=(\\\\${PIPESTATUS[*]});len=\\\\${#pipe_statuses[@]};declare -i tot=0;echo \\\\${pipe_statuses[*]};for (( i=0; i<\\\\${len}; i++ ));do if [ \\\\${pipe_statuses[\\\\$i]} -ne 0 ];then tot=\\\\${pipe_statuses[\\\\$i]}; fi;done;if [ \\\\$tot -ne 0 ]; then >&2 echo Error in piping. Pipe statuses: \\\\${pipe_statuses[*]};fi; if [ \\\\$tot -ne 0 ]; then false;fi\\\"\"\n  return cmd\n}",
                            "engine": "#cwl-js-engine",
                            "class": "Expression"
                        }
                    }
                ],
                "stdout": "",
                "baseCommand": [
                    {
                        "script": "{\n  cmd = \"/bin/bash -c \\\"\"\n  return cmd\n}",
                        "engine": "#cwl-js-engine",
                        "class": "Expression"
                    },
                    {
                        "script": "{\n  reference_file = $job.inputs.reference_index_tar.path.split('/')[$job.inputs.reference_index_tar.path.split('/').length-1]\n  return 'tar -xf ' + reference_file + ' ; '\n  \n}",
                        "engine": "#cwl-js-engine",
                        "class": "Expression"
                    },
                    "/opt/bwa-0.7.13/bwa",
                    "mem"
                ],
                "temporaryFailCodes": [],
                "sbg:latestRevision": 37,
                "y": 143.00002728568273,
                "sbg:validationErrors": [],
                "sbg:modifiedBy": "vladimirk",
                "cwlVersion": "sbg:draft-2",
                "sbg:license": "BWA: GNU Affero General Public License v3.0, MIT License. Sambamba: GNU GENERAL PUBLIC LICENSE. Samblaster: The MIT License (MIT)",
                "description": "**BWA MEM** is an algorithm designed for aligning sequence reads onto a large reference genome. BWA MEM is implemented as a component of BWA. The algorithm can automatically choose between performing end-to-end and local alignments. BWA MEM is capable of outputting multiple alignments, and finding chimeric reads. It can be applied to a wide range of read lengths, from 70 bp to several megabases. \n\nIn order to obtain possibilities for additional fast processing of aligned reads, two tools are embedded together into the same package with BWA MEM (0.7.13): Samblaster. (0.1.22) and Sambamba (v0.6.0). \nIf deduplication of alignments is needed, it can be done by setting the parameter 'Duplication'. **Samblaster** will be used internally to perform this action.\nBesides the standard BWA MEM SAM output file, BWA MEM package has been extended to support two additional output options: a BAM file obtained by piping through **Sambamba view** while filtering out the secondary alignments, as well as a Coordinate Sorted BAM option that additionally pipes the output through **Sambamba sort**, along with an accompanying .bai file produced by **Sambamba sort** as side effect. Parameters responsible for these additional features are 'Filter out secondary alignments' and 'Output format'. Passing data from BWA MEM to Samblaster and Sambamba tools has been done through the pipes which saves processing times of two read and write of aligned reads into the hard drive. \n\nFor input reads fastq files of total size less than 10 GB we suggest using the default setting for parameter 'total memory' of 15GB, for larger files we suggest using 58 GB of memory and 32 CPU cores.\n\n**Important:**\nIn order to work BWA MEM Bundle requires fasta reference file accompanied with **bwa fasta indices** in TAR file.\nThere is the **known issue** with samblaster. It does not support processing when number of sequences in fasta is larger than 32768. If this is the case do not use deduplication option because the output BAM will be corrupted.",
                "class": "CommandLineTool",
                "x": 942.3334725035608,
                "inputs": [
                    {
                        "sbg:category": "BWA Input/output options",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "verbose_level",
                                "symbols": [
                                    "1",
                                    "2",
                                    "3",
                                    "4"
                                ]
                            }
                        ],
                        "id": "#verbose_level",
                        "inputBinding": {
                            "prefix": "-v",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Verbose level: 1=error, 2=warning, 3=message, 4+=debugging.",
                        "sbg:toolDefaultValue": "3",
                        "label": "Verbose level"
                    },
                    {
                        "sbg:category": "BWA Input/output options",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "id": "#use_soft_clipping",
                        "inputBinding": {
                            "prefix": "-Y",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Use soft clipping for supplementary alignments.",
                        "label": "Use soft clipping"
                    },
                    {
                        "sbg:category": "BWA Scoring options",
                        "type": [
                            "null",
                            "int"
                        ],
                        "id": "#unpaired_read_penalty",
                        "inputBinding": {
                            "prefix": "-U",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Penalty for an unpaired read pair.",
                        "sbg:toolDefaultValue": "17",
                        "label": "Unpaired read penalty"
                    },
                    {
                        "sbg:category": "Execution",
                        "type": [
                            "null",
                            "int"
                        ],
                        "id": "#total_memory",
                        "description": "Total memory to be used by the tool in GB. It's sum of BWA, Sambamba Sort and Samblaster. For fastq files of total size less than 10GB, we suggest using the default setting of 15GB, for larger files we suggest using 58GB of memory (and 32CPU cores).",
                        "sbg:toolDefaultValue": "15",
                        "sbg:stageInput": null,
                        "label": "Total memory"
                    },
                    {
                        "sbg:category": "Execution",
                        "sbg:toolDefaultValue": "8",
                        "id": "#threads",
                        "description": "Number of threads for BWA, Samblaster and Sambamba sort process.",
                        "type": [
                            "null",
                            "int"
                        ],
                        "label": "Threads"
                    },
                    {
                        "sbg:category": "BWA Input/output options",
                        "type": [
                            "null",
                            {
                                "type": "array",
                                "name": "speficy_distribution_parameters",
                                "items": "float"
                            }
                        ],
                        "id": "#speficy_distribution_parameters",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "-I",
                            "sbg:cmdInclude": true,
                            "separate": false
                        },
                        "description": "Specify the mean, standard deviation (10% of the mean if absent), max (4 sigma from the mean if absent) and min of the insert size distribution.FR orientation only. This array can have maximum four values, where first two should be specified as FLOAT and last two as INT.",
                        "label": "Specify distribution parameters"
                    },
                    {
                        "sbg:category": "Execution",
                        "type": [
                            "null",
                            "int"
                        ],
                        "label": "Memory for BAM sorting",
                        "id": "#sort_memory",
                        "description": "Amount of RAM [Gb] to give to the sorting algorithm (if not provided will be set to one third of the total memory)."
                    },
                    {
                        "sbg:category": "BWA Input/output options",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "id": "#smart_pairing_in_input_fastq",
                        "inputBinding": {
                            "prefix": "-p",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Smart pairing in input FASTQ file (ignoring in2.fq).",
                        "label": "Smart pairing in input FASTQ file"
                    },
                    {
                        "sbg:category": "BWA Algorithm options",
                        "type": [
                            "null",
                            "int"
                        ],
                        "id": "#skip_seeds",
                        "inputBinding": {
                            "prefix": "-c",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Skip seeds with more than INT occurrences.",
                        "sbg:toolDefaultValue": "500",
                        "label": "Skip seeds with more than INT occurrences"
                    },
                    {
                        "sbg:category": "BWA Algorithm options",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "id": "#skip_pairing",
                        "inputBinding": {
                            "prefix": "-P",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Skip pairing; mate rescue performed unless -S also in use.",
                        "label": "Skip pairing"
                    },
                    {
                        "sbg:category": "BWA Algorithm options",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "id": "#skip_mate_rescue",
                        "inputBinding": {
                            "prefix": "-S",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Skip mate rescue.",
                        "label": "Skip mate rescue"
                    },
                    {
                        "sbg:category": "BWA Algorithm options",
                        "type": [
                            "null",
                            "float"
                        ],
                        "id": "#select_seeds",
                        "inputBinding": {
                            "prefix": "-r",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Look for internal seeds inside a seed longer than {-k} * FLOAT.",
                        "sbg:toolDefaultValue": "1.5",
                        "label": "Select seeds"
                    },
                    {
                        "sbg:category": "BWA Algorithm options",
                        "type": [
                            "null",
                            "int"
                        ],
                        "id": "#seed_occurrence_for_the_3rd_round",
                        "inputBinding": {
                            "prefix": "-y",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Seed occurrence for the 3rd round seeding.",
                        "sbg:toolDefaultValue": "20",
                        "label": "Seed occurrence for the 3rd round"
                    },
                    {
                        "sbg:category": "BWA Scoring options",
                        "type": [
                            "null",
                            "int"
                        ],
                        "id": "#score_for_a_sequence_match",
                        "inputBinding": {
                            "prefix": "-A",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Score for a sequence match, which scales options -TdBOELU unless overridden.",
                        "sbg:toolDefaultValue": "1",
                        "label": "Score for a sequence match"
                    },
                    {
                        "sbg:category": "Execution",
                        "type": [
                            "null",
                            "int"
                        ],
                        "label": "Sambamba Sort threads",
                        "id": "#sambamba_threads",
                        "description": "Number of threads to pass to Sambamba sort, if used."
                    },
                    {
                        "sbg:category": "BWA Read Group Options",
                        "sbg:toolDefaultValue": "Inferred from metadata",
                        "id": "#rg_sample_id",
                        "description": "Specify the sample ID for RG line - A human readable identifier for a sample or specimen, which could contain some metadata information. A sample or specimen is material taken from a biological entity for testing, diagnosis, propagation, treatment, or research purposes, including but not limited to tissues, body fluids, cells, organs, embryos, body excretory products, etc.",
                        "type": [
                            "null",
                            "string"
                        ],
                        "label": "Sample ID"
                    },
                    {
                        "sbg:category": "BWA Read Group Options",
                        "sbg:toolDefaultValue": "Inferred from metadata",
                        "id": "#rg_platform_unit_id",
                        "description": "Specify the platform unit (lane/slide) for RG line - An identifier for lanes (Illumina), or for slides (SOLiD) in the case that a library was split and ran over multiple lanes on the flow cell or slides.",
                        "type": [
                            "null",
                            "string"
                        ],
                        "label": "Platform unit ID"
                    },
                    {
                        "sbg:category": "BWA Read Group Options",
                        "sbg:toolDefaultValue": "Inferred from metadata",
                        "id": "#rg_platform",
                        "description": "Specify the version of the technology that was used for sequencing, which will be placed in RG line.",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "rg_platform",
                                "symbols": [
                                    "454",
                                    "Helicos",
                                    "Illumina",
                                    "Solid",
                                    "IonTorrent"
                                ]
                            }
                        ],
                        "label": "Platform"
                    },
                    {
                        "sbg:category": "BWA Read Group Options",
                        "type": [
                            "null",
                            "string"
                        ],
                        "label": "Median fragment length",
                        "id": "#rg_median_fragment_length",
                        "description": "Specify the median fragment length for RG line."
                    },
                    {
                        "sbg:category": "BWA Read Group Options",
                        "sbg:toolDefaultValue": "Inferred from metadata",
                        "id": "#rg_library_id",
                        "description": "Specify the identifier for the sequencing library preparation, which will be placed in RG line.",
                        "type": [
                            "null",
                            "string"
                        ],
                        "label": "Library ID"
                    },
                    {
                        "sbg:category": "Configuration",
                        "sbg:toolDefaultValue": "1",
                        "id": "#rg_id",
                        "description": "Read group ID",
                        "type": [
                            "null",
                            "string"
                        ],
                        "label": "Read group ID"
                    },
                    {
                        "sbg:category": "BWA Read Group Options",
                        "type": [
                            "null",
                            "string"
                        ],
                        "label": "Data submitting center",
                        "id": "#rg_data_submitting_center",
                        "description": "Specify the data submitting center for RG line."
                    },
                    {
                        "sbg:category": "Configuration",
                        "type": [
                            "null",
                            "int"
                        ],
                        "id": "#reserved_threads",
                        "description": "Reserved number of threads on the instance used by scheduler.",
                        "sbg:toolDefaultValue": "1",
                        "sbg:stageInput": null,
                        "label": "Reserved number of threads on the instance"
                    },
                    {
                        "sbg:category": "Input files",
                        "sbg:fileTypes": "TAR",
                        "id": "#reference_index_tar",
                        "description": "Reference fasta file with BWA index files packed in TAR.",
                        "required": true,
                        "sbg:stageInput": "link",
                        "label": "Reference Index TAR",
                        "type": [
                            "File"
                        ]
                    },
                    {
                        "sbg:category": "BWA Scoring options",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "read_type",
                                "symbols": [
                                    "pacbio",
                                    "ont2d",
                                    "intractg"
                                ]
                            }
                        ],
                        "id": "#read_type",
                        "inputBinding": {
                            "prefix": "-x",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Sequencing technology-specific settings; Setting -x changes multiple parameters unless overriden. pacbio: -k17 -W40 -r10 -A1 -B1 -O1 -E1 -L0  (PacBio reads to ref). ont2d: -k14 -W20 -r10 -A1 -B1 -O1 -E1 -L0  (Oxford Nanopore 2D-reads to ref). intractg: -B9 -O16 -L5  (intra-species contigs to ref).",
                        "label": "Sequencing technology-specific settings"
                    },
                    {
                        "sbg:category": "BWA Read Group Options",
                        "sbg:toolDefaultValue": "Constructed from per-attribute parameters or inferred from metadata.",
                        "id": "#read_group_header",
                        "description": "Read group header line such as '@RG\\tID:foo\\tSM:bar'.  This value takes precedence over per-attribute parameters.",
                        "type": [
                            "null",
                            "string"
                        ],
                        "label": "Read group header"
                    },
                    {
                        "sbg:category": "Configuration",
                        "type": [
                            "null",
                            "string"
                        ],
                        "label": "Output SAM/BAM file name",
                        "id": "#output_name",
                        "description": "Name of the output BAM file."
                    },
                    {
                        "sbg:category": "BWA Input/output options",
                        "type": [
                            "null",
                            {
                                "type": "array",
                                "items": "int"
                            }
                        ],
                        "id": "#output_in_xa",
                        "inputBinding": {
                            "itemSeparator": ",",
                            "prefix": "-h",
                            "sbg:cmdInclude": true,
                            "separate": false
                        },
                        "description": "If there are <INT hits with score >80% of the max score, output all in XA. This array should have no more than two values.",
                        "sbg:toolDefaultValue": "[5, 200]",
                        "label": "Output in XA"
                    },
                    {
                        "sbg:category": "BWA Input/output options",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "id": "#output_header",
                        "inputBinding": {
                            "prefix": "-V",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Output the reference FASTA header in the XR tag.",
                        "label": "Output header"
                    },
                    {
                        "sbg:category": "Execution",
                        "sbg:toolDefaultValue": "SortedBAM",
                        "id": "#output_format",
                        "description": "Specify output format (Sorted BAM option will output coordinate sorted BAM).",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "output_format",
                                "symbols": [
                                    "SAM",
                                    "BAM",
                                    "SortedBAM"
                                ]
                            }
                        ],
                        "label": "Output format"
                    },
                    {
                        "sbg:category": "BWA Input/output options",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "id": "#output_alignments",
                        "inputBinding": {
                            "prefix": "-a",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Output all alignments for SE or unpaired PE.",
                        "label": "Output alignments"
                    },
                    {
                        "sbg:category": "BWA Scoring options",
                        "type": [
                            "null",
                            "int"
                        ],
                        "id": "#mismatch_penalty",
                        "inputBinding": {
                            "prefix": "-B",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Penalty for a mismatch.",
                        "sbg:toolDefaultValue": "4",
                        "label": "Mismatch penalty"
                    },
                    {
                        "sbg:category": "BWA Algorithm options",
                        "type": [
                            "null",
                            "int"
                        ],
                        "id": "#minimum_seed_length",
                        "inputBinding": {
                            "prefix": "-k",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Minimum seed length for BWA MEM.",
                        "sbg:toolDefaultValue": "19",
                        "label": "Minimum seed length"
                    },
                    {
                        "sbg:category": "BWA Input/output options",
                        "type": [
                            "null",
                            "int"
                        ],
                        "id": "#minimum_output_score",
                        "inputBinding": {
                            "prefix": "-T",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Minimum alignment score for a read to be output in SAM/BAM.",
                        "sbg:toolDefaultValue": "30",
                        "label": "Minimum alignment score for a read to be output in SAM/BAM"
                    },
                    {
                        "sbg:category": "BWA Algorithm options",
                        "type": [
                            "null",
                            "string"
                        ],
                        "id": "#mate_rescue_rounds",
                        "inputBinding": {
                            "prefix": "-m",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Perform at most INT rounds of mate rescues for each read.",
                        "sbg:toolDefaultValue": "50",
                        "label": "Mate rescue rounds"
                    },
                    {
                        "sbg:category": "BWA Input/output options",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "id": "#mark_shorter",
                        "inputBinding": {
                            "prefix": "-M",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Mark shorter split hits as secondary.",
                        "label": "Mark shorter"
                    },
                    {
                        "sbg:category": "BWA Input/output options",
                        "type": [
                            "null",
                            "string"
                        ],
                        "id": "#insert_string_to_header",
                        "inputBinding": {
                            "prefix": "-H",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Insert STR to header if it starts with @; or insert lines in FILE.",
                        "label": "Insert string to output SAM or BAM header"
                    },
                    {
                        "sbg:category": "Input files",
                        "sbg:fileTypes": "FASTQ, FASTQ.GZ, FQ, FQ.GZ",
                        "id": "#input_reads",
                        "description": "Input sequence reads.",
                        "required": true,
                        "label": "Input reads",
                        "type": [
                            {
                                "type": "array",
                                "name": "input_reads",
                                "items": "File"
                            }
                        ]
                    },
                    {
                        "sbg:category": "BWA Input/output options",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "id": "#ignore_alt_file",
                        "inputBinding": {
                            "prefix": "-j",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Treat ALT contigs as part of the primary assembly (i.e. ignore <idxbase>.alt file).",
                        "label": "Ignore ALT file"
                    },
                    {
                        "sbg:category": "BWA Scoring options",
                        "type": [
                            "null",
                            {
                                "type": "array",
                                "items": "int"
                            }
                        ],
                        "id": "#gap_open_penalties",
                        "inputBinding": {
                            "itemSeparator": ",",
                            "prefix": "-O",
                            "sbg:cmdInclude": true,
                            "separate": false
                        },
                        "description": "Gap open penalties for deletions and insertions. This array can't have more than two values.",
                        "sbg:toolDefaultValue": "[6,6]",
                        "label": "Gap open penalties"
                    },
                    {
                        "sbg:category": "BWA Scoring options",
                        "type": [
                            "null",
                            {
                                "type": "array",
                                "items": "int"
                            }
                        ],
                        "id": "#gap_extension_penalties",
                        "inputBinding": {
                            "itemSeparator": ",",
                            "prefix": "-E",
                            "sbg:cmdInclude": true,
                            "separate": false
                        },
                        "description": "Gap extension penalty; a gap of size k cost '{-O} + {-E}*k'. This array can't have more than two values.",
                        "sbg:toolDefaultValue": "[1,1]",
                        "label": "Gap extension"
                    },
                    {
                        "sbg:category": "Execution",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "id": "#filter_out_secondary_alignments",
                        "description": "Filter out secondary alignments. Sambamba view tool will be used to perform this internally.",
                        "sbg:toolDefaultValue": "False",
                        "sbg:stageInput": null,
                        "label": "Filter out secondary alignments"
                    },
                    {
                        "sbg:category": "BWA Algorithm options",
                        "type": [
                            "null",
                            "int"
                        ],
                        "id": "#dropoff",
                        "inputBinding": {
                            "prefix": "-d",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Off-diagonal X-dropoff.",
                        "sbg:toolDefaultValue": "100",
                        "label": "Dropoff"
                    },
                    {
                        "sbg:category": "BWA Algorithm options",
                        "type": [
                            "null",
                            "float"
                        ],
                        "id": "#drop_chains_fraction",
                        "inputBinding": {
                            "prefix": "-D",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Drop chains shorter than FLOAT fraction of the longest overlapping chain.",
                        "sbg:toolDefaultValue": "0.50",
                        "label": "Drop chains fraction"
                    },
                    {
                        "sbg:category": "BWA Algorithm options",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "id": "#discard_exact_matches",
                        "inputBinding": {
                            "prefix": "-e",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Discard full-length exact matches.",
                        "label": "Discard exact matches"
                    },
                    {
                        "sbg:category": "BWA Algorithm options",
                        "type": [
                            "null",
                            "int"
                        ],
                        "id": "#discard_chain_length",
                        "inputBinding": {
                            "prefix": "-W",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Discard a chain if seeded bases shorter than INT.",
                        "sbg:toolDefaultValue": "0",
                        "label": "Discard chain length"
                    },
                    {
                        "sbg:category": "Samblaster parameters",
                        "sbg:toolDefaultValue": "MarkDuplicates",
                        "id": "#deduplication",
                        "description": "Use Samblaster for finding duplicates on sequence reads.",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "deduplication",
                                "symbols": [
                                    "None",
                                    "MarkDuplicates",
                                    "RemoveDuplicates"
                                ]
                            }
                        ],
                        "label": "PCR duplicate detection"
                    },
                    {
                        "sbg:category": "BWA Scoring options",
                        "type": [
                            "null",
                            {
                                "type": "array",
                                "items": "int"
                            }
                        ],
                        "id": "#clipping_penalty",
                        "inputBinding": {
                            "itemSeparator": ",",
                            "prefix": "-L",
                            "sbg:cmdInclude": true,
                            "separate": false
                        },
                        "description": "Penalty for 5'- and 3'-end clipping.",
                        "sbg:toolDefaultValue": "[5,5]",
                        "label": "Clipping penalty"
                    },
                    {
                        "sbg:category": "BWA Algorithm options",
                        "type": [
                            "null",
                            "int"
                        ],
                        "id": "#band_width",
                        "inputBinding": {
                            "prefix": "-w",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Band width for banded alignment.",
                        "sbg:toolDefaultValue": "100",
                        "label": "Band width"
                    },
                    {
                        "sbg:category": "BWA Input/output options",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "id": "#append_comment",
                        "inputBinding": {
                            "prefix": "-C",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Append FASTA/FASTQ comment to SAM output.",
                        "label": "Append comment"
                    }
                ],
                "sbg:job": {
                    "allocatedResources": {
                        "mem": 4096,
                        "cpu": 3
                    },
                    "inputs": {
                        "rg_data_submitting_center": "",
                        "output_name": "",
                        "deduplication": "MarkDuplicates",
                        "rg_library_id": "",
                        "sambamba_threads": null,
                        "reserved_threads": 3,
                        "rg_platform_unit_id": "",
                        "rg_sample_id": "",
                        "reference_index_tar": {
                            "size": 0,
                            "class": "File",
                            "secondaryFiles": [
                                {
                                    "path": ".amb"
                                },
                                {
                                    "path": ".ann"
                                },
                                {
                                    "path": ".bwt"
                                },
                                {
                                    "path": ".pac"
                                },
                                {
                                    "path": ".sa"
                                }
                            ],
                            "path": "/path/to/reference.b37.fasta.gz.tar"
                        },
                        "threads": null,
                        "total_memory": null,
                        "rg_median_fragment_length": "",
                        "filter_out_secondary_alignments": false,
                        "rg_platform": null,
                        "skip_seeds": null,
                        "rg_id": "rg_id-string-value",
                        "band_width": null,
                        "read_group_header": "",
                        "sort_memory": 0,
                        "output_format": null,
                        "input_reads": [
                            {
                                "metadata": {
                                    "sample_id": "dnk_sample",
                                    "platform": "HiSeq X Ten",
                                    "paired_end": "2"
                                },
                                "class": "File",
                                "secondaryFiles": [],
                                "size": 30000000000,
                                "path": "/path/to/LP6005524-DNA_C01_lane_7.sorted.converted.filtered.pe_1.gz"
                            },
                            {
                                "path": "/path/to/LP6005524-DNA_C01_lane_7.sorted.converted.filtered.pe_2.gz"
                            }
                        ]
                    }
                },
                "sbg:createdBy": "vladimirk",
                "sbg:revisionsInfo": [
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1458653351,
                        "sbg:revision": 0,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1458653365,
                        "sbg:revision": 1,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1458653397,
                        "sbg:revision": 2,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1458653457,
                        "sbg:revision": 3,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1458735076,
                        "sbg:revision": 4,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1458744323,
                        "sbg:revision": 5,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1460644019,
                        "sbg:revision": 6,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1461676796,
                        "sbg:revision": 7,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1461677982,
                        "sbg:revision": 8,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1461691955,
                        "sbg:revision": 9,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1462799414,
                        "sbg:revision": 10,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1462800334,
                        "sbg:revision": 11,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1465226602,
                        "sbg:revision": 12,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1465997760,
                        "sbg:revision": 13,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1465999303,
                        "sbg:revision": 14,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1466161520,
                        "sbg:revision": 15,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": "Change red port type - FIX.",
                        "sbg:modifiedOn": 1468500423,
                        "sbg:revision": 16,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": "port renamed to reference index tar",
                        "sbg:modifiedOn": 1469448834,
                        "sbg:revision": 17,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": "reference_index_tar renamed in other expressions.",
                        "sbg:modifiedOn": 1469449249,
                        "sbg:revision": 18,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1470746327,
                        "sbg:revision": 19,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": "SortedBAM is default output type.",
                        "sbg:modifiedOn": 1470747524,
                        "sbg:revision": 20,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": "Fix for single-ended reads.",
                        "sbg:modifiedOn": 1471860342,
                        "sbg:revision": 21,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": "instanceof fix for common filename",
                        "sbg:modifiedOn": 1471864768,
                        "sbg:revision": 22,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": "[]concat(input_reads)",
                        "sbg:modifiedOn": 1471866804,
                        "sbg:revision": 23,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": "SortedBAM default - returned revision.",
                        "sbg:modifiedOn": 1471868494,
                        "sbg:revision": 24,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": "Fix for same common sub-strings.",
                        "sbg:modifiedOn": 1471879715,
                        "sbg:revision": 25,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": "Fix to support single FASTQ input.",
                        "sbg:modifiedOn": 1471880959,
                        "sbg:revision": 26,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": "reads_size for sorter made more robust.",
                        "sbg:modifiedOn": 1472054931,
                        "sbg:revision": 27,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": "FASTQs size use for memory and CPU estimation removed!",
                        "sbg:modifiedOn": 1472056751,
                        "sbg:revision": 28,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": "reads size removed from estimating number of CPUs",
                        "sbg:modifiedOn": 1472057639,
                        "sbg:revision": 29,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": "Added reference_genome metadata field to SAM/BAM.",
                        "sbg:modifiedOn": 1472122448,
                        "sbg:revision": 30,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": "BAM/SAM metadata, reference_genome in the same format as in drop down menu.",
                        "sbg:modifiedOn": 1472126991,
                        "sbg:revision": 31,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": "Added reserved number of threads as an input.",
                        "sbg:modifiedOn": 1476202723,
                        "sbg:revision": 32,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": "added piping command status check",
                        "sbg:modifiedOn": 1477616482,
                        "sbg:revision": 33,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": "BAM index output port removed",
                        "sbg:modifiedOn": 1479314087,
                        "sbg:revision": 34,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": "Support for files with \"HiSeq X Ten\" in platform metadata field",
                        "sbg:modifiedOn": 1479483637,
                        "sbg:revision": 35,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:revisionNotes": "fix platform",
                        "sbg:modifiedOn": 1479492159,
                        "sbg:revision": 36,
                        "sbg:modifiedBy": "bogdang"
                    },
                    {
                        "sbg:revisionNotes": "Added RG ID as optional input parameter",
                        "sbg:modifiedOn": 1480437238,
                        "sbg:revision": 37,
                        "sbg:modifiedBy": "vladimirk"
                    }
                ],
                "sbg:toolAuthor": "Heng Li",
                "sbg:contributors": [
                    "bogdang",
                    "bix-demo",
                    "vladimirk"
                ],
                "outputs": [
                    {
                        "sbg:fileTypes": "SAM, BAM",
                        "id": "#aligned_reads",
                        "outputBinding": {
                            "glob": "{*.sam,*.bam}",
                            "sbg:metadata": {
                                "reference_genome": {
                                    "script": "{\n  reference_file = $job.inputs.reference_index_tar.path.split('/')[$job.inputs.reference_index_tar.path.split('/').length-1]\n  name = reference_file.slice(0, -4) // cut .tar extension \n  \n  name_list = name.split('.')\n  ext = name_list[name_list.length-1]\n\n  if (ext == 'gz' || ext == 'GZ'){\n    a = name_list.pop() // strip fasta.gz\n    a = name_list.pop()\n  } else\n    a = name_list.pop() //strip only fasta/fa\n  \n  return name_list.join('.')\n  \n}",
                                    "engine": "#cwl-js-engine",
                                    "class": "Expression"
                                }
                            },
                            "sbg:inheritMetadataFrom": "#input_reads",
                            "secondaryFiles": [
                                ".bai",
                                "^.bai"
                            ]
                        },
                        "description": "Aligned reads.",
                        "type": [
                            "null",
                            "File"
                        ],
                        "label": "Aligned SAM/BAM"
                    }
                ],
                "sbg:toolkit": "BWA"
            },
            "outputs": [
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.aligned_reads"
                }
            ],
            "inputs": [
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.verbose_level"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.use_soft_clipping"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.unpaired_read_penalty"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.total_memory",
                    "default": 54
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.threads",
                    "default": 30
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.speficy_distribution_parameters"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.sort_memory"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.smart_pairing_in_input_fastq"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.skip_seeds"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.skip_pairing"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.skip_mate_rescue"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.select_seeds"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.seed_occurrence_for_the_3rd_round"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.score_for_a_sequence_match"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.sambamba_threads",
                    "default": 30
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.rg_sample_id"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.rg_platform_unit_id"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.rg_platform"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.rg_median_fragment_length"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.rg_library_id"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.rg_id"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.rg_data_submitting_center"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.reserved_threads"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.reference_index_tar",
                    "source": [
                        "#BWA_INDEX.indexed_reference"
                    ]
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.read_type"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.read_group_header"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.output_name"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.output_in_xa"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.output_header"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.output_format",
                    "default": "SortedBAM"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.output_alignments"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.mismatch_penalty"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.minimum_seed_length"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.minimum_output_score"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.mate_rescue_rounds"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.mark_shorter",
                    "default": true
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.insert_string_to_header"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.input_reads",
                    "source": [
                        "#SBG_Pair_FASTQs_by_Metadata.tuple_list"
                    ]
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.ignore_alt_file"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.gap_open_penalties"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.gap_extension_penalties"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.filter_out_secondary_alignments",
                    "default": true
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.dropoff"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.drop_chains_fraction"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.discard_exact_matches"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.discard_chain_length"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.deduplication",
                    "default": "MarkDuplicates"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.clipping_penalty"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.band_width"
                },
                {
                    "id": "#BWA_MEM_Bundle_0_7_13.append_comment"
                }
            ],
            "sbg:x": 942.3334725035608
        },
        {
            "id": "#SBG_Pair_FASTQs_by_Metadata",
            "sbg:y": 256.33335844675776,
            "run": {
                "sbg:modifiedOn": 1489665046,
                "sbg:id": "bix-demo/sbgtools-demo/sbg-pair-fastqs-by-metadata/7",
                "id": "https://api.sbgenomics.com/v2/apps/bix-demo/sbgtools-demo/sbg-pair-fastqs-by-metadata/7/raw/",
                "sbg:cmdPreview": "python pair_fastqs_by_metadata.py --fastq_list /asda/dsa/sda/sda/fasta1.fastq,/asda/dsa/sda/sda/fasta2.fastq,/asda/dsa/sda/sda/fasta3.fastq,/asda/dsa/sda/sda/fasta4.fastq --in_metafile job.json --out_metafile cwl.output.json",
                "description": "Tool accepts list of FASTQ files groups them into separate lists. This grouping is done using metadata values and their hierarchy (Sample ID > Library ID > Platform unit ID > File segment number) which should create unique combinations for each pair of FASTQ files. Important metadata fields are Sample ID, Library ID, Platform unit ID and File segment number. Not all of these four metadata fields are required, but the present set has to be sufficient to create unique combinations for each pair of FASTQ files. Files with no paired end metadata are grouped in the same way as the ones with paired end metadata, generally they should be alone in a separate list. Files with no metadata set will be grouped together, and there will be an error raised if there are more than 2 of these files together. \n\nIf there are more than two files in a group, this is considered an error, and the user should check if the metadata fields for those files are set properly. Also if there is a file that has paired end metadata set and is grouped with another with no paired end metadata, the tool will return an error. If there is only one file with paired end metadata set and it doesn't have a pair provided, it will be grouped into a separate list.\n\nCheck for metadata errors in job.err.log, they will point to the files whose metadata should be checked.",
                "successCodes": [],
                "sbg:sbgMaintained": false,
                "sbg:categories": [
                    "Converters",
                    "Other"
                ],
                "sbg:project": "bix-demo/sbgtools-demo",
                "sbg:image_url": null,
                "stdin": "",
                "requirements": [
                    {
                        "fileDef": [
                            {
                                "fileContent": "import functools\nimport json\nimport itertools\nimport docopt\nimport sys\nUSAGE = \"\"\"\n    Usage:\n        sbg_pair_fastqs_by_metadata.py --fastq_list FILE... --in_metafile FILE --out_metafile FILE [options]\n\n    Description:\n        Tool accepts list of FASTQ files for one sample as the input and groups them into pairs\n        (two files for each paired end). This grouping is done using metadata values that are creating\n        unique combination for each pair or of FASTQ files. Metadata that fields that are uniquely defining\n        one FASTQ pair are Sample ID, Library ID, Platform Unit ID and File Segment Number.\n        Listed order of metadata fields is also representing their hierarchy in the metadata structure.\n        Not all of these four metadata fields are required, but the present set has to be sufficient to create\n        unique combinations for each pair of FASTQ files. If multiple files have the same metadata and they can't\n        be paired in the list of 2 elements, the tool will return a metadata error so the metadata can be properly set.\n\n    Options:\n\n        --help                                Show help dialog.\n\n        --version                             Tool version.\n\n        --fastq_list FILE...                  List of the FASTQ files with properly set metadata fields.\n\n        --in_metafile FILE                    File from which necessary metadata information will be extracted.\n                                              Expected value for the SBG platform is job.json. [Default: job.json]\n\n        --out_metafile FILE                   File into which necessary file structure is going to be written.\n                                              Expected value for the SBG platform is cwl.output.json.\n                                              [Default: cwl.output.json]\n\n\n\"\"\"\n\n\nclass MetadataError(Exception):\n    # Class for handling groups where one file has paired end metadata set and other doesn't\n    def __init__(self, value):\n        self.value = value\n\n    def __str__(self):\n        return repr(self.value)\n\n\ndef make_rg_id(metadata_key, input1):\n\n    # Function that gets all the metadata fields that are set for a file, so it can\n    # sort the files based on this metadata for grouping\n\n    input_meta = input1['metadata']\n    s = '__!__'\n    rg = list()\n    for key in ['sample_group', 'sample_id', 'library_id', 'platform_unit_id']:\n        if key in input_meta:\n            rg.append(input_meta[key])\n        else:\n            rg.append('')\n    if 'file_segment_number' in input_meta and input_meta['file_segment_number'] is not None:\n        rg.append(str(input_meta['file_segment_number']))\n    else:\n        rg.append('')\n\n    # Metadata hierarchy: Sample_ID > Library_ID > Platform_Unit_ID > File_Segment_Number\n    # By default files will be split using file segment number, which is the lowest in\n    # The metadata hierarchy, if they have the same Sample ID or any of the higher tiers, they will be grouped by this\n    rg_map = {\n        'sample_id': rg[:2],\n        'library_id': rg[:3],\n        'platform_unit_id': rg[:4],\n        'file_segment_number': rg[:5],\n    }\n\n    return s.join(rg_map[metadata_key]) if metadata_key in rg_map else getattr(input_meta, metadata_key)\n\n\ndef group_inputs(inp):\n\n    metadata_key = 'file_segment_number'\n    key_getter = functools.partial(make_rg_id, metadata_key)\n    files = sorted([x for x in inp], key=key_getter)\n    # Files are split into lists of same metadata hierarchies\n    tuple_list_temp = [[f for f in val] for key, val in itertools.groupby(files, key_getter)]\n    tuple_list = list()\n    # Grouping files based on metadata\n    for elem in tuple_list_temp:\n        # Check for multiple files with same metadata - shouldn't be more than 2 grouped\n        if len(elem) > 2:\n            error_msg = 'Metadata error:'\n            error_msg += 'More than two files are grouped! Check if you have set the metadata for these files: '\n            for i in elem:\n                error_msg += i['path'].split(\"/\")[-1]\n                error_msg += ' '\n            raise MetadataError(error_msg)\n            # break\n        if 'paired_end' in elem[0]['metadata'] and len(elem) > 1:\n            if 'paired_end' not in elem[1]['metadata']:\n                # If second doesn't have paired_end and first does - fail and raise an exception\n                error_msg = 'Metadata error:'\n                error_msg += 'paired_end metadata not set for one of two files. Check metadata for file: '\n                error_msg += elem[1]['path'].split(\"/\")[-1]\n                raise MetadataError(error_msg)\n                # break\n            # If set, check for second\n            if elem[0]['metadata']['paired_end'] == \"2\":\n                tuple_list.append([elem[0], elem[1]])\n                continue\n            else:\n                tuple_list.append([elem[0], elem[1]])\n                continue\n        else:\n            # if first file doesn't have paired_end and second file does - fail and raise an exception\n            if len(elem) == 2 and 'paired_end' in elem[0]['metadata']:\n                if 'paired_end' in elem[1]['metadata']:\n                    error_msg = 'Metadata error:'\n                    error_msg += 'paired_end metadata not set for one of two files. Check metadata for file: '\n                    error_msg += elem[0]['path'].split(\"/\")[-1]\n                    # break\n            # group together singular files, with no paired_end set (single pair sequencing)\n            if len(elem) == 1:\n                tuple_list.append([elem[0]])\n            else:\n                tuple_list.append([elem[0], elem[1]])\n            continue\n\n    return tuple_list\n\n\ndef main():\n\n    args = docopt.docopt(USAGE, version=1.0)\n\n    job_json = args[\"--in_metafile\"]\n    job_json_file = open(job_json)\n    job_json_str = job_json_file.read()\n    job_json_dict = json.loads(job_json_str)\n    file_list = [elem for elem in job_json_dict['inputs'][\"fastq_list\"]]\n    tuple_list = {}\n    try:\n        tuple_list = group_inputs(file_list)\n    except MetadataError as err:\n        sys.stderr.write(str(err))\n        exit(1)\n\n    tuple_list_dict = {\"tuple_list\": tuple_list}\n    with open(args[\"--out_metafile\"], 'w') as p:\n        json.dump(tuple_list_dict, p)\n    exit(0)\n\nif __name__ == '__main__':\n    main()",
                                "filename": "pair_fastqs_by_metadata.py"
                            }
                        ],
                        "class": "CreateFileRequirement"
                    }
                ],
                "sbg:revision": 7,
                "sbg:createdOn": 1450911289,
                "hints": [
                    {
                        "dockerImageId": "d41a0837ab81",
                        "class": "DockerRequirement",
                        "dockerPull": "images.sbgenomics.com/nikola_jovanovic/sbg-pair-fastqs-by-metadata:v1"
                    },
                    {
                        "value": 1,
                        "class": "sbg:CPURequirement"
                    },
                    {
                        "value": 1024,
                        "class": "sbg:MemRequirement"
                    }
                ],
                "label": "SBG Pair FASTQs by Metadata",
                "arguments": [
                    {
                        "position": 1,
                        "prefix": "--in_metafile",
                        "separate": true,
                        "valueFrom": "job.json"
                    },
                    {
                        "position": 2,
                        "prefix": "--out_metafile",
                        "separate": true,
                        "valueFrom": "cwl.output.json"
                    }
                ],
                "sbg:validationErrors": [],
                "baseCommand": [
                    "python",
                    "pair_fastqs_by_metadata.py"
                ],
                "temporaryFailCodes": [],
                "sbg:latestRevision": 7,
                "stdout": "",
                "sbg:modifiedBy": "nikola_jovanovic",
                "cwlVersion": "sbg:draft-2",
                "sbg:license": "Apache License 2.0",
                "sbg:appVersion": [
                    "sbg:draft-2"
                ],
                "class": "CommandLineTool",
                "sbg:createdBy": "bix-demo",
                "inputs": [
                    {
                        "sbg:stageInput": "link",
                        "sbg:fileTypes": "FASTQ, FQ, FASTQ.GZ, FQ.GZ",
                        "id": "#fastq_list",
                        "inputBinding": {
                            "position": 0,
                            "itemSeparator": ",",
                            "prefix": "--fastq_list",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "List of the FASTQ files with properly set metadata fileds.",
                        "type": [
                            {
                                "type": "array",
                                "items": "File"
                            }
                        ],
                        "label": "List of FASTQ files"
                    }
                ],
                "sbg:job": {
                    "allocatedResources": {
                        "mem": 1024,
                        "cpu": 1
                    },
                    "inputs": {
                        "fastq_list": [
                            {
                                "size": 0,
                                "class": "File",
                                "secondaryFiles": [],
                                "path": "/asda/dsa/sda/sda/fasta1.fastq"
                            },
                            {
                                "path": "/asda/dsa/sda/sda/fasta2.fastq"
                            },
                            {
                                "path": "/asda/dsa/sda/sda/fasta3.fastq"
                            },
                            {
                                "path": "/asda/dsa/sda/sda/fasta4.fastq"
                            }
                        ]
                    }
                },
                "sbg:projectName": "SBGTools - Demo New",
                "sbg:revisionsInfo": [
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1450911289,
                        "sbg:revision": 0,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1450911290,
                        "sbg:revision": 1,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1450911290,
                        "sbg:revision": 2,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1463403276,
                        "sbg:revision": 3,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:revisionNotes": "Link fastq_list",
                        "sbg:modifiedOn": 1469015151,
                        "sbg:revision": 4,
                        "sbg:modifiedBy": "markop"
                    },
                    {
                        "sbg:revisionNotes": "Added support for single file.",
                        "sbg:modifiedOn": 1472059795,
                        "sbg:revision": 5,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1489510320,
                        "sbg:revision": 6,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1489665046,
                        "sbg:revision": 7,
                        "sbg:modifiedBy": "nikola_jovanovic"
                    }
                ],
                "sbg:toolAuthor": "Djordje Klisic, Seven Bridges Genomics, <djordje.klisic@sbgenomics.com>",
                "sbg:contributors": [
                    "vladimirk",
                    "markop",
                    "nikola_jovanovic",
                    "bix-demo"
                ],
                "outputs": [
                    {
                        "type": [
                            "null",
                            {
                                "type": "array",
                                "items": "File"
                            }
                        ],
                        "id": "#tuple_list"
                    }
                ],
                "sbg:toolkit": "SBGTools"
            },
            "outputs": [
                {
                    "id": "#SBG_Pair_FASTQs_by_Metadata.tuple_list"
                }
            ],
            "inputs": [
                {
                    "id": "#SBG_Pair_FASTQs_by_Metadata.fastq_list",
                    "source": [
                        "#SBG_FASTQ_Quality_Adjuster.result"
                    ]
                }
            ],
            "sbg:x": 752.3333843019286
        },
        {
            "id": "#SBG_FASTQ_Quality_Adjuster",
            "scatter": "#SBG_FASTQ_Quality_Adjuster.fastq",
            "sbg:y": 246.09373995040806,
            "run": {
                "sbg:modifiedOn": 1495706394,
                "sbg:id": "bix-demo/sbgtools-demo/sbg-fastq-quality-adjuster/12",
                "id": "https://api.sbgenomics.com/v2/apps/bix-demo/sbgtools-demo/sbg-fastq-quality-adjuster/12/raw/",
                "description": "This app detects quality score format used in input FASTQ file. By default, FASTQ quality score is then converted to standard Sanger quality score if conversion is required. \nIf \"Detection mode\" is selected, quality scale format is recognized and added to metadata, but conversion is not performed.\nSupported source formats are: Solexa, Illumina 1.3, Illumina 1.5 and Illumina 1.8.",
                "requirements": [
                    {
                        "fileDef": [
                            {
                                "fileContent": "\"\"\"\nUsage:\n    sbg_fastq_quality_scale_adjuster.py --fastq FILE [--no_conversion]\n\nOptions:\n    -h, --help          Show this message.\n\n    -f, --fastq FILE    Input FASTQ file.\n    \n    --no_conversion     Detect quality scale format and add it to metadata, but do not convert to Sanger.\n\n\"\"\"\n\nfrom docopt import docopt\nimport os\nimport gzip\nimport itertools as it\nimport shutil\nimport sys\nfrom math import log10\nfrom subprocess import Popen\nfrom CWL import CWL, CWLFile\nfrom functools import reduce\nimport subprocess\n\nargs = docopt(__doc__, version='1.0')\n\ninput_file = args['--fastq']\nno_conversion = args['--no_conversion']\n\nbase_name = input_file[input_file.rfind('/')+1:input_file.rfind('.') if input_file.rfind('.') != -1 else None]\nr_ext = input_file[input_file.rfind('.')+1:] if input_file.rfind('.') else \"\"\nl_ext = base_name.split('.')[-1].lower()\nif l_ext == 'fastq' or l_ext == 'fq':\n    if not r_ext == 'fastq' and not r_ext == 'fq':\n        base_name = base_name[:base_name.rfind('.')]\noutput_file = base_name + '.std.fastq'\n\n\n\"\"\"input and output names defined above\"\"\"\n\nclass myGzipFile(gzip.GzipFile):\n    def __enter__(self, *args, **kwargs):\n        if self.fileobj is None:\n            raise ValueError(\"I/O operation on closed GzipFile object\")\n        return self\n\n    def __exit__(self, *args, **kwargs):\n        self.close()\n\n\ndef extremes(a, b):\n    if a is False:\n        return b, b\n    return min(a[0], b), max(a[1], b)\n\n\ndef walk_qualities(f, sample_size=1000):\n    for i in range(sample_size * 4):\n        try:\n            line = next(f)\n        except StopIteration:\n            return\n        if i % 4 == 3:\n            yield line.rstrip()\n\n\ndef sniff(path):\n    with open(path, 'rb') as f:\n        gz = f.read(2) == b'\\x1f\\x8b'\n    opn = myGzipFile if gz else open\n    with opn(path) as f:\n        ord_min, ord_max = reduce(extremes, list(it.chain(*walk_qualities(f))), False)\n        if isinstance(ord_min,str):\n            ord_min, ord_max = ord(ord_min), ord(ord_max)\n        return get_scale(ord_min, ord_max)\n\n\ndef get_scale(ord_min, ord_max):\n    options = {\n        'illumina13': (64, 105),\n        'illumina15': (66, 105),\n        'sanger': (33, 126),\n        'solexa': (59, 105),\n    }\n    fits = [(k, v) for k, v in options.items() if v[0] <= ord_min and v[1] >= ord_max]\n    if not fits:\n        message = 'Quality scale for range (%s, %s) not found.' % (ord_min, ord_max)\n        raise Exception(message)\n        # Return narrowest range\n    return reduce(lambda a, b: a if a[1][1] - a[1][0] < b[1][1] - b[1][0] else b, fits)[0]\n\ndef qsolexa(x):\n    return chr(int(round(10 * log10(10.0**((ord(x)-64)/10.0)+1))) + 33)\n\n\ndef qillumina13(x):\n    return chr(ord(x) - 31)\n\n\ndef qillumina15(x):\n    return chr(ord(x) - 31) if ord(x)-64 > 2 else chr(33)\n\n\ndef qillumina18(x):\n    return x\n\n\n\"\"\"detect quality scale format\"\"\"\n\nmeta_qual = sniff(input_file)\n\n\n\"\"\"Add output quality scale format to metadata\"\"\"\ncwl = CWL()\ncwl.parse_job_json()\ninput_metadata = cwl.inputs['fastq']['metadata']\n\n\"\"\"adjust quality scale if needed\"\"\"\nif no_conversion:\n    if input_file.rfind(\".gz\") == len(input_file) - 3:\n        output_file = output_file + \".gz\"\n    os.rename(input_file, output_file)\nelse:\n    if meta_qual == 'illumina13':\n        proc = qillumina13\n    elif meta_qual == 'illumina15':\n        proc = qillumina15\n    elif meta_qual == 'solexa':\n        proc = qsolexa\n    else:\n        proc = None\n    \n    if proc == qsolexa: \n        with open(input_file, 'rb') as f:\n            gz = f.read(2) == b'\\x1f\\x8b'\n        open_gz = myGzipFile if gz else open\n        with open(output_file, 'w') as out:\n            for i, line in enumerate(open_gz(input_file)):\n                if i % 4 == 3:\n                    line = line.strip()\n                    converted = ''.join(map(proc, line))\n                    out.write(converted + b'\\n')\n                else:\n                    out.write(line)\n        contents = \"Original fastq quality scale format was \" + meta_qual + \", and is converted to illumina18.\\n\"\n    elif proc is not None: #seqtk converter from illumina13-15\n        cmd = ['seqtk','seq','-Q64','-V',input_file,'>',output_file]\n        with open(output_file, 'w') as out:\n            p = Popen(cmd, stdout = out)\n            p.communicate()\n        contents = \"Original fastq quality scale format was \" + meta_qual + \", and is converted to illumina18.\\n\"\n    else:\n        if input_file.rfind(\".gz\") == len(input_file) - 3:\n            output_file = output_file + \".gz\"\n        os.rename(input_file, output_file)\n        contents = \"Original fastq quality scale format was illumina18. No conversion performed.\\n\"\n\n    sys.stderr.write(contents) #Write conversion to error log\n    meta_qual = 'sanger'\n\n    \noutput_cwl = CWLFile(os.path.abspath(output_file))\noutput_cwl.metadata = input_metadata\noutput_cwl.metadata['quality_scale'] = meta_qual\n\ncwl.make_cwl_output_json('cwl.output.json', {'result': output_cwl})",
                                "filename": "sbg_fastq_quality_scale_adjuster.py"
                            },
                            {
                                "fileContent": "import json\nfrom collections import defaultdict\nfrom copy import deepcopy\nfrom os.path import basename, abspath\n\n# constants\nINPUTS_KEY = 'inputs'\nMETADATA_KEY = 'metadata'\nNAME_KEY = 'name'\nPATH_KEY = 'path'\nCLASS_KEY = 'class'\nLOCATION_KEY = 'location'\nUNCATEGORIZED = 'uncategorized'\n\nclass CWLFile(object):\n    _metadata = None\n    _path = None\n\n    @property\n    def metadata(self):\n        return self._metadata\n\n    @metadata.setter\n    def metadata(self, value):\n        self._metadata = value\n\n    @metadata.deleter\n    def metadata(self):\n        del self._metadata\n\n    @property\n    def path(self):\n        return self._path\n\n    @path.setter\n    def path(self, value):\n        self._path = value\n\n    @path.deleter\n    def path(self):\n        del self._path\n\n    def __str__(self):\n        return self.path if self.path else ''\n\n    def __repr__(self):\n        return self.__str__()\n\n    def __init_str__(self, file: str):\n        self.metadata = {}\n        self.path = abspath(file)\n\n    def __init_dict__(self, file: dict):\n        self.metadata = deepcopy(file['metadata']) if file['metadata'] else {}\n        self.path = file['path'] if file['path'] else ''\n\n    def __init__(self, *args, **kwargs):\n        if (len(args) > 0):\n            if isinstance(args[0], str):\n                self.__init_str__(args[0])\n            elif isinstance(args[0], dict):\n                self.__init_dict__(args[0])\n            else:\n                raise Exception(\"Can\\'t make instance of class CWLFile. \"\n                                \"Argument have to be either instance of type str or dict. \")\n\n\n    def intersect_metadata(self, m2: dict):\n        \"\"\"\n        :param m2: Metadata dictionary\n        :return: None\n        \"\"\"\n        self.metadata = {k: v for k, v in self.metadata.items() if v == m2.get(k)}\n\n    def toJSON(self):\n        dict = {\n            CLASS_KEY: 'File',\n            PATH_KEY: self.__str__(),\n            NAME_KEY: basename(self.__str__()),\n            METADATA_KEY: self.metadata\n        }\n        return dict\n\nclass CWLGroup(dict):\n\n    def _leafs(self, obj, out: list):\n        \"\"\"\n        :param obj: CWLGroup node\n        :param out: Reference of output list\n        :return: None\n        \"\"\"\n        if isinstance(obj, list):\n            out.append(obj)\n        elif isinstance(obj, dict):\n            for _,value in obj.items():\n                self._leafs(value, out)\n        else:\n            raise Exception('Unexpected type to be flatten.')\n\n    def leafs(self):\n        \"\"\"\n        :return: List of groups located on leafs of grouped tree.\n        \"\"\"\n        out = list()\n        self._leafs(self, out)\n        return out\n\nclass CWL(object):\n\n    #private\n    _inputs = None\n    _job_json_path = ''\n    _cwl_output_json_path = ''\n\n    #properties\n    @property\n    def inputs(self):\n        return self._inputs\n\n    @property\n    def job_json_path(self):\n        return self._job_json_path\n\n    @job_json_path.setter\n    def job_json_path(self, value):\n        self._job_json_path = value\n\n    @job_json_path.deleter\n    def job_json_path(self):\n        del self._job_json_path\n\n    @property\n    def cwl_output_json_path(self):\n        return self._cwl_output_json_path\n\n    @cwl_output_json_path.setter\n    def cwl_output_json_path(self, value):\n        self._cwl_output_json_path = value\n\n    @cwl_output_json_path.deleter\n    def cwl_output_json_path(self):\n        del self._cwl_output_json_path\n\n    #methods\n    def __init__(self, job_json: str='job.json'):\n        self._inputs = dict()\n        self.parse_job_json(job_json_path=job_json)\n\n    def parse_job_json(self, job_json_path='job.json', key: str=None):\n        \"\"\"\n        :param job_json_path: Location of job.json file\n        :param key: Extract only specific key from job.json inputs\n        :return: None\n        \"\"\"\n        self.job_json_path = job_json_path\n        try:\n            with open(self.job_json_path) as job_json_file:\n                job_json = json.load(job_json_file)\n                if job_json and INPUTS_KEY in job_json:\n                    if key is None:\n                        for key in job_json[INPUTS_KEY]:\n                            self._inputs[key] = job_json[INPUTS_KEY][key]\n                    elif key in job_json[INPUTS_KEY]:\n                        inputs = job_json[INPUTS_KEY][key]\n                        self._inputs = inputs\n                    else:\n                        raise Exception('Key '+ key +' is not member of inputs property.')\n        except IOError:\n            raise Exception('ERROR parse_fastq: job.json file doesn\\'t exists')\n\n    def full_group_by(self, l, key=lambda x: x):\n        \"\"\"\n        :param l: List that will be grouped\n        :param key: Function used for creating keys in new Group \n        :return: Key, Value pairs\n        \"\"\"\n        d = defaultdict(list)\n        for item in l:\n            k = key(item)\n            if k is not None:\n                d[k].append(item)\n            else:\n                d[UNCATEGORIZED].append(item)\n        return d.items()\n\n    def group_by_metadata_key(self, metadata_key: str, inputs: list) -> CWLGroup:\n        \"\"\"\n        :param metadata_key: Key that is used for grouping\n        :param inputs: List of inputs that will be grouped\n        :return: Instance of CWLGroup after grouping by metadata_key\n        \"\"\"\n        return CWLGroup({key: [f for f in val]\n                for key, val in self.full_group_by(inputs, key=lambda x: x[METADATA_KEY][metadata_key]\n                                                                        if metadata_key in x[METADATA_KEY]\n                                                                        else None)})\n\n    def group_by(self, metadata_keys: list, input_key, sort_by_metadata_key: str=None) -> CWLGroup:\n        \"\"\"\n        :param metadata_keys: The keys that are used for grouping\n        :param input_key: input key in job.json inputs field\n        :param sort_by_metadata_key: Key used for sorting leafs\n        :return: Instance of CWLGroup after grouping by metadata_keys\n        \"\"\"\n        if isinstance(metadata_keys,list) and len(metadata_keys) > 0:\n            if input_key in self._inputs:\n                groups = self.group_by_metadata_key(metadata_key=metadata_keys[0],\n                                                    inputs=deepcopy(self._inputs)[input_key])\n                last_groups = [groups]\n                for i in range(1, len(metadata_keys)):\n                    metadata_key = metadata_keys[i]\n                    newGroups = list()\n                    for group in last_groups:\n                        for group_key in group:\n                            g = self.group_by_metadata_key(metadata_key=metadata_key, inputs=group[group_key])\n                            group[group_key] = g\n                            newGroups.append(group[group_key])\n                    last_groups = newGroups\n\n                if sort_by_metadata_key:\n                    for group in last_groups:\n                        for key in group:\n                            group[key].sort(key=lambda x: x[METADATA_KEY][sort_by_metadata_key])\n                return groups\n            else:\n                raise Exception('Error: ' + input_key + ' not member of ', self._inputs)\n        else:\n            raise Exception('Error: metadata_keys argument have to be non empty list.')\n\n    def create_out_json(self, file: CWLFile) -> dict:\n        \"\"\"\n        :param file: CWLFile object \n        :return: JSON representation of file \n        \"\"\"\n        out = {}\n        out[CLASS_KEY] = 'File'\n        out[PATH_KEY] = file.__str__()\n        out[NAME_KEY] = basename(file.__str__())\n        out[METADATA_KEY] = file.metadata\n        return out\n\n    def create_cwl_file(self, path: str, metadata: dict):\n        \"\"\"\n        :param path: Path to cwl file \n        :param metadata: Metadata information about file\n        :return: CWLFile\n        \"\"\"\n        cwl_file = CWLFile(path)\n        cwl_file.metadata = metadata\n        return cwl_file\n    def make_cwl_output_json(self, out_path: str, cwl_files: dict):\n        \"\"\"\n        :param out_path: Location where cwl.output.json will be created.\n        :param cwl_files: Files with metadata that will be written into cwl.output.json in the header field.\n        :param output_id: Output id in cwl.output.json\n        :return: None\n        \"\"\"\n        try:\n\n            with open(out_path, 'w') as out:\n                json.dump(cwl_files, out, default=lambda o: o.toJSON(), sort_keys=True, indent=4, separators=(',', ': '))\n\n        except Exception as e:\n            print ('Error: ' + str(e))",
                                "filename": "CWL.py"
                            }
                        ],
                        "class": "CreateFileRequirement"
                    },
                    {
                        "requirements": [
                            {
                                "class": "DockerRequirement",
                                "dockerPull": "rabix/js-engine"
                            }
                        ],
                        "class": "ExpressionEngineRequirement",
                        "id": "#cwl-js-engine"
                    }
                ],
                "successCodes": [],
                "sbg:sbgMaintained": false,
                "sbg:categories": [
                    "Converters",
                    "FASTQ-Processing"
                ],
                "sbg:project": "bix-demo/sbgtools-demo",
                "sbg:image_url": null,
                "stdin": "",
                "sbg:validationErrors": [],
                "y": 261,
                "sbg:revision": 12,
                "sbg:createdOn": 1470927070,
                "sbg:revisionNotes": "Added detection mode and switched to python3",
                "hints": [
                    {
                        "value": 1,
                        "class": "sbg:CPURequirement"
                    },
                    {
                        "value": {
                            "script": "{\n  if($job.inputs.total_memory){\n    return $job.inputs.total_memory * 1024\n  } else {\n    return 1000\n  }\n}",
                            "engine": "#cwl-js-engine",
                            "class": "Expression"
                        },
                        "class": "sbg:MemRequirement"
                    },
                    {
                        "dockerImageId": "",
                        "class": "DockerRequirement",
                        "dockerPull": "images.sbgenomics.com/bogdang/sbg_quality_scale_adjuster:2.0"
                    }
                ],
                "label": "SBG FASTQ Quality Adjuster",
                "sbg:cmdPreview": "python3 sbg_fastq_quality_scale_adjuster.py  --fastq /path/to/test.1.fastq",
                "arguments": [],
                "sbg:latestRevision": 12,
                "baseCommand": [
                    {
                        "script": "{\n  qscale = \"to be detected\"\n  \n  if ($job.inputs.fastq.metadata)\n      if ($job.inputs.fastq.metadata[\"quality_scale\"])\n      qscale = $job.inputs.fastq.metadata[\"quality_scale\"]  \n  \n  if ($job.inputs.used_quality_scale)\n    if ($job.inputs.used_quality_scale != null) \n      qscale = $job.inputs.used_quality_scale\n  \n  \n  if (qscale == \"sanger\" || qscale == \"illumina18\" ) \n  {// no conversion\n\treturn \"echo No conversion\"\n  }\n  else\n  {\n    return \"python3 sbg_fastq_quality_scale_adjuster.py\"\n  }\n}",
                        "engine": "#cwl-js-engine",
                        "class": "Expression"
                    }
                ],
                "temporaryFailCodes": [],
                "stdout": "",
                "sbg:modifiedBy": "bogdang",
                "cwlVersion": "sbg:draft-2",
                "sbg:license": "Apache License 2.0",
                "sbg:appVersion": [
                    "sbg:draft-2"
                ],
                "appUrl": "/u/bogdang/fastq-quality-converter/apps/#bogdang/fastq-quality-converter/sbg-fastq-quality-adjuster-seqtk/27",
                "class": "CommandLineTool",
                "x": 524,
                "inputs": [
                    {
                        "sbg:category": "Input",
                        "required": false,
                        "id": "#used_quality_scale",
                        "description": "Used quality scale of FASTQ reads.",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "used_quality_scale",
                                "symbols": [
                                    "sanger",
                                    "illumina18",
                                    "illumina13",
                                    "illumina15",
                                    "solexa"
                                ]
                            }
                        ],
                        "label": "Used quality scale"
                    },
                    {
                        "sbg:stageInput": null,
                        "sbg:category": "Execution",
                        "id": "#total_memory",
                        "sbg:toolDefaultValue": "1",
                        "description": "Total memory in GB.",
                        "required": false,
                        "label": "Total memory [GB]",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "Input",
                        "sbg:fileTypes": "FASTQ,FASTQ.GZ,FQ,FQ.GZ",
                        "id": "#fastq",
                        "inputBinding": {
                            "position": 1,
                            "sbg:cmdInclude": true,
                            "separate": true,
                            "valueFrom": {
                                "script": "{\n  qscale = \"to be detected\"\n  \n  if ($job.inputs.fastq.metadata)\n      if ($job.inputs.fastq.metadata[\"quality_scale\"])\n      qscale = $job.inputs.fastq.metadata[\"quality_scale\"]  \n  \n  if ($job.inputs.used_quality_scale)\n    if ($job.inputs.used_quality_scale != null) \n      qscale = $job.inputs.used_quality_scale\n  \n      \n  if (qscale == \"sanger\" || qscale == \"illumina18\" )   {\n    return \"\"\n  }\n  else\n  {\n    return \"--fastq \" + $job.inputs.fastq.path\n  }\n}",
                                "engine": "#cwl-js-engine",
                                "class": "Expression"
                            }
                        },
                        "description": "Input FASTQ file.",
                        "required": true,
                        "sbg:stageInput": "link",
                        "label": "Fastq file",
                        "type": [
                            "File"
                        ]
                    },
                    {
                        "sbg:stageInput": null,
                        "required": false,
                        "id": "#detection_mode",
                        "inputBinding": {
                            "position": 2,
                            "prefix": "--no_conversion",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Detect quality scale format, but do not perform conversion. Detected format will be added to metadata field 'Quality scale'.",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "label": "Detection mode (No conversion)"
                    }
                ],
                "sbg:job": {
                    "allocatedResources": {
                        "mem": 9216,
                        "cpu": 1
                    },
                    "inputs": {
                        "total_memory": 9,
                        "used_quality_scale": null,
                        "detection_mode": false,
                        "fastq": {
                            "metadata": {
                                "Quality scale": "sanger"
                            },
                            "class": "File",
                            "secondaryFiles": [],
                            "size": 0,
                            "path": "/path/to/test.1.fastq"
                        }
                    }
                },
                "sbg:createdBy": "vladimirk",
                "sbg:revisionsInfo": [
                    {
                        "sbg:revisionNotes": "Copy of bogdang/fastq-quality-converter/sbg-fastq-quality-adjuster/23",
                        "sbg:modifiedOn": 1470927070,
                        "sbg:revision": 0,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": "Copy of bogdang/fastq-quality-converter/sbg-fastq-quality-adjuster/24",
                        "sbg:modifiedOn": 1472559664,
                        "sbg:revision": 1,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": "Copy of bogdang/fastq-quality-converter/sbg-fastq-quality-adjuster/25",
                        "sbg:modifiedOn": 1474546255,
                        "sbg:revision": 2,
                        "sbg:modifiedBy": "bogdang"
                    },
                    {
                        "sbg:revisionNotes": "'sanger': (33, 74) instead 'sanger': (33, 126)",
                        "sbg:modifiedOn": 1475084132,
                        "sbg:revision": 3,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": "sanger 33:92",
                        "sbg:modifiedOn": 1475231421,
                        "sbg:revision": 4,
                        "sbg:modifiedBy": "bogdang"
                    },
                    {
                        "sbg:revisionNotes": "seqtk for converting from illumina13-15",
                        "sbg:modifiedOn": 1475234050,
                        "sbg:revision": 5,
                        "sbg:modifiedBy": "bogdang"
                    },
                    {
                        "sbg:revisionNotes": "fix for seqtk conversion from .gz files",
                        "sbg:modifiedOn": 1478274820,
                        "sbg:revision": 6,
                        "sbg:modifiedBy": "bogdang"
                    },
                    {
                        "sbg:revisionNotes": "Without seqtk",
                        "sbg:modifiedOn": 1478277013,
                        "sbg:revision": 7,
                        "sbg:modifiedBy": "bogdang"
                    },
                    {
                        "sbg:revisionNotes": "fix seqtk for .gz files",
                        "sbg:modifiedOn": 1478300733,
                        "sbg:revision": 8,
                        "sbg:modifiedBy": "bogdang"
                    },
                    {
                        "sbg:revisionNotes": "Support for files named filename.fq.fastq",
                        "sbg:modifiedOn": 1481123041,
                        "sbg:revision": 9,
                        "sbg:modifiedBy": "bogdang"
                    },
                    {
                        "sbg:revisionNotes": "No conversion if sanger or illumina18 quality scale set in metadata",
                        "sbg:modifiedOn": 1481290093,
                        "sbg:revision": 10,
                        "sbg:modifiedBy": "bogdang"
                    },
                    {
                        "sbg:revisionNotes": "fix",
                        "sbg:modifiedOn": 1481448894,
                        "sbg:revision": 11,
                        "sbg:modifiedBy": "bogdang"
                    },
                    {
                        "sbg:revisionNotes": "Added detection mode and switched to python3",
                        "sbg:modifiedOn": 1495706394,
                        "sbg:revision": 12,
                        "sbg:modifiedBy": "bogdang"
                    }
                ],
                "sbg:projectName": "SBGTools - Demo New",
                "sbg:contributors": [
                    "vladimirk",
                    "bogdang"
                ],
                "sbg:toolAuthor": "Seven Bridges Genomics",
                "outputs": [
                    {
                        "sbg:fileTypes": "FASTQ",
                        "id": "#result",
                        "outputBinding": {
                            "glob": {
                                "script": "{\n\n  qscale = \"to be detected\"\n  \n  if ($job.inputs.fastq.metadata)\n      if ($job.inputs.fastq.metadata[\"quality_scale\"])\n      qscale = $job.inputs.fastq.metadata[\"quality_scale\"]  \n  \n  if ($job.inputs.used_quality_scale)\n    if ($job.inputs.used_quality_scale != null) \n      qscale = $job.inputs.used_quality_scale\n  \n      \n  if (qscale == \"sanger\" || qscale == \"illumina18\" ) \n  {\n    return $job.inputs.fastq.path.replace(/^.*[\\\\\\/]/, '')\n  }\n  else\n  {\n\tfile = $job.inputs.fastq.path\n\tfile_split = file.split('.')\n\tbasename = file_split\n  \tif (basename.length > 1)\n    {\n      l_ext = basename.splice(basename.length-1)\n      if (l_ext == 'gz')\n      {\n        basename = basename.slice(0, basename.length-1)\n      }\n    }\n \tretval = basename.concat('std.fastq')\n\treturn retval.join('.').replace(/^.*[\\\\\\/]/, '') + \"*\"\n  }\n}",
                                "engine": "#cwl-js-engine",
                                "class": "Expression"
                            }
                        },
                        "description": "Resulting file in FASTQ format.",
                        "type": [
                            "null",
                            "File"
                        ],
                        "label": "Result"
                    }
                ],
                "sbg:toolkit": "SBGTools"
            },
            "outputs": [
                {
                    "id": "#SBG_FASTQ_Quality_Adjuster.result"
                }
            ],
            "inputs": [
                {
                    "id": "#SBG_FASTQ_Quality_Adjuster.used_quality_scale"
                },
                {
                    "id": "#SBG_FASTQ_Quality_Adjuster.total_memory"
                },
                {
                    "id": "#SBG_FASTQ_Quality_Adjuster.fastq",
                    "source": [
                        "#fastq"
                    ]
                },
                {
                    "id": "#SBG_FASTQ_Quality_Adjuster.detection_mode"
                }
            ],
            "sbg:x": 363.33334823449474
        },
        {
            "id": "#FastQC",
            "sbg:y": 467.0000712076826,
            "run": {
                "sbg:modifiedOn": 1493223877,
                "sbg:id": "bix-demo/fastqc-0-11-4-demo/fastqc-0-11-4/10",
                "id": "https://api.sbgenomics.com/v2/apps/bix-demo/fastqc-0-11-4-demo/fastqc-0-11-4/10/raw/",
                "sbg:cmdPreview": "fastqc  --noextract --outdir .  /path/to/input_fastq-1.fastq  /path/to/input_fastq-2.fastq",
                "sbg:revision": 10,
                "description": "FastQC reads a set of sequence files and produces a quality control (QC) report from each one. These reports consist of a number of different modules, each of which will help identify a different type of potential problem in your data. \n\nSince it's necessary to convert the tool report in order to show them on Seven Bridges platform, it's recommended to use [FastQC Analysis workflow instead](https://igor.sbgenomics.com/public/apps#admin/sbg-public-data/fastqc-analysis/). \n\nFastQC is a tool which takes a FASTQ file and runs a series of tests on it to generate a comprehensive QC report.  This report will tell you if there is anything unusual about your sequence.  Each test is flagged as a pass, warning, or fail depending on how far it departs from what you would expect from a normal large dataset with no significant biases.  It is important to stress that warnings or even failures do not necessarily mean that there is a problem with your data, only that it is unusual.  It is possible that the biological nature of your sample means that you would expect this particular bias in your results.\n\n### Common Issues:\n\nOutput of the tool is ZIP archive. In order to view report on Seven Bridges platform, you can use SBG Html2b64 tool. It is advised to scatter SBG Html2b64 so it would be able to process an array of files. The example can be seen in [FastQC Analysis workflow](https://igor.sbgenomics.com/public/apps#admin/sbg-public-data/fastqc-analysis/) which you can also use instead of this tool.",
                "successCodes": [],
                "sbg:sbgMaintained": false,
                "sbg:categories": [
                    "FASTQ-Processing",
                    "Quality-Control",
                    "Quantification"
                ],
                "sbg:project": "bix-demo/fastqc-0-11-4-demo",
                "sbg:image_url": null,
                "stdin": "",
                "requirements": [
                    {
                        "requirements": [
                            {
                                "class": "DockerRequirement",
                                "dockerPull": "rabix/js-engine"
                            }
                        ],
                        "class": "ExpressionEngineRequirement",
                        "id": "#cwl-js-engine"
                    }
                ],
                "sbg:links": [
                    {
                        "label": "Homepage",
                        "id": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/"
                    },
                    {
                        "label": "Source Code",
                        "id": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/fastqc_v0.11.4_source.zip"
                    },
                    {
                        "label": "Wiki",
                        "id": "https://wiki.hpcc.msu.edu/display/Bioinfo/FastQC+Tutorial"
                    },
                    {
                        "label": "Download",
                        "id": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/fastqc_v0.11.4.zip"
                    },
                    {
                        "label": "Publication",
                        "id": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc"
                    }
                ],
                "sbg:createdOn": 1450911593,
                "sbg:revisionNotes": "* Fixed the JS expression for the CPU and Memory allocation\n* Added cpus_per_job and memory_per_job parameters\n* Removed default version for format, so the tool can handle combinations of file formats",
                "hints": [
                    {
                        "dockerImageId": "759c4c8fbafd",
                        "class": "DockerRequirement",
                        "dockerPull": "images.sbgenomics.com/mladenlsbg/fastqc:0.11.4"
                    },
                    {
                        "value": {
                            "script": "{\n  // if cpus_per_job is set, it takes precedence\n  if ($job.inputs.cpus_per_job) {\n    return $job.inputs.cpus_per_job \n  }\n  // if threads parameter is set, the number of CPUs is set based on that parametere\n  else if ($job.inputs.threads) {\n    return $job.inputs.threads\n  }\n  // else the number of CPUs is determined by the number of input files, up to 7 -- default\n  else return Math.min([].concat($job.inputs.input_fastq).length,7)\n}",
                            "engine": "#cwl-js-engine",
                            "class": "Expression"
                        },
                        "class": "sbg:CPURequirement"
                    },
                    {
                        "value": {
                            "script": "{\n  // if memory_per_job is set, it takes precedence\n  if ($job.inputs.memory_per_job){\n    return $job.inputs.memory_per_job\n  }\n  // if threads parameter is set, memory req is set based on the number of threads\n  else if ($job.inputs.threads){\n    return 1024 + 300*$job.inputs.threads\n  }\n  // else the memory req is determined by the number of input files, up to 7 -- default\n  else return (1024 + 300*Math.min([].concat($job.inputs.input_fastq).length,7))\n}\n\n",
                            "engine": "#cwl-js-engine",
                            "class": "Expression"
                        },
                        "class": "sbg:MemRequirement"
                    }
                ],
                "label": "FastQC",
                "arguments": [
                    {
                        "prefix": "",
                        "separate": true,
                        "valueFrom": "--noextract"
                    },
                    {
                        "prefix": "--outdir",
                        "separate": true,
                        "valueFrom": "."
                    }
                ],
                "sbg:validationErrors": [],
                "baseCommand": [
                    "fastqc"
                ],
                "temporaryFailCodes": [],
                "sbg:toolkitVersion": "0.11.4",
                "sbg:latestRevision": 10,
                "stdout": "",
                "sbg:modifiedBy": "nikola_jovanovic",
                "cwlVersion": "sbg:draft-2",
                "sbg:license": "GNU General Public License v3.0 only",
                "sbg:appVersion": [
                    "sbg:draft-2"
                ],
                "class": "CommandLineTool",
                "sbg:createdBy": "bix-demo",
                "inputs": [
                    {
                        "sbg:category": "File inputs",
                        "sbg:fileTypes": "FASTQ, FQ, FASTQ.GZ, FQ.GZ, BAM, SAM",
                        "id": "#input_fastq",
                        "inputBinding": {
                            "position": 100,
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Input file.",
                        "type": [
                            {
                                "type": "array",
                                "name": "input_fastq",
                                "items": "File"
                            }
                        ],
                        "label": "Input file"
                    },
                    {
                        "sbg:category": "Options",
                        "sbg:altPrefix": "-f",
                        "id": "#kmers",
                        "inputBinding": {
                            "prefix": "--kmers",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Specifies the length of Kmer to look for in the Kmer content module. Specified Kmer length must be between 2 and 10. Default length is 7 if not specified.",
                        "sbg:toolDefaultValue": "7",
                        "label": "Kmers",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "File inputs",
                        "sbg:fileTypes": "TXT",
                        "id": "#limits_file",
                        "inputBinding": {
                            "prefix": "--limits",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Specifies a non-default file which contains a set of criteria which will be used to determine the warn/error limits for the various modules.  This file can also be used to selectively remove some modules from the output all together.  The format needs to mirror the default limits.txt file found in the Configuration folder.",
                        "sbg:altPrefix": "-l",
                        "label": "Limits",
                        "type": [
                            "null",
                            "File"
                        ]
                    },
                    {
                        "sbg:category": "File inputs",
                        "sbg:fileTypes": "TXT",
                        "id": "#adapters_file",
                        "inputBinding": {
                            "prefix": "--adapters",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Specifies a non-default file which contains the list of adapter sequences which will be explicity searched against the library. The file must contain sets of named adapters in the form name[tab]sequence.  Lines prefixed with a hash will be ignored.",
                        "sbg:altPrefix": "-a",
                        "label": "Adapters",
                        "type": [
                            "null",
                            "File"
                        ]
                    },
                    {
                        "sbg:category": "File inputs",
                        "sbg:fileTypes": "TXT",
                        "id": "#contaminants_file",
                        "inputBinding": {
                            "prefix": "--contaminants",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Specifies a non-default file which contains the list of contaminants to screen overrepresented sequences against. The file must contain sets of named contaminants in the form name[tab]sequence.  Lines prefixed with a hash will be ignored.",
                        "sbg:altPrefix": "-c",
                        "label": "Contaminants",
                        "type": [
                            "null",
                            "File"
                        ]
                    },
                    {
                        "sbg:category": "Options",
                        "sbg:altPrefix": "-f",
                        "id": "#format",
                        "inputBinding": {
                            "prefix": "--format",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Bypasses the normal sequence file format detection and forces the program to use the specified format.  Valid formats are BAM, SAM, BAM_mapped, SAM_mapped and FASTQ.",
                        "sbg:toolDefaultValue": "FASTQ",
                        "label": "Format",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "format",
                                "symbols": [
                                    "bam",
                                    "sam",
                                    "bam_mapped",
                                    "sam_mapped",
                                    "fastq"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "Options",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "id": "#nogroup",
                        "inputBinding": {
                            "prefix": "--nogroup",
                            "sbg:cmdInclude": true,
                            "separate": false
                        },
                        "description": "Disable grouping of bases for reads >50bp. All reports will show data for every base in the read.  WARNING: Using this option will cause fastqc to crash and burn if you use it on really long reads, and your plots may end up a ridiculous size. You have been warned.",
                        "label": "Nogroup"
                    },
                    {
                        "sbg:category": "Options",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "id": "#nano",
                        "inputBinding": {
                            "prefix": "--nano",
                            "sbg:cmdInclude": true,
                            "separate": false
                        },
                        "description": "Files come from naopore sequences and are in fast5 format. In this mode you can pass in directories to process and the program will take in all fast5 files within those directories and produce a single output file from the sequences found in all files.",
                        "label": "Nano"
                    },
                    {
                        "sbg:category": "Options",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "id": "#casava",
                        "inputBinding": {
                            "prefix": "--casava",
                            "sbg:cmdInclude": true,
                            "separate": false
                        },
                        "description": "Files come from raw casava output. Files in the same sample group (differing only by the group number) will be analysed as a set rather than individually. Sequences with the filter flag set in the header will be excluded from the analysis. Files must have the same names given to them by casava (including being gzipped and ending with .gz) otherwise they won't be grouped together correctly.",
                        "label": "Casava"
                    },
                    {
                        "sbg:category": "Options",
                        "sbg:altPrefix": "-t",
                        "id": "#threads",
                        "inputBinding": {
                            "prefix": "--threads",
                            "sbg:cmdInclude": true,
                            "separate": true,
                            "valueFrom": {
                                "script": "{\n//if \"threads\" is not specified\n//number of threads is determined based on number of inputs\n  if (! $job.inputs.threads){\n    $job.inputs.threads = [].concat($job.inputs.input_fastq).length\n  }\n  return Math.min($job.inputs.threads,7)\n}",
                                "engine": "#cwl-js-engine",
                                "class": "Expression"
                            }
                        },
                        "description": "Specifies the number of files which can be processed simultaneously.  Each thread will be allocated 250MB of memory so you shouldn't run more threads than your available memory will cope with, and not more than 6 threads on a 32 bit machine.",
                        "sbg:toolDefaultValue": "1",
                        "label": "Threads",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "Options",
                        "sbg:altPrefix": "-q",
                        "id": "#quiet",
                        "inputBinding": {
                            "prefix": "--quiet",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Supress all progress messages on stdout and only report errors.",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "label": "Quiet"
                    },
                    {
                        "sbg:category": "Execution parameters",
                        "sbg:toolDefaultValue": "Determined by the number of input files",
                        "id": "#cpus_per_job",
                        "description": "Number of CPUs to be allocated per execution of FastQC.",
                        "type": [
                            "null",
                            "int"
                        ],
                        "label": "Number of CPUs."
                    },
                    {
                        "sbg:category": "Execution parameters",
                        "sbg:toolDefaultValue": "Determined by the number of input files",
                        "id": "#memory_per_job",
                        "description": "Amount of memory allocated per execution of FastQC job.",
                        "type": [
                            "null",
                            "int"
                        ],
                        "label": "Amount of memory allocated per job execution."
                    }
                ],
                "sbg:job": {
                    "allocatedResources": {
                        "mem": 1624,
                        "cpu": 2
                    },
                    "inputs": {
                        "input_fastq": [
                            {
                                "size": 0,
                                "class": "File",
                                "secondaryFiles": [],
                                "path": "/path/to/input_fastq-1.fastq"
                            },
                            {
                                "size": 0,
                                "class": "File",
                                "secondaryFiles": [],
                                "path": "/path/to/input_fastq-2.fastq"
                            }
                        ],
                        "threads": null,
                        "format": null,
                        "quiet": true,
                        "cpus_per_job": null,
                        "memory_per_job": null
                    }
                },
                "sbg:projectName": "FastQC 0.11.4 - Demo",
                "sbg:revisionsInfo": [
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1450911593,
                        "sbg:revision": 0,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1450911593,
                        "sbg:revision": 1,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1450911594,
                        "sbg:revision": 2,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1459870965,
                        "sbg:revision": 3,
                        "sbg:modifiedBy": "mladenlSBG"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1465990120,
                        "sbg:revision": 4,
                        "sbg:modifiedBy": "mladenlSBG"
                    },
                    {
                        "sbg:revisionNotes": "Input categories added.",
                        "sbg:modifiedOn": 1476188095,
                        "sbg:revision": 5,
                        "sbg:modifiedBy": "mladenlSBG"
                    },
                    {
                        "sbg:revisionNotes": "FASTQ input changed from single file to array. Added better thread handling. \n\nIMPORTANT NOTICE: If updating this tool in existing workflow, it's necessary to REMOVE SCATTER (uncheck it) from input_fastq or it might break the pipeline.",
                        "sbg:modifiedOn": 1476270496,
                        "sbg:revision": 6,
                        "sbg:modifiedBy": "mladenlSBG"
                    },
                    {
                        "sbg:revisionNotes": "FASTQ input changed from single file to array. Added better thread handling.\n\nIMPORTANT NOTICE: If updating this tool in existing workflow, it's necessary to REMOVE SCATTER (uncheck it) from input_fastq or it might break the pipeline.",
                        "sbg:modifiedOn": 1476354537,
                        "sbg:revision": 7,
                        "sbg:modifiedBy": "mladenlSBG"
                    },
                    {
                        "sbg:revisionNotes": "IMPORTANT NOTICE: If updating this tool in existing workflow, it's necessary to REMOVE SCATTER (uncheck it) from input_fastq or it might break the pipeline.\"\n\nAdded automatised handling of BAM and SAM files. Also, added security measures for better automated threading handling.",
                        "sbg:modifiedOn": 1488882730,
                        "sbg:revision": 8,
                        "sbg:modifiedBy": "mladenlSBG"
                    },
                    {
                        "sbg:revisionNotes": "Changed the file types of limits, adapters and contaminants files to be TXT, they have to be in format name[tab]sequence. Format should be similar to the one in the Configuration folder provided with FastQC, txt files.\n\n\"IMPORTANT NOTICE: If updating this tool in existing workflow, it's necessary to REMOVE SCATTER (uncheck it) from input_fastq or it might break the pipeline.\"",
                        "sbg:modifiedOn": 1488980183,
                        "sbg:revision": 9,
                        "sbg:modifiedBy": "nikola_jovanovic"
                    },
                    {
                        "sbg:revisionNotes": "* Fixed the JS expression for the CPU and Memory allocation\n* Added cpus_per_job and memory_per_job parameters\n* Removed default version for format, so the tool can handle combinations of file formats",
                        "sbg:modifiedOn": 1493223877,
                        "sbg:revision": 10,
                        "sbg:modifiedBy": "nikola_jovanovic"
                    }
                ],
                "sbg:toolAuthor": "Babraham Institute",
                "sbg:contributors": [
                    "mladenlSBG",
                    "nikola_jovanovic",
                    "bix-demo"
                ],
                "outputs": [
                    {
                        "sbg:fileTypes": "ZIP",
                        "id": "#report_zip",
                        "outputBinding": {
                            "glob": "*_fastqc.zip",
                            "sbg:metadata": {
                                "__inherit__": "input_fastq"
                            },
                            "sbg:inheritMetadataFrom": "#input_fastq"
                        },
                        "description": "Zip archive of the report.",
                        "type": [
                            "null",
                            {
                                "type": "array",
                                "name": "report_zip",
                                "items": "File"
                            }
                        ],
                        "label": "Report zip"
                    }
                ],
                "sbg:toolkit": "FastQC"
            },
            "outputs": [
                {
                    "id": "#FastQC.report_zip"
                }
            ],
            "inputs": [
                {
                    "id": "#FastQC.input_fastq",
                    "source": [
                        "#fastq"
                    ]
                },
                {
                    "id": "#FastQC.kmers"
                },
                {
                    "id": "#FastQC.limits_file"
                },
                {
                    "id": "#FastQC.adapters_file"
                },
                {
                    "id": "#FastQC.contaminants_file"
                },
                {
                    "id": "#FastQC.format"
                },
                {
                    "id": "#FastQC.nogroup"
                },
                {
                    "id": "#FastQC.nano"
                },
                {
                    "id": "#FastQC.casava"
                },
                {
                    "id": "#FastQC.threads"
                },
                {
                    "id": "#FastQC.quiet"
                },
                {
                    "id": "#FastQC.cpus_per_job"
                },
                {
                    "id": "#FastQC.memory_per_job"
                }
            ],
            "sbg:x": 121.00001017252612
        },
        {
            "id": "#SBG_Prepare_Intervals",
            "sbg:y": 609.4271201329931,
            "run": {
                "sbg:modifiedOn": 1491905063,
                "sbg:id": "bix-demo/sbgtools-demo/sbg-prepare-intervals/6",
                "id": "https://api.sbgenomics.com/v2/apps/bix-demo/sbgtools-demo/sbg-prepare-intervals/6/raw/",
                "description": "Depending on selected Split Mode value, output files are generated in accordance with description below:\n\n1. File per interval - The tool creates one interval file per line of the input BED(FAI) file.\nEach interval file contains a single line (one of the lines of BED(FAI) input file).\n\n2. File per chr with alt contig in a single file - For each contig(chromosome) a single file\nis created containing all the intervals corresponding to it .\nAll the intervals (lines) other than (chr1, chr2 ... chrY or 1, 2 ... Y) are saved as\n(\"others.bed\").\n\n3. Output original BED - BED file is required for execution of this mode. If mode 3 is applied input is passed to the output.\n\n4. File per interval with alt contig in a single file - For each chromosome a single file is created for each interval.\nAll the intervals (lines) other than (chr1, chr2 ... chrY or 1, 2 ... Y) are saved as\n(\"others.bed\").\n\n##### Common issues: \nDo not use option 1 (File per interval) with exome BED or a BED with a lot of GL contigs, as it will create a large number of files.",
                "requirements": [
                    {
                        "fileDef": [
                            {
                                "fileContent": "\"\"\"\nUsage:\n    sbg_prepare_intervals.py [options] [--fastq FILE --bed FILE --mode INT --format STR --others STR]\n\nDescription:\n    Purpose of this tool is to split BED file into files based on the selected mode.\n    If bed file is not provided fai(fasta index) file is converted to bed.\n\nOptions:\n\n    -h, --help            Show this message.\n\n    -v, -V, --version     Tool version.\n\n    -b, -B, --bed FILE    Path to input bed file.\n\n    --fai FILE            Path to input fai file.\n\n    --format STR          Output file format.\n\n    --mode INT            Select input mode.\n\n\"\"\"\n\n\nfrom docopt import docopt\nimport os\nimport shutil\nimport glob\n\ndefault_extension = '.bed'  # for output files\n\n\n\ndef create_file(contents, contig_name, extension=default_extension):\n    \"\"\"function for creating a file for all intervals in a contig\"\"\"\n\n    new_file = open(\"Intervals/\" + contig_name + extension, \"w\")\n    new_file.write(contents)\n    new_file.close()\n\n\ndef add_to_file(line, name, extension=default_extension):\n    \"\"\"function for adding a line to a file\"\"\"\n\n    new_file = open(\"Intervals/\" + name + extension, \"a\")\n    if lformat == formats[1]:\n        sep = line.split(\"\\t\")\n        line = sep[0] + \":\" + sep[1] + \"-\" + sep[2]\n    new_file.write(line)\n    new_file.close()\n\n\ndef fai2bed(fai):\n    \"\"\"function to create a bed file from fai file\"\"\"\n\n    region_thr = 10000000  # threshold used to determine starting point accounting for telomeres in chromosomes\n    if not fai.rfind(\".fasta.fai\") == -1:\n        basename = fai[0:fai.rfind(\".fasta.fai\")]\n    else:\n        basename = fai[0:fai.rfind(\".\")]\n    with open(fai, \"r\") as ins:\n        new_array = []\n        for line in ins:\n            len_reg = int(line.split()[1])\n            cutoff = 0 if (len_reg < region_thr) else 0  # sd\\\\telomeres or start with 1\n            new_line = line.split()[0] + '\\t' + str(cutoff) + '\\t' + str(len_reg + cutoff)\n            new_array.append(new_line)\n    new_file = open(basename + \".bed\", \"w\")\n    new_file.write(\"\\n\".join(new_array))\n    return basename + \".bed\"\n\ndef chr_intervals(no_of_chrms = 23):\n    \"\"\"returns all possible designations for chromosome intervals\"\"\"\n    \n    chrms = []\n    for i in range(1, no_of_chrms):\n        chrms.append(\"chr\" + str(i))\n        chrms.append(str(i))\n    chrms.extend([\"x\", \"y\", \"chrx\", \"chry\"])\n    return chrms\n\n\ndef mode_1(orig_file):\n    \"\"\"mode 1: every line is a new file\"\"\"\n\n    with open(orig_file, \"r\") as ins:\n        prev = \"\"\n        counter = 0\n        names = []\n        for line in ins:\n            if line.split()[0] == prev:\n                counter += 1\n            else:\n                counter = 0\n            suffix = \"\" if (counter == 0) else \"_\" + str(counter)\n            create_file(line, line.split()[0] + suffix)\n            names.append(line.split()[0] + suffix)\n            prev = line.split()[0]\n\n        create_file(str(names), \"names\", extension=\".txt\")\n\ndef mode_2(orig_file, others_name):\n    \"\"\"mode 2: separate file is created for each chromosome, and one file is created for other intervals\"\"\"\n\n    chrms = chr_intervals()\n    names = []\n\n    with open(orig_file, 'r') as ins:\n        for line in ins:\n            name = line.split()[0]\n            if name.lower() in chrms:\n                name = name.lower()\n            else:\n                name = others_name\n            try:\n                add_to_file(line, name)\n                if not name in names:\n                    names.append(name)\n            except:\n                raise Exception(\"Couldn't create or write in the file in mode 2\")\n\n        create_file(str(names), \"names\", extension = \".txt\")\n\n\ndef mode_3(orig_file, extension=default_extension):\n    \"\"\"mode 3: input file is staged to output\"\"\"\n\n    orig_name = orig_file.split(\"/\")[len(orig_file.split(\"/\")) - 1]\n    output_file = r\"./Intervals/\" + orig_name[0:orig_name.rfind('.')] + extension\n\n    shutil.copyfile(orig_file, output_file)\n\n    names = [orig_name[0:orig_name.rfind('.')]]\n    create_file(str(names), \"names\", extension=\".txt\")\n\n\ndef mode_4(orig_file, others_name):\n    \"\"\"mode 4: every interval in chromosomes is in a separate file. Other intervals are in a single file\"\"\"\n\n    chrms = chr_intervals()\n    names = []\n\n    with open(orig_file, \"r\") as ins:\n        counter = {}\n        for line in ins:\n            name = line.split()[0].lower()\n            if name in chrms:\n                if name in counter:\n                    counter[name] += 1\n                else:\n                    counter[name] = 0\n                suffix = \"\" if (counter[name] == 0) else \"_\" + str(counter[name])\n                create_file(line, name + suffix)\n                names.append(name + suffix)\n                prev = name\n            else:\n                name = others_name\n                if not name in names:\n                    names.append(name)\n                try:\n                    add_to_file(line, name)\n                except:\n                    raise Exception(\"Couldn't create or write in the file in mode 4\")\n\n        create_file(str(names), \"names\", extension=\".txt\")\n\n\ndef prepare_intervals():\n    # reading input files and split mode from command line\n    args = docopt(__doc__, version='1.0')\n\n    bed_file = args['--bed']\n    fai_file = args['--fai']\n    split_mode = int(args['--mode'])\n\n    \n    # define file name for non-chromosomal contigs\n    others_name = 'others' \n\n    global formats, lformat\n    formats = [\"chr start end\", \"chr:start-end\"]\n    lformat = args['--format']\n    if lformat == None:\n        lformat = formats[0]\n    if not lformat in formats:\n        raise Exception('Unsuported interval format')\n\n    if not os.path.exists(r\"./Intervals\"):\n        os.mkdir(r\"./Intervals\")\n    else:\n        files = glob.glob(r\"./Intervals/*\")\n        for f in files:\n            os.remove(f)\n\n    # create variable input_file taking bed_file as priority\n    if bed_file:\n        input_file = bed_file\n    elif fai_file:\n        input_file = fai2bed(fai_file)\n    else:\n        raise Exception('No input files are provided')\n\n    # calling adequate split mode function\n    if split_mode == 1:\n        mode_1(input_file)\n    elif split_mode == 2:\n        mode_2(input_file, others_name)\n    elif split_mode == 3:\n        if bed_file:\n            mode_3(input_file)\n        else:\n            raise Exception('Bed file is required for mode 3')\n    elif split_mode == 4:\n        mode_4(input_file, others_name)\n    else:\n        raise Exception('Split mode value is not set')\n\n\nif __name__ == '__main__':\n    prepare_intervals()",
                                "filename": "sbg_prepare_intervals.py"
                            }
                        ],
                        "class": "CreateFileRequirement"
                    },
                    {
                        "requirements": [
                            {
                                "class": "DockerRequirement",
                                "dockerPull": "rabix/js-engine"
                            }
                        ],
                        "class": "ExpressionEngineRequirement",
                        "id": "#cwl-js-engine"
                    }
                ],
                "successCodes": [],
                "sbg:sbgMaintained": false,
                "sbg:categories": [
                    "Converters"
                ],
                "sbg:project": "bix-demo/sbgtools-demo",
                "sbg:image_url": null,
                "stdin": "",
                "sbg:cmdPreview": "python sbg_prepare_intervals.py  --format \"chr start end\" --mode 3",
                "sbg:toolkitVersion": "1.0",
                "sbg:revision": 6,
                "sbg:createdOn": 1473083821,
                "sbg:revisionNotes": "Common issues added",
                "hints": [
                    {
                        "value": 1000,
                        "class": "sbg:MemRequirement"
                    },
                    {
                        "dockerImageId": "",
                        "class": "DockerRequirement",
                        "dockerPull": "images.sbgenomics.com/bogdang/sbg_prepare_intervals:1.0"
                    },
                    {
                        "value": 1,
                        "class": "sbg:CPURequirement"
                    }
                ],
                "label": "SBG Prepare Intervals",
                "arguments": [
                    {
                        "separate": true,
                        "valueFrom": {
                            "script": "{\t\n  if (typeof($job.inputs.format) !== \"undefined\")\n  \treturn \"--format \" + \"\\\"\" + $job.inputs.format + \"\\\"\"\n}",
                            "engine": "#cwl-js-engine",
                            "class": "Expression"
                        }
                    }
                ],
                "stdout": "",
                "baseCommand": [
                    "python",
                    "sbg_prepare_intervals.py"
                ],
                "temporaryFailCodes": [],
                "sbg:latestRevision": 6,
                "sbg:validationErrors": [],
                "sbg:modifiedBy": "bogdang",
                "cwlVersion": "sbg:draft-2",
                "sbg:license": "Apache License 2.0",
                "sbg:appVersion": [
                    "sbg:draft-2"
                ],
                "class": "CommandLineTool",
                "sbg:createdBy": "vladimirk",
                "inputs": [
                    {
                        "sbg:category": "File Input",
                        "sbg:fileTypes": "BED",
                        "id": "#bed_file",
                        "inputBinding": {
                            "position": 1,
                            "prefix": "--bed",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Input BED file containing intervals. Required for modes 3 and 4.",
                        "sbg:stageInput": "link",
                        "label": "Input BED file",
                        "type": [
                            "null",
                            "File"
                        ]
                    },
                    {
                        "sbg:category": "File Input",
                        "sbg:fileTypes": "FAI",
                        "id": "#fai_file",
                        "inputBinding": {
                            "position": 2,
                            "prefix": "--fai",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "FAI file is converted to BED format if BED file is not provided.",
                        "type": [
                            "null",
                            "File"
                        ],
                        "label": "Input FAI file"
                    },
                    {
                        "sbg:category": "Input",
                        "type": [
                            {
                                "type": "enum",
                                "name": "split_mode",
                                "symbols": [
                                    "File per interval",
                                    "File per chr with alt contig in a single file",
                                    "Output original BED",
                                    "File per interval with alt contig in a single file"
                                ]
                            }
                        ],
                        "id": "#split_mode",
                        "inputBinding": {
                            "position": 3,
                            "prefix": "--mode",
                            "sbg:cmdInclude": true,
                            "separate": true,
                            "valueFrom": {
                                "script": "{\n  mode = $job.inputs.split_mode\n  switch (mode) \n  {\n    case \"File per interval\": \n      return 1\n    case \"File per chr with alt contig in a single file\": \n      return 2\n    case \"Output original BED\": \n      return 3\n    case \"File per interval with alt contig in a single file\": \n      return 4  \n  }\n  return 3\n}",
                                "engine": "#cwl-js-engine",
                                "class": "Expression"
                            }
                        },
                        "description": "Depending on selected Split Mode value, output files are generated in accordance with description below:  1. File per interval - The tool creates one interval file per line of the input BED(FAI) file. Each interval file contains a single line (one of the lines of BED(FAI) input file).  2. File per chr with alt contig in a single file - For each contig(chromosome) a single file is created containing all the intervals corresponding to it . All the intervals (lines) other than (chr1, chr2 ... chrY or 1, 2 ... Y) are saved as (\"others.bed\").  3. Output original BED - BED file is required for execution of this mode. If mode 3 is applied input is passed to the output.  4. File per interval with alt contig in a single file - For each chromosome a single file is created for each interval. All the intervals (lines) other than (chr1, chr2 ... chrY or 1, 2 ... Y) are saved as (\"others.bed\"). NOTE: Do not use option 1 (File per interval) with exome BED or a BED with a lot of GL contigs, as it will create a large number of files.",
                        "label": "Split mode"
                    },
                    {
                        "sbg:category": "Input",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "format",
                                "symbols": [
                                    "chr start end",
                                    "chr:start-end"
                                ]
                            }
                        ],
                        "label": "Interval format",
                        "id": "#format",
                        "description": "Format of the intervals in the generated files."
                    }
                ],
                "sbg:job": {
                    "allocatedResources": {
                        "mem": 1000,
                        "cpu": 1
                    },
                    "inputs": {
                        "fai_file": {
                            "size": 0,
                            "class": "File",
                            "path": "/path/to/fai_file.ext",
                            "secondaryFiles": []
                        },
                        "format": "chr start end",
                        "split_mode": null,
                        "bed_file": {
                            "size": 0,
                            "class": "File",
                            "path": "/path/to/bed_file.ext",
                            "secondaryFiles": []
                        }
                    }
                },
                "sbg:projectName": "SBGTools - Demo New",
                "sbg:revisionsInfo": [
                    {
                        "sbg:revisionNotes": "Copy of medjo/sbg-prepare-intervals/sbg-prepare-intervals/75",
                        "sbg:modifiedOn": 1473083821,
                        "sbg:revision": 0,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": "Copy of medjo/sbg-prepare-intervals/sbg-prepare-intervals/76",
                        "sbg:modifiedOn": 1473084447,
                        "sbg:revision": 1,
                        "sbg:modifiedBy": "bogdang"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1473928444,
                        "sbg:revision": 2,
                        "sbg:modifiedBy": "medjo"
                    },
                    {
                        "sbg:revisionNotes": "split_mode set to required",
                        "sbg:modifiedOn": 1474970272,
                        "sbg:revision": 3,
                        "sbg:modifiedBy": "medjo"
                    },
                    {
                        "sbg:revisionNotes": "Fixed Toolkit name.",
                        "sbg:modifiedOn": 1478525360,
                        "sbg:revision": 4,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:revisionNotes": "Description changed",
                        "sbg:modifiedOn": 1491904483,
                        "sbg:revision": 5,
                        "sbg:modifiedBy": "medjo"
                    },
                    {
                        "sbg:revisionNotes": "Common issues added",
                        "sbg:modifiedOn": 1491905063,
                        "sbg:revision": 6,
                        "sbg:modifiedBy": "bogdang"
                    }
                ],
                "sbg:toolAuthor": "Seven Bridges Genomics",
                "sbg:contributors": [
                    "vladimirk",
                    "bogdang",
                    "medjo",
                    "bix-demo"
                ],
                "outputs": [
                    {
                        "sbg:fileTypes": "BED",
                        "id": "#intervals",
                        "outputBinding": {
                            "glob": "Intervals/*.bed",
                            "sbg:metadata": {
                                "sbg_scatter": "true"
                            }
                        },
                        "description": "Array of BED files genereted as per selected Split Mode.",
                        "type": [
                            "null",
                            {
                                "type": "array",
                                "name": "intervals",
                                "items": "File"
                            }
                        ],
                        "label": "Intervals"
                    },
                    {
                        "sbg:fileTypes": "TXT",
                        "id": "#names",
                        "outputBinding": {
                            "glob": "Intervals/names.txt",
                            "loadContents": true,
                            "outputEval": {
                                "script": "{   \n content =  $self[0].contents.replace(/\\0/g, '')\n content = content.replace('[','')\n content = content.replace(']','')\n content = content.replace(/\\'/g, \"\")\n content = content.replace(/\\s/g, '')\n content_arr = content.split(\",\")\n\n return content_arr\n \n\n} ",
                                "engine": "#cwl-js-engine",
                                "class": "Expression"
                            }
                        },
                        "description": "File containing the names of created files.",
                        "type": [
                            "null",
                            "string"
                        ],
                        "label": "Output file names"
                    }
                ],
                "sbg:toolkit": "SBGTools"
            },
            "outputs": [
                {
                    "id": "#SBG_Prepare_Intervals.intervals"
                },
                {
                    "id": "#SBG_Prepare_Intervals.names"
                }
            ],
            "inputs": [
                {
                    "id": "#SBG_Prepare_Intervals.bed_file",
                    "source": [
                        "#bed_file_1"
                    ]
                },
                {
                    "id": "#SBG_Prepare_Intervals.fai_file",
                    "source": [
                        "#SBG_FASTA_Indices.fasta_index"
                    ]
                },
                {
                    "id": "#SBG_Prepare_Intervals.split_mode",
                    "default": "File per chr with alt contig in a single file"
                },
                {
                    "id": "#SBG_Prepare_Intervals.format"
                }
            ],
            "sbg:x": 1066.666849083377
        },
        {
            "id": "#GATK_BaseRecalibrator",
            "sbg:y": 408.9413004295544,
            "run": {
                "sbg:modifiedOn": 1490995301,
                "sbg:id": "bix-demo/gatk-2-3-9-lite-demo/gatk-2-3-9-lite-base-recalibrator/11",
                "id": "https://api.sbgenomics.com/v2/apps/bix-demo/gatk-2-3-9-lite-demo/gatk-2-3-9-lite-base-recalibrator/11/raw/",
                "description": "Overview\n\nThis tool is designed to work as the first pass in a two-pass processing step. It does a by-locus traversal operating only at sites that are not in dbSNP. We assume that all reference mismatches we see are therefore errors and indicative of poor base quality. This tool generates tables based on various user-specified covariates (such as read group, reported quality score, cycle, and context). Since there is a large amount of data, one can then calculate an empirical probability of error given the particular covariates seen at this site, where p(error) = num mismatches / num observations. The output file is a table (of the several covariate values, num observations, num mismatches, empirical quality score).\n\nNote: ReadGroupCovariate and QualityScoreCovariate are required covariates and will be added regardless of whether or not they were specified.\n\nInput\nA BAM file containing data that needs to be recalibrated.\nA database of known polymorphic sites to mask out.\n\nOutput\nA GATKReport file with many tables:\nThe list of arguments\nThe quantized qualities table\nThe recalibration table by read group\nThe recalibration table by quality score\nThe recalibration table for all the optional covariates\nThe GATKReport table format is intended to be easy to read by both humans and computer languages (especially R). Check out the documentation of the GATKReport (in the FAQs) to learn how to manipulate this table.\n\nUsage example\n java -jar GenomeAnalysisTK.jar \\\n   -T BaseRecalibrator \\\n   -R reference.fasta \\\n   -I my_reads.bam \\\n   -knownSites latest_dbsnp.vcf \\\n   -o recal_data.table\n\n(IMPORTANT) Reference \".fasta\" Secondary Files\n\nTools in GATK that require a fasta reference file also look for the reference file's corresponding .fai (fasta index) and .dict (fasta dictionary) files. The fasta index file allows random access to reference bases and the dictionary file is a dictionary of the contig names and sizes contained within the fasta reference. These two secondary files are essential for GATK to work properly. To append these two files to your fasta reference please use the 'SBG FASTA Indices' tool within your GATK based workflow before using any of the GATK tools.",
                "sbg:revision": 11,
                "requirements": [
                    {
                        "requirements": [
                            {
                                "class": "DockerRequirement",
                                "dockerPull": "rabix/js-engine"
                            }
                        ],
                        "class": "ExpressionEngineRequirement",
                        "id": "#cwl-js-engine"
                    }
                ],
                "successCodes": [],
                "sbg:sbgMaintained": false,
                "sbg:categories": [
                    "Plotting-and-Rendering",
                    "SAM/BAM-Processing"
                ],
                "sbg:project": "bix-demo/gatk-2-3-9-lite-demo",
                "sbg:image_url": null,
                "stdin": "",
                "sbg:cmdPreview": "java -Xmx2048M -jar /opt/GenomeAnalysisTKLite.jar --analysis_type BaseRecalibrator -nct 3 --reference_sequence /folder/reference.fasta --input_file /folder/my_reads.bam --out my_reads.recal_data.grp  --disable_indel_quals --plot_pdf_file my_reads.pdf",
                "sbg:toolkitVersion": "2.3.9 Lite",
                "sbg:links": [
                    {
                        "label": "Homepage",
                        "id": "https://www.broadinstitute.org/gatk/index.php"
                    },
                    {
                        "label": "Source Code",
                        "id": "https://github.com/broadgsa/gatk-protected"
                    },
                    {
                        "label": "Wiki",
                        "id": "https://www.broadinstitute.org/gatk/guide/pdfdocs/GATK_GuideBook_2.3-9.pdf"
                    },
                    {
                        "label": "Download",
                        "id": "https://www.broadinstitute.org/gatk/download/auth?package=GATK-archive&version=2.3-9-ge5ebf34"
                    },
                    {
                        "label": "Publication",
                        "id": "https://www.broadinstitute.org/gatk/about/#in-the-literature"
                    },
                    {
                        "label": "Documentation",
                        "id": "https://www.broadinstitute.org/gatk/gatkdocs/org_broadinstitute_gatk_tools_walkers_bqsr_BaseRecalibrator.php"
                    }
                ],
                "sbg:createdOn": 1450911406,
                "sbg:revisionNotes": "Set reference load content.",
                "hints": [
                    {
                        "dockerImageId": "47510cb2da55",
                        "class": "DockerRequirement",
                        "dockerPull": "images.sbgenomics.com/stefanristeski/gatk2-lite:2.3-9"
                    },
                    {
                        "value": {
                            "script": "{\n  if($job.inputs.cpu_per_job){\n  \treturn $job.inputs.cpu_per_job\n  }\n\treturn 1\n}",
                            "engine": "#cwl-js-engine",
                            "class": "Expression"
                        },
                        "class": "sbg:CPURequirement"
                    },
                    {
                        "value": {
                            "script": "{\n  if($job.inputs.memory_per_job){\n    if($job.inputs.memory_overhead_per_job){\n    \treturn $job.inputs.memory_per_job + $job.inputs.memory_overhead_per_job\n    }\n    else\n  \t\treturn $job.inputs.memory_per_job\n  }\n  else if(!$job.inputs.memory_per_job && $job.inputs.memory_overhead_per_job){\n\t\treturn 2048 + $job.inputs.memory_overhead_per_job  \n  }\n  else\n  \treturn 2048\n}",
                            "engine": "#cwl-js-engine",
                            "class": "Expression"
                        },
                        "class": "sbg:MemRequirement"
                    }
                ],
                "label": "GATK BaseRecalibrator",
                "arguments": [
                    {
                        "prefix": "--out",
                        "separate": true,
                        "valueFrom": {
                            "script": "{\n  read_name = [].concat($job.inputs.reads)[0].path.replace(/^.*[\\\\\\/]/, '').split('.')\n  read_namebase = read_name.slice(0, read_name.length-1).join('.')\n  return read_namebase + '.recal_data.grp'\n}",
                            "engine": "#cwl-js-engine",
                            "class": "Expression"
                        }
                    },
                    {
                        "separate": true,
                        "valueFrom": "--disable_indel_quals"
                    },
                    {
                        "prefix": "--plot_pdf_file",
                        "separate": true,
                        "valueFrom": {
                            "script": "{\n    read_name = [].concat($job.inputs.reads)[0].path.replace(/^.*[\\\\\\/]/, '').split('.')\n    read_namebase = read_name.slice(0, read_name.length-1).join('.')\n    return read_namebase + '.pdf'\n\n}",
                            "engine": "#cwl-js-engine",
                            "class": "Expression"
                        }
                    }
                ],
                "stdout": "",
                "baseCommand": [
                    "java",
                    {
                        "script": "{\n  if($job.inputs.memory_per_job){\n  \treturn '-Xmx'.concat($job.inputs.memory_per_job, 'M')\n  }\n  \treturn '-Xmx2048M'\n}",
                        "engine": "#cwl-js-engine",
                        "class": "Expression"
                    },
                    "-jar",
                    "/opt/GenomeAnalysisTKLite.jar",
                    "--analysis_type",
                    "BaseRecalibrator",
                    {
                        "script": "{ \n  if($job.inputs.threads_per_job){\n    return '-nct '.concat($job.inputs.threads_per_job)\n  }\n  else{\n  \treturn '-nct '.concat(3)\n  }\n}",
                        "engine": "#cwl-js-engine",
                        "class": "Expression"
                    }
                ],
                "temporaryFailCodes": [],
                "sbg:latestRevision": 11,
                "sbg:validationErrors": [],
                "sbg:modifiedBy": "nikola_jovanovic",
                "cwlVersion": "sbg:draft-2",
                "sbg:license": "MIT License",
                "sbg:appVersion": [
                    "sbg:draft-2"
                ],
                "class": "CommandLineTool",
                "sbg:createdBy": "bix-demo",
                "inputs": [
                    {
                        "sbg:category": "Input Files",
                        "sbg:fileTypes": "FASTA, FA",
                        "id": "#reference",
                        "inputBinding": {
                            "loadContents": true,
                            "itemSeparator": " ",
                            "prefix": "--reference_sequence",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Reference Genome in FASTA format.",
                        "sbg:altPrefix": "-R",
                        "label": "Reference Genome",
                        "type": [
                            "File"
                        ]
                    },
                    {
                        "sbg:category": "Input Files",
                        "sbg:fileTypes": "SAM, BAM",
                        "id": "#reads",
                        "inputBinding": {
                            "secondaryFiles": [
                                ".bai"
                            ],
                            "itemSeparator": null,
                            "prefix": "--input_file",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Read sequences in BAM format.",
                        "sbg:altPrefix": "-I",
                        "label": "Read sequences",
                        "type": [
                            {
                                "type": "array",
                                "items": "File"
                            }
                        ]
                    },
                    {
                        "sbg:category": "Input Files",
                        "sbg:fileTypes": "TXT, BED, VCF",
                        "id": "#exclude_intervals",
                        "inputBinding": {
                            "itemSeparator": " ",
                            "prefix": "--excludeIntervals",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "One or more genomic intervals to exclude from processing. Can be an .intervals file or a rod file.",
                        "sbg:altPrefix": "-XL",
                        "label": "Exclude Intervals",
                        "type": [
                            "null",
                            "File"
                        ]
                    },
                    {
                        "sbg:category": "Input Files",
                        "sbg:fileTypes": "KEY, LICENSE",
                        "id": "#gatk_key",
                        "inputBinding": {
                            "itemSeparator": " ",
                            "prefix": "--gatk_key",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "GATK Key file. Required if running with -et NO_ET. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.",
                        "sbg:altPrefix": "-K",
                        "label": "Gatk key",
                        "type": [
                            "null",
                            "File"
                        ]
                    },
                    {
                        "sbg:category": "Input Files",
                        "sbg:fileTypes": "TXT,BED,VCF,INTERVALS",
                        "id": "#intervals_file",
                        "inputBinding": {
                            "itemSeparator": " ",
                            "prefix": "--intervals",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "One or more genomic intervals over which to operate. Can be an specified in an .intervals file or a rod file. Cannot be used if grouped by interval. .",
                        "type": [
                            "null",
                            "File"
                        ],
                        "label": "Intervals"
                    },
                    {
                        "sbg:category": "Input Files",
                        "sbg:fileTypes": "VCF, BED, TXT",
                        "id": "#known_sites",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--knownSites",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "A database of known polymorphic sites to skip over in the recalibration algorithm.",
                        "sbg:stageInput": "link",
                        "label": "Known Sites",
                        "type": [
                            "null",
                            {
                                "type": "array",
                                "name": "known_sites",
                                "items": "File"
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": null,
                        "id": "#disable_radnomization",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--disableRandomization",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Completely eliminates randomization from nondeterministic methods. To be used mostly in the testing framework where dynamic parallelism can result in differing numbers of calls to the generator.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Disable Randomization",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "--allow_potentially_misencoded_quality_scores",
                        "id": "#allow_potentailly_misencoded_quals",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "-allowPotentiallyMisencodedQuals",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Do not fail when encountered base qualities that are too high and seemingly indicate a problem with the base quality encoding of the BAM file.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Allow Potentially Misencoded Quals",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-baq",
                        "id": "#baq",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--baq",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Type of BAQ calculation to apply in the engine.",
                        "sbg:toolDefaultValue": "OFF",
                        "label": "BAQ Calculation Type",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "baq",
                                "symbols": [
                                    "OFF",
                                    "CALCULATE_AS_NECESSARY",
                                    "RECALCULATE"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-baqGOP",
                        "id": "#baq_gap_open_penalty",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--baqGapOpenPenalty",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "BAQ gap open penalty (Phred Scaled). Default value is 40. 30 is perhaps better for whole genome call sets.",
                        "sbg:toolDefaultValue": "40.0",
                        "label": "BAQ Gap Open Penalty",
                        "type": [
                            "null",
                            "float"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-DBQ",
                        "id": "#default_base_qualities",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--defaultBaseQualities",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "If reads are missing some or all base quality scores, this value will be used for all base quality scores.",
                        "sbg:toolDefaultValue": "-1",
                        "label": "Default Base Qualities",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-dcov",
                        "id": "#downsample_to_coverage",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--downsample_to_coverage",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Coverage to downsample to at any given locus; note that downsampled reads are randomly selected from all possible reads at a locus. For non-locus-based traversals (eg., ReadWalkers), this sets the maximum number of reads at each alignment start position.",
                        "sbg:toolDefaultValue": "",
                        "label": "Downsample to Coverage",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-dfrac",
                        "id": "#downsample_to_fraction",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--downsample_to_fraction",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Fraction [0.0-1.0] of reads to downsample to.",
                        "sbg:toolDefaultValue": "",
                        "label": "Downsample to Fraction",
                        "type": [
                            "null",
                            "float"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-dt",
                        "id": "#downsampling_type",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--downsampling_type",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Type of reads downsampling to employ at a given locus. Reads will be selected randomly to be removed from the pile based on the method described here.",
                        "sbg:toolDefaultValue": "",
                        "label": "Downsampling Type",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "downsampling_type",
                                "symbols": [
                                    "NONE",
                                    "ALL_READS",
                                    "BY_SAMPLE"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-EOQ",
                        "id": "#emit_original_quals",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--emit_original_quals",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "If true, enables printing of the OQ tag with the original base qualities (with -BQSR).",
                        "sbg:toolDefaultValue": "False",
                        "label": "Emit Original Quals",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-fixMisencodedQuals",
                        "id": "#fix_misencoded_quals",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "-fixMisencodedQuals",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Fix mis-encoded base quality scores.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Fix Misencoded Quals",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-im",
                        "id": "#interval_merging",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--interval_merging",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Indicates the interval merging rule we should use for abutting intervals.",
                        "sbg:toolDefaultValue": "ALL",
                        "label": "Interval Merging",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "interval_merging",
                                "symbols": [
                                    "ALL",
                                    "OVERLAPPING_ONLY"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-ip",
                        "id": "#interval_padding",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--interval_padding",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Indicates how many basepairs of padding to include around each of the intervals specified with the -L/--intervals argument.",
                        "sbg:toolDefaultValue": "0",
                        "label": "Interval Padding",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-isr",
                        "id": "#interval_set_rule",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--interval_set_rule",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Indicates the set merging approach the interval parser should use to combine the various -L or -XL inputs.",
                        "sbg:toolDefaultValue": "UNION",
                        "label": "Interval Set Rule",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "interval_set_rule",
                                "symbols": [
                                    "UNION",
                                    "INTERSECTION"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-kpr",
                        "id": "#keep_program_records",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--keep_program_records",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Should we override the Walker's default and keep program records from the SAM header.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Keep Program Records",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-maxRuntime",
                        "id": "#max_runtime",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--maxRuntime",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "If provided, that GATK will stop execution cleanly as soon after maxRuntime has been exceeded, truncating the run but not exiting with a failure.  By default the value is interpreted in minutes, but this can be changed by maxRuntimeUnits.",
                        "sbg:toolDefaultValue": "-1",
                        "label": "Max Runtime",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-maxRuntimeUnits",
                        "id": "#max_runtime_units",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--maxRuntimeUnits",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "The TimeUnit for maxRuntime.",
                        "sbg:toolDefaultValue": "MINUTES",
                        "label": "Max Runtime Units",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "max_runtime_units",
                                "symbols": [
                                    "NANOSECONDS",
                                    "MICROSECONDS",
                                    "MILLISECONDS",
                                    "SECONDS",
                                    "MINUTES",
                                    "HOURS",
                                    "DAYS"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-ndrs",
                        "id": "#non_deterministic_random_seed",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--nonDeterministicRandomSeed",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Makes the GATK behave non deterministically, that is, the random numbers generated will be different in every run.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Non Deterministic Random Seed",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-pedString",
                        "id": "#pedigree_string",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--pedigreeString",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Pedigree string for samples.",
                        "sbg:toolDefaultValue": "[]",
                        "label": "Pedigree String",
                        "type": [
                            "null",
                            {
                                "type": "array",
                                "items": "string"
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-pedValidationType",
                        "id": "#pedigree_validation_type",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--pedigreeValidationType",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "How strict should we be in validating the pedigree information?.",
                        "sbg:toolDefaultValue": "STRICT",
                        "label": "Pedigree Validation Type",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "pedigree_validation_type",
                                "symbols": [
                                    "STRICT",
                                    "SILENT"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-et",
                        "id": "#phone_home",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--phone_home",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "What kind of GATK run report should we generate? STANDARD is the default, can be NO_ET so nothing is posted to the run repository. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.",
                        "sbg:toolDefaultValue": "STANDARD",
                        "label": "Phone Home",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "phone_home",
                                "symbols": [
                                    "NO_ET",
                                    "STANDARD"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-preserveQ",
                        "id": "#preserve_qscores_less_than",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--preserve_qscores_less_than",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Bases with quality scores less than this threshold won't be recalibrated (with -BQSR).",
                        "sbg:toolDefaultValue": "6",
                        "label": "Preserve Qscores Less Than",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-rf",
                        "id": "#read_filter",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--read_filter",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Specify filtration criteria to apply to each read individually.",
                        "sbg:toolDefaultValue": "[]",
                        "label": "Read Filter",
                        "type": [
                            "null",
                            {
                                "type": "array",
                                "items": {
                                    "type": "enum",
                                    "name": "read_filter",
                                    "symbols": [
                                        "BadCigarFilter",
                                        "BadMateFilter",
                                        "CountingFilteringIterator.CountingReadFilter",
                                        "DuplicateReadFilter",
                                        "FailsVendorQualityCheckFilter",
                                        "HCMappingQualityFilter",
                                        "LibraryReadFilter",
                                        "MalformedReadFilter",
                                        "MappingQualityFilter",
                                        "MappingQualityUnavailableFilter",
                                        "MappingQualityZeroFilter",
                                        "MateSameStrandFilter",
                                        "MaxInsertSizeFilter",
                                        "MissingReadGroupFilter",
                                        "NoOriginalQualityScoresFilter",
                                        "NotPrimaryAlignmentFilter",
                                        "OverclippedReadFilter",
                                        "Platform454Filter",
                                        "PlatformFilter",
                                        "PlatformUnitFilter",
                                        "ReadGroupBlackListFilter",
                                        "ReadLengthFilter",
                                        "ReadNameFilter",
                                        "ReadStrandFilter",
                                        "ReassignMappingQualityFilter",
                                        "ReassignOneMappingQualityFilter",
                                        "SampleFilter",
                                        "SingleReadGroupFilter",
                                        "UnmappedReadFilter"
                                    ]
                                }
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-rgbl",
                        "id": "#read_group_black_list",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--read_group_black_list",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Filters out read groups matching : or a .txt file containing the filter strings one per line.",
                        "sbg:toolDefaultValue": "[]",
                        "label": "Read Group Black List",
                        "type": [
                            "null",
                            {
                                "type": "array",
                                "items": "string"
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-rpr",
                        "id": "#remove_program_records",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--remove_program_records",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Should we override the Walker's default and remove program records from the SAM header.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Remove Program Records",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-tag",
                        "id": "#tag",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--tag",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Arbitrary tag string to identify this GATK run as part of a group of runs, for later analysis.",
                        "sbg:toolDefaultValue": "",
                        "label": "Tag",
                        "type": [
                            "null",
                            "string"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-U",
                        "id": "#unsafe",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--unsafe",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "If set, enables unsafe operations: nothing will be checked at runtime.  For expert users only who know what they are doing.  We do not support usage of this argument.",
                        "sbg:toolDefaultValue": "",
                        "label": "Unsafe",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "unsafe",
                                "symbols": [
                                    "ALLOW_UNINDEXED_BAM",
                                    "ALLOW_UNSET_BAM_SORT_ORDER",
                                    "NO_READ_ORDER_VERIFICATION",
                                    "ALLOW_SEQ_DICT_INCOMPATIBILITY",
                                    "LENIENT_VCF_PROCESSING",
                                    "ALL"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-use_legacy_downsampler",
                        "id": "#use_legacy_downsampler",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--use_legacy_downsampler",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Use the legacy downsampling implementation instead of the newer, less-tested implementation.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Use Legacy Downsampler",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-OQ",
                        "id": "#use_original_qualities",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--useOriginalQualities",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "If set, use the original base quality scores from the OQ tag when present instead of the standard scores.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Use Original Qualities",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-S",
                        "id": "#validation_strictness",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--validation_strictness",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "How strict should we be with validation.",
                        "sbg:toolDefaultValue": "SILENT",
                        "label": "Validation Strictness",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "validation_strictness",
                                "symbols": [
                                    "SILENT",
                                    "LENIENT",
                                    "STRICT"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:includeInPorts": true,
                        "id": "#intervals",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "-L",
                            "sbg:cmdInclude": true,
                            "separate": true,
                            "valueFrom": {
                                "script": "{\n    if ($job.inputs.reference && $job.inputs.intervals){\n        fasta = $job.inputs.reference.contents\n        interval = $job.inputs.intervals\n        // fasta - UCSC format\n        if (fasta.indexOf(\">chr\") != -1){\n            // INTERVAL - UCSC format, all w/ chr\n            if (interval.indexOf(\"chr\") != -1){\n                return interval\n            }// if (interval.indexOf(\"chr\") == -1)\n            // interval - 1000G format, convert to UCSC\n            else{\n                if (Number(interval) || interval == \"X\" || interval == \"Y\"){\n                    return \"chr\".concat(interval)\n                }// if (Number(interval)|| interval == \"X\" || interval == \"Y\")\n                else{\n                    if (interval == \"MT\"){\n                        return \"chrM\"\n                    }//if (interval == \"MT\")\n                    else{\n                        if(Number(interval.substr(2,6))<211){\n                            n = Number(interval.substr(2,6)) - 190;\n                            s = \"chr\";\n                            s = s.concat(n.toString());\n                            s = s.concat(\"_gl\");\n                            s = s.concat(interval.substr(2,6));\n                            s = s.concat(\"_random\");\n                            return s\n                        }// if(Number(interval.substr(2,interval.length-2))<211)\n                        else{\n                            if(Number(interval.substr(2,6))<250) {\n                                s = \"chrUn_gl\";\n                                s = s.concat(interval.substr(2,6));\n                                return s\n                            }//if(Number(interval.substr(2,interval.length-2))<250)\n                            else {\n                                return interval\n                            }//if(Number(interval.substr(2,interval.length-2))<250) - else\n                        }// if(Number(interval.substr(2,interval.length-2))<211) - else\n                    }//if (interval == \"MT\") - else\n                }//if (Number(interval)|| interval == \"X\" || interval == \"Y\") - else\n            }//if (interval.indexOf(\"chr\") == -1) - else\n        }//if (fasta.indexOf(\">chr\") == -1)\n        // fasta - 1000G format\n        else{\n            //interval - USCS format, all w/ chr, convert to 1000G\n            if(interval.indexOf(\"chr\") != -1){\n                if(Number(interval.substr(3,2)) && interval.length<6 || interval == \"chrX\" || interval == \"chrY\"){\n                    return interval.substr(3,2)\n                }//if(Number(interval.substr(3,interval.length)) != NaN || interval == \"chrX\" || bsqr == \"chrY\")\n                else{\n                    if (interval == \"chrM\") {\n                        return \"MT\"\n                    }//if (interval == \"chrM\")\n                    else{\n                        s = \"GL\";\n                        s = s.concat(interval.substr(8,6));\n                        s = s.concat(\".1\");\n                        return s\n                    }//if (interval == \"chrM\") - else\n                }//if(Number(interval.substr(3,interval.length)) != NaN || interval == \"chrX\" || bsqr == \"chrY\") - else\n            }//if($job.inputs.interval.indexOf(\"chr\") == -1)\n            // interval - 1000G format\n            else{\n                return interval\n            }//(interval.indexOf(\"chr\") == -1) - else\n        }//if (fasta.indexOf(\">chr\") == -1) - else\n    }//if ($job.inputs.fasta && $job.inputs.interval)\n}\n",
                                "engine": "#cwl-js-engine",
                                "class": "Expression"
                            }
                        },
                        "sbg:toolDefaultValue": "sample",
                        "description": "One or more genomic intervals over which to operate.",
                        "type": [
                            "null",
                            "string"
                        ],
                        "label": "Intervals"
                    },
                    {
                        "sbg:category": "Execution",
                        "sbg:altPrefix": null,
                        "id": "#memory_per_job",
                        "description": "Amount of RAM memory in MB to be used per job.",
                        "sbg:toolDefaultValue": "2048",
                        "label": "Memory per job",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "Execution",
                        "sbg:altPrefix": null,
                        "id": "#threads_per_job",
                        "description": "For tools which support multiprocessing, this value can be used to set the number of threads to be used.",
                        "sbg:toolDefaultValue": "3",
                        "label": "Threads per job",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "Base Recalibrator",
                        "sbg:altPrefix": "-bintag",
                        "id": "#binary_tag_name",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--binary_tag_name",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "The binary tag covariate name if using it.",
                        "sbg:toolDefaultValue": "",
                        "label": "Binary Tag Name",
                        "type": [
                            "null",
                            "string"
                        ]
                    },
                    {
                        "sbg:category": "Base Recalibrator",
                        "sbg:altPrefix": "-cov",
                        "id": "#covariate",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--covariate",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "One or more covariates to be used in the recalibration. Can be specified multiple times.",
                        "sbg:toolDefaultValue": "[]",
                        "label": "Covariate",
                        "type": [
                            "null",
                            {
                                "type": "array",
                                "items": {
                                    "type": "enum",
                                    "name": "covariate",
                                    "symbols": [
                                        "CycleCovariate",
                                        "ReadGroupCovariate",
                                        "ContextCovariate",
                                        "RepeatLengthCovariate",
                                        "QualityScoreCovariate"
                                    ]
                                }
                            }
                        ]
                    },
                    {
                        "sbg:category": "Base Recalibrator",
                        "sbg:altPrefix": "-ddq",
                        "id": "#deletions_default_quality",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--deletions_default_quality",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Default quality for the base deletions covariate.",
                        "sbg:toolDefaultValue": "45",
                        "label": "Deletions Default Quality",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "Base Recalibrator",
                        "sbg:altPrefix": "-ics",
                        "id": "#indels_context_size",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--indels_context_size",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Size of the k-mer context to be used for base insertions and deletions.",
                        "sbg:toolDefaultValue": "3",
                        "label": "Indels Context Size",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "Base Recalibrator",
                        "sbg:altPrefix": null,
                        "id": "#disable_indel_quals",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--disable_indel_quals",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Disable indel quality recalibration. Must be set to true in GATK Lite.",
                        "sbg:toolDefaultValue": "True",
                        "label": "Disable indel quals",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "Base Recalibrator",
                        "sbg:altPrefix": "-idq",
                        "id": "#insertions_default_quality",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--insertions_default_quality",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Default quality for the base insertions covariate.",
                        "sbg:toolDefaultValue": "45",
                        "label": "Insertions Default Quality",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "Base Recalibrator",
                        "sbg:altPrefix": "-lqt",
                        "id": "#low_quality_tail",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--low_quality_tail",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Minimum quality for the bases in the tail of the reads to be considered.",
                        "sbg:toolDefaultValue": "2",
                        "label": "Low Quality Tail",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "Base Recalibrator",
                        "sbg:altPrefix": "-maxCycle",
                        "id": "#maximum_cycle_value",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--maximum_cycle_value",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "The maximum cycle value permitted for the Cycle covariate.",
                        "sbg:toolDefaultValue": "500",
                        "label": "Maximum Cycle Value",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "Base Recalibrator",
                        "sbg:altPrefix": "-mcs",
                        "id": "#mismatches_context_size",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--mismatches_context_size",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Size of the k-mer context to be used for base mismatches.",
                        "sbg:toolDefaultValue": "2",
                        "label": "Mismatches Context Size",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "Base Recalibrator",
                        "sbg:altPrefix": "-msdq",
                        "id": "#mismatches_default_quality",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--mismatches_default_quality",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Default quality for the base mismatches covariate.",
                        "sbg:toolDefaultValue": "-1",
                        "label": "Mismatches Default Quality",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "Base Recalibrator",
                        "sbg:altPrefix": "-noStandard",
                        "id": "#no_standard_covs",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--no_standard_covs",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Do not use the standard set of covariates, but rather just the ones listed using the -cov argument. Cannot be used if grouped by interval.",
                        "sbg:toolDefaultValue": "False",
                        "label": "No Standard Covs",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "Base Recalibrator",
                        "sbg:altPrefix": "-ql",
                        "id": "#quantizing_levels",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--quantizing_levels",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Number of distinct quality scores in the quantized output.",
                        "sbg:toolDefaultValue": "16",
                        "label": "Quantizing Levels",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "Base Recalibrator",
                        "sbg:altPrefix": null,
                        "id": "#solid_nocall_strategy",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--solid_nocall_strategy",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Defines the behavior of the recalibrator when it encounters no calls in the color space. Options = THROW_EXCEPTION, LEAVE_READ_UNRECALIBRATED, or PURGE_READ.",
                        "sbg:toolDefaultValue": "THROW_EXCEPTION",
                        "label": "Solid Nocall Strategy",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "solid_nocall_strategy",
                                "symbols": [
                                    "THROW_EXCEPTION",
                                    "LEAVE_READ_UNRECALIBRATED",
                                    "PURGE_READ"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "Base Recalibrator",
                        "sbg:altPrefix": "-sMode",
                        "id": "#solid_recal_mode",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--solid_recal_mode",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "How should we recalibrate solid bases in which the reference was inserted? Options = DO_NOTHING, SET_Q_ZERO, SET_Q_ZERO_BASE_N, or REMOVE_REF_BIAS.",
                        "sbg:toolDefaultValue": "SET_Q_ZERO",
                        "label": "Solid Recal Mode",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "solid_recal_mode",
                                "symbols": [
                                    "DO_NOTHING",
                                    "SET_Q_ZERO",
                                    "SET_Q_ZERO_BASE_N",
                                    "REMOVE_REF_BIAS"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "Base Recalibrator",
                        "sbg:altPrefix": "-bqsrBAQGOP",
                        "id": "#bqsr_baq_gap_open_penalty",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--bqsrBAQGapOpenPenalty",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "BQSR BAQ gap open penalty (Phred Scaled).  Default value is 40.  30 is perhaps better for whole genome call sets.",
                        "sbg:toolDefaultValue": "40.0",
                        "label": "Bqsr Baq Gap Open Penalty",
                        "type": [
                            "null",
                            "float"
                        ]
                    },
                    {
                        "sbg:category": "Base Recalibrator",
                        "sbg:altPrefix": null,
                        "id": "#run_without_dbsnp_potentially_ruining_quality",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "-run_without_dbsnp_potentially_ruining_quality",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "If specified, allows the recalibrator to be used without a dbsnp rod. Very unsafe and for expert users only.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Run Without Dbsnp Potentially Ruining Quality",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "Execution",
                        "sbg:toolDefaultValue": "1",
                        "id": "#cpu_per_job",
                        "description": "Number of CPU per job.",
                        "type": [
                            "null",
                            "int"
                        ],
                        "label": "CPU per job"
                    },
                    {
                        "sbg:category": "Execution",
                        "sbg:toolDefaultValue": "0",
                        "id": "#memory_overhead_per_job",
                        "description": "Memory overhead per job. By default this parameter value is set to '0' (zero megabytes). This parameter value is added to the Memory per job parameter value. This results in the allocation of the sum total (Memory per job and Memory overhead per job) amount of memory per job. By default the memory per job parameter value is set to 2048 megabytes, unless specified otherwise.",
                        "type": [
                            "null",
                            "int"
                        ],
                        "label": "Memory overhead per job"
                    }
                ],
                "sbg:job": {
                    "allocatedResources": {
                        "mem": 2048,
                        "cpu": 1
                    },
                    "inputs": {
                        "memory_overhead_per_job": 0,
                        "reference": {
                            "path": "/folder/reference.fasta"
                        },
                        "known_sites": [
                            {
                                "path": "/folder/latest_dbsnp.vcf"
                            }
                        ],
                        "intervals": "20",
                        "reads": [
                            {
                                "size": 0,
                                "class": "File",
                                "secondaryFiles": [],
                                "path": "/folder/my_reads.bam"
                            }
                        ],
                        "cpu_per_job": null
                    }
                },
                "sbg:projectName": "GATK 2.3.9 Lite - Demo New ",
                "sbg:revisionsInfo": [
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1450911406,
                        "sbg:revision": 0,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1450911409,
                        "sbg:revision": 1,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1450911410,
                        "sbg:revision": 2,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1450911411,
                        "sbg:revision": 3,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1450911412,
                        "sbg:revision": 4,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1450911413,
                        "sbg:revision": 5,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:revisionNotes": "File extensions for intervals_file corrected.",
                        "sbg:modifiedOn": 1469450580,
                        "sbg:revision": 6,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": "known sites link.",
                        "sbg:modifiedOn": 1471364360,
                        "sbg:revision": 7,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": "-L intervals string",
                        "sbg:modifiedOn": 1472226104,
                        "sbg:revision": 8,
                        "sbg:modifiedBy": "bogdang"
                    },
                    {
                        "sbg:revisionNotes": ".bai secondary file",
                        "sbg:modifiedOn": 1478707638,
                        "sbg:revision": 9,
                        "sbg:modifiedBy": "bogdang"
                    },
                    {
                        "sbg:revisionNotes": "Updated the intervals input to handle both chr and non chr strings based on what the input fasta file contains. \n\nIf the intervals input is set to chr20 and the fasta contigs are 1,2,3... it will convert the input to 20, and vice versa.\n\nIMPORTANT: The test will show that there are some errors in the expressions, the errors come from the fasta's loaded contents not being processed properly during the test as the files contain no contents for testing.",
                        "sbg:modifiedOn": 1490973283,
                        "sbg:revision": 10,
                        "sbg:modifiedBy": "nikola_jovanovic"
                    },
                    {
                        "sbg:revisionNotes": "Set reference load content.",
                        "sbg:modifiedOn": 1490995301,
                        "sbg:revision": 11,
                        "sbg:modifiedBy": "nikola_jovanovic"
                    }
                ],
                "sbg:toolAuthor": "Broad Institute",
                "sbg:contributors": [
                    "vladimirk",
                    "bogdang",
                    "nikola_jovanovic",
                    "bix-demo"
                ],
                "outputs": [
                    {
                        "sbg:fileTypes": "GRP",
                        "id": "#bqsr",
                        "outputBinding": {
                            "glob": "*.recal_data.grp",
                            "sbg:metadata": {},
                            "sbg:inheritMetadataFrom": "#reads"
                        },
                        "description": "The output recalibration table file to create.",
                        "type": [
                            "File"
                        ],
                        "label": "BQSR Table"
                    },
                    {
                        "sbg:fileTypes": "PDF",
                        "label": "Plot",
                        "outputBinding": {
                            "glob": "*.pdf",
                            "sbg:metadata": {}
                        },
                        "id": "#plot_pdf",
                        "type": [
                            "null",
                            "File"
                        ]
                    }
                ],
                "sbg:toolkit": "GATK"
            },
            "outputs": [
                {
                    "id": "#GATK_BaseRecalibrator.bqsr"
                },
                {
                    "id": "#GATK_BaseRecalibrator.plot_pdf"
                }
            ],
            "inputs": [
                {
                    "id": "#GATK_BaseRecalibrator.reference",
                    "source": [
                        "#SBG_FASTA_Indices.fasta_reference"
                    ]
                },
                {
                    "id": "#GATK_BaseRecalibrator.reads",
                    "source": [
                        "#GATK_IndelRealigner.realigned_bam_file"
                    ]
                },
                {
                    "id": "#GATK_BaseRecalibrator.exclude_intervals"
                },
                {
                    "id": "#GATK_BaseRecalibrator.gatk_key"
                },
                {
                    "id": "#GATK_BaseRecalibrator.intervals_file"
                },
                {
                    "id": "#GATK_BaseRecalibrator.known_sites",
                    "source": [
                        "#known_sites_1"
                    ]
                },
                {
                    "id": "#GATK_BaseRecalibrator.disable_radnomization"
                },
                {
                    "id": "#GATK_BaseRecalibrator.allow_potentailly_misencoded_quals"
                },
                {
                    "id": "#GATK_BaseRecalibrator.baq"
                },
                {
                    "id": "#GATK_BaseRecalibrator.baq_gap_open_penalty"
                },
                {
                    "id": "#GATK_BaseRecalibrator.default_base_qualities"
                },
                {
                    "id": "#GATK_BaseRecalibrator.downsample_to_coverage"
                },
                {
                    "id": "#GATK_BaseRecalibrator.downsample_to_fraction"
                },
                {
                    "id": "#GATK_BaseRecalibrator.downsampling_type"
                },
                {
                    "id": "#GATK_BaseRecalibrator.emit_original_quals"
                },
                {
                    "id": "#GATK_BaseRecalibrator.fix_misencoded_quals"
                },
                {
                    "id": "#GATK_BaseRecalibrator.interval_merging"
                },
                {
                    "id": "#GATK_BaseRecalibrator.interval_padding"
                },
                {
                    "id": "#GATK_BaseRecalibrator.interval_set_rule"
                },
                {
                    "id": "#GATK_BaseRecalibrator.keep_program_records"
                },
                {
                    "id": "#GATK_BaseRecalibrator.max_runtime"
                },
                {
                    "id": "#GATK_BaseRecalibrator.max_runtime_units"
                },
                {
                    "id": "#GATK_BaseRecalibrator.non_deterministic_random_seed"
                },
                {
                    "id": "#GATK_BaseRecalibrator.pedigree_string"
                },
                {
                    "id": "#GATK_BaseRecalibrator.pedigree_validation_type"
                },
                {
                    "id": "#GATK_BaseRecalibrator.phone_home"
                },
                {
                    "id": "#GATK_BaseRecalibrator.preserve_qscores_less_than"
                },
                {
                    "id": "#GATK_BaseRecalibrator.read_filter"
                },
                {
                    "id": "#GATK_BaseRecalibrator.read_group_black_list"
                },
                {
                    "id": "#GATK_BaseRecalibrator.remove_program_records"
                },
                {
                    "id": "#GATK_BaseRecalibrator.tag"
                },
                {
                    "id": "#GATK_BaseRecalibrator.unsafe"
                },
                {
                    "id": "#GATK_BaseRecalibrator.use_legacy_downsampler"
                },
                {
                    "id": "#GATK_BaseRecalibrator.use_original_qualities"
                },
                {
                    "id": "#GATK_BaseRecalibrator.validation_strictness"
                },
                {
                    "id": "#GATK_BaseRecalibrator.intervals",
                    "source": [
                        "#intervals"
                    ]
                },
                {
                    "id": "#GATK_BaseRecalibrator.memory_per_job",
                    "default": 50000
                },
                {
                    "id": "#GATK_BaseRecalibrator.threads_per_job",
                    "default": 32
                },
                {
                    "id": "#GATK_BaseRecalibrator.binary_tag_name"
                },
                {
                    "id": "#GATK_BaseRecalibrator.covariate"
                },
                {
                    "id": "#GATK_BaseRecalibrator.deletions_default_quality"
                },
                {
                    "id": "#GATK_BaseRecalibrator.indels_context_size"
                },
                {
                    "id": "#GATK_BaseRecalibrator.disable_indel_quals"
                },
                {
                    "id": "#GATK_BaseRecalibrator.insertions_default_quality"
                },
                {
                    "id": "#GATK_BaseRecalibrator.low_quality_tail"
                },
                {
                    "id": "#GATK_BaseRecalibrator.maximum_cycle_value"
                },
                {
                    "id": "#GATK_BaseRecalibrator.mismatches_context_size"
                },
                {
                    "id": "#GATK_BaseRecalibrator.mismatches_default_quality"
                },
                {
                    "id": "#GATK_BaseRecalibrator.no_standard_covs"
                },
                {
                    "id": "#GATK_BaseRecalibrator.quantizing_levels"
                },
                {
                    "id": "#GATK_BaseRecalibrator.solid_nocall_strategy"
                },
                {
                    "id": "#GATK_BaseRecalibrator.solid_recal_mode"
                },
                {
                    "id": "#GATK_BaseRecalibrator.bqsr_baq_gap_open_penalty"
                },
                {
                    "id": "#GATK_BaseRecalibrator.run_without_dbsnp_potentially_ruining_quality"
                },
                {
                    "id": "#GATK_BaseRecalibrator.cpu_per_job",
                    "default": 32
                },
                {
                    "id": "#GATK_BaseRecalibrator.memory_overhead_per_job"
                }
            ],
            "sbg:x": 1571.1768614653809
        },
        {
            "id": "#GATK_UnifiedGenotyper",
            "scatter": "#GATK_UnifiedGenotyper.reads",
            "sbg:y": 422.7605820931547,
            "run": {
                "sbg:modifiedOn": 1484912384,
                "sbg:id": "bix-demo/gatk-2-3-9-lite-demo/gatk-2-3-9-lite-unifiedgenotyper/15",
                "id": "https://api.sbgenomics.com/v2/apps/bix-demo/gatk-2-3-9-lite-demo/gatk-2-3-9-lite-unifiedgenotyper/15/raw/",
                "sbg:cmdPreview": "java -Xmx2048M -jar /opt/GenomeAnalysisTKLite.jar --analysis_type UnifiedGenotyper -nt 4 --reference_sequence /folder/reference.fasta --input_file sample1.bam --input_file sample2.bam --out sample1.vcf",
                "sbg:revision": 15,
                "description": "Overview\n\nThis tool uses a Bayesian genotype likelihood model to estimate simultaneously the most likely genotypes and allele frequency in a population of N samples, emitting a genotype for each sample. The system can either emit just the variant sites or complete genotypes (which includes homozygous reference calls) satisfying some phred-scaled confidence value.\n\nInput\nThe read data from which to make variant calls.\n\nOutput\nA raw, unfiltered, highly sensitive callset in VCF format.\n\nUsage examples:\n\n//Multi-sample SNP calling\n java -jar GenomeAnalysisTK.jar \\\n   -T UnifiedGenotyper \\\n   -R reference.fasta \\\n   -I sample1.bam [-I sample2.bam ...] \\\n   --dbsnp dbSNP.vcf \\\n   -o snps.raw.vcf \\\n   -stand_call_conf [50.0] \\\n   -stand_emit_conf 10.0 \\\n   [-L targets.interval_list]\n \n//Generate calls at all sites\n java -jar GenomeAnalysisTK.jar \\\n   -T UnifiedGenotyper \\\n   -R reference.fasta \\\n   -I input.bam \\\n   -o raw_variants.vcf \\\n   --output_mode EMIT_ALL_SITES\n \nCaveats\n\nThe caller can be very aggressive in calling variants in order to be very sensitive, so the raw output will contain many false positives. We use extensive post-calling filters to eliminate most of these FPs. See the documentation on filtering (especially by Variant Quality Score Recalibration) for more details.\nThis tool has been deprecated in favor of HaplotypeCaller, a much more sophisticated variant caller that produces much better calls, especially on indels, and includes features that allow it to scale to much larger cohort sizes.\nSpecial note on ploidy\n\nThis tool is able to handle almost any ploidy (except very high ploidies in large pooled experiments); the ploidy can be specified using the -ploidy argument for non-diploid organisms.\n\n(IMPORTANT) Reference \".fasta\" Secondary Files\n\nTools in GATK that require a fasta reference file also look for the reference file's corresponding .fai (fasta index) and .dict (fasta dictionary) files. The fasta index file allows random access to reference bases and the dictionary file is a dictionary of the contig names and sizes contained within the fasta reference. These two secondary files are essential for GATK to work properly. To append these two files to your fasta reference please use the 'SBG FASTA Indices' tool within your GATK based workflow before using any of the GATK tools.",
                "successCodes": [],
                "sbg:sbgMaintained": false,
                "sbg:categories": [
                    "Variant-Calling"
                ],
                "sbg:project": "bix-demo/gatk-2-3-9-lite-demo",
                "sbg:image_url": null,
                "stdin": "",
                "requirements": [
                    {
                        "requirements": [
                            {
                                "class": "DockerRequirement",
                                "dockerPull": "rabix/js-engine"
                            }
                        ],
                        "class": "ExpressionEngineRequirement",
                        "id": "#cwl-js-engine"
                    }
                ],
                "sbg:links": [
                    {
                        "label": "Homepage",
                        "id": "https://www.broadinstitute.org/gatk/index.php"
                    },
                    {
                        "label": "Source code",
                        "id": "https://github.com/broadgsa/gatk-protected"
                    },
                    {
                        "label": "Wiki",
                        "id": "https://www.broadinstitute.org/gatk/guide/pdfdocs/GATK_GuideBook_2.3-9.pdf"
                    },
                    {
                        "label": "Download",
                        "id": "https://www.broadinstitute.org/gatk/download/auth?package=GATK-archive&version=2.3-9-ge5ebf34"
                    },
                    {
                        "label": "Publication",
                        "id": "https://www.broadinstitute.org/gatk/about/#in-the-literature"
                    },
                    {
                        "label": "Documentation",
                        "id": "https://www.broadinstitute.org/gatk/gatkdocs/org_broadinstitute_gatk_tools_walkers_genotyper_UnifiedGenotyper.php"
                    }
                ],
                "sbg:createdOn": 1450911349,
                "sbg:revisionNotes": "Fix for single run without dbsnp",
                "hints": [
                    {
                        "dockerImageId": "47510cb2da55",
                        "class": "DockerRequirement",
                        "dockerPull": "images.sbgenomics.com/stefanristeski/gatk2-lite:2.3-9"
                    },
                    {
                        "value": {
                            "script": "{\n  if($job.inputs.cpu_per_job){\n  \treturn $job.inputs.cpu_per_job\n  }\n\treturn 1\n}",
                            "engine": "#cwl-js-engine",
                            "class": "Expression"
                        },
                        "class": "sbg:CPURequirement"
                    },
                    {
                        "value": {
                            "script": "{\n  if($job.inputs.memory_per_job){\n    if($job.inputs.memory_overhead_per_job){\n    \treturn $job.inputs.memory_per_job + $job.inputs.memory_overhead_per_job\n    }\n    else\n  \t\treturn $job.inputs.memory_per_job\n  }\n  else if(!$job.inputs.memory_per_job && $job.inputs.memory_overhead_per_job){\n\t\treturn 2048 + $job.inputs.memory_overhead_per_job  \n  }\n  else\n  \treturn 2048\n}",
                            "engine": "#cwl-js-engine",
                            "class": "Expression"
                        },
                        "class": "sbg:MemRequirement"
                    }
                ],
                "label": "GATK UnifiedGenotyper",
                "arguments": [
                    {
                        "prefix": "--out",
                        "separate": true,
                        "valueFrom": {
                            "script": "{\n  read_name = [].concat($job.inputs.reads)[0].path.replace(/^.*[\\\\\\/]/, '').split('.')\n  read_namebase = read_name.slice(0, read_name.length-1).join('.')\n\n  if($job.inputs.bqsr){\n  \treturn read_namebase + '.base_recalibrated.vcf'\n  }\n  else{\n  \treturn read_namebase + '.vcf'\n  }\n}",
                            "engine": "#cwl-js-engine",
                            "class": "Expression"
                        }
                    }
                ],
                "sbg:validationErrors": [],
                "baseCommand": [
                    "java",
                    {
                        "script": "{\n  if($job.inputs.memory_per_job){\n  \treturn '-Xmx'.concat($job.inputs.memory_per_job, 'M')\n  }\n  return '-Xmx2048M'\n}",
                        "engine": "#cwl-js-engine",
                        "class": "Expression"
                    },
                    "-jar",
                    "/opt/GenomeAnalysisTKLite.jar",
                    "--analysis_type",
                    "UnifiedGenotyper",
                    {
                        "script": "{ \n  if($job.inputs.threads_per_job){\n    return '-nt '.concat($job.inputs.threads_per_job)\n  }\n  else{\n  \treturn '-nt '.concat(4)\n  }\n}",
                        "engine": "#cwl-js-engine",
                        "class": "Expression"
                    }
                ],
                "temporaryFailCodes": [],
                "sbg:toolkitVersion": "2.3.9 Lite",
                "sbg:latestRevision": 15,
                "stdout": "",
                "sbg:modifiedBy": "bogdang",
                "cwlVersion": "sbg:draft-2",
                "sbg:license": "MIT License",
                "sbg:appVersion": [
                    "sbg:draft-2"
                ],
                "class": "CommandLineTool",
                "sbg:createdBy": "bix-demo",
                "inputs": [
                    {
                        "sbg:category": "Input Files",
                        "sbg:fileTypes": "FASTA, FA",
                        "id": "#reference",
                        "inputBinding": {
                            "itemSeparator": " ",
                            "prefix": "--reference_sequence",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Reference Genome in FASTA format.",
                        "sbg:altPrefix": "-R",
                        "label": "Reference Genome",
                        "type": [
                            "File"
                        ]
                    },
                    {
                        "sbg:category": "Input Files",
                        "sbg:fileTypes": "SAM,BAM",
                        "id": "#reads",
                        "inputBinding": {
                            "secondaryFiles": [
                                ".bai"
                            ],
                            "itemSeparator": null,
                            "prefix": "--input_file",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Read sequences in BAM format.",
                        "sbg:altPrefix": "-I",
                        "label": "Read sequences",
                        "type": [
                            {
                                "type": "array",
                                "name": "reads",
                                "items": "File"
                            }
                        ]
                    },
                    {
                        "sbg:category": "Input Files",
                        "sbg:fileTypes": "TXT, BED, VCF",
                        "id": "#exclude_intervals",
                        "inputBinding": {
                            "itemSeparator": " ",
                            "prefix": "--excludeIntervals",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "One or more genomic intervals to exclude from processing. Can be an .intervals file or a rod file.",
                        "sbg:altPrefix": "-XL",
                        "label": "Exclude Intervals",
                        "type": [
                            "null",
                            "File"
                        ]
                    },
                    {
                        "sbg:category": "Input Files",
                        "sbg:fileTypes": "BED,LIST,PICARD,INTERVAL_LIST,INTERVALS",
                        "id": "#intervals_file",
                        "inputBinding": {
                            "itemSeparator": null,
                            "sbg:cmdInclude": true,
                            "separate": true,
                            "valueFrom": {
                                "script": "{\n  if($job.inputs.intervals_file){\n    if($job.inputs.intervals_file instanceof Array){\n      if($job.inputs.intervals_file.length > 1){\n        if([].concat($job.inputs.reads)[0].metadata)\n          if([].concat($job.inputs.reads)[0].metadata.intervals_file)\n            return '--intervals ' + [].concat($job.inputs.reads)[0].metadata.intervals_file\n      } else return '--intervals ' + [].concat($job.inputs.intervals_file)[0].path\n    } else return '--intervals ' + [].concat($job.inputs.intervals_file)[0].path\n  } else\n    return ''\n}",
                                "engine": "#cwl-js-engine",
                                "class": "Expression"
                            }
                        },
                        "description": "One or more genomic intervals over which to operate. Can be an specified in an .intervals file or a rod file.",
                        "sbg:altPrefix": "-L",
                        "sbg:stageInput": "link",
                        "label": "Intervals",
                        "type": [
                            "null",
                            {
                                "type": "array",
                                "name": "intervals_file",
                                "items": "File"
                            }
                        ]
                    },
                    {
                        "sbg:category": "Input Files",
                        "sbg:fileTypes": "KEY, LICENSE",
                        "id": "#gatk_key",
                        "inputBinding": {
                            "itemSeparator": " ",
                            "prefix": "--gatk_key",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "GATK Key file. Required if running with -et NO_ET. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.",
                        "sbg:altPrefix": "-K",
                        "label": "Gatk key",
                        "type": [
                            "null",
                            "File"
                        ]
                    },
                    {
                        "sbg:category": "Input Files",
                        "sbg:fileTypes": "GRP",
                        "id": "#bqsr",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--BQSR",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "The input covariates table file which enables on-the-fly base quality score recalibration.",
                        "sbg:altPrefix": "-BQSR",
                        "label": "BQSR",
                        "type": [
                            "null",
                            {
                                "type": "array",
                                "items": "File"
                            }
                        ]
                    },
                    {
                        "sbg:category": "Input Files",
                        "sbg:fileTypes": "VCF",
                        "id": "#dbsnp",
                        "inputBinding": {
                            "itemSeparator": " ",
                            "sbg:cmdInclude": true,
                            "separate": true,
                            "valueFrom": {
                                "script": "{\n  if ($job.inputs.dbsnp)\n  return '--dbsnp ' + [].concat($job.inputs.dbsnp)[0].path\n}",
                                "engine": "#cwl-js-engine",
                                "class": "Expression"
                            }
                        },
                        "description": "DbSNP file in VCF format.",
                        "sbg:altPrefix": "-D",
                        "label": "DbSNP",
                        "type": [
                            "null",
                            "File"
                        ]
                    },
                    {
                        "sbg:category": "Input Files",
                        "sbg:fileTypes": "VCF",
                        "id": "#alleles",
                        "inputBinding": {
                            "itemSeparator": " ",
                            "prefix": "--alleles",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "The set of alleles at which to genotype when --genotyping_mode is GENOTYPE_GIVEN_ALLELES.",
                        "sbg:altPrefix": "-alleles",
                        "label": "Alleles",
                        "type": [
                            "null",
                            "File"
                        ]
                    },
                    {
                        "sbg:category": "Input Files",
                        "sbg:altPrefix": null,
                        "id": "#comp",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--comp",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Comparison VCF file.",
                        "type": [
                            "null",
                            {
                                "type": "array",
                                "items": "File"
                            }
                        ],
                        "label": "Comp"
                    },
                    {
                        "sbg:category": "Input Files",
                        "sbg:altPrefix": null,
                        "id": "#reference_sample_calls",
                        "inputBinding": {
                            "itemSeparator": " ",
                            "prefix": "--reference_sample_calls",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "VCF file with the truth callset for the reference sample.",
                        "type": [
                            "null",
                            "File"
                        ],
                        "label": "Reference Sample Calls"
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": null,
                        "id": "#disable_radnomization",
                        "inputBinding": {
                            "itemSeparator": " ",
                            "prefix": "--disableRandomization",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Completely eliminates randomization from nondeterministic methods. To be used mostly in the testing framework where dynamic parallelism can result in differing numbers of calls to the generator.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Disable Randomization",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "--allow_potentially_misencoded_quality_scores",
                        "id": "#allow_potentailly_misencoded_quals",
                        "inputBinding": {
                            "itemSeparator": " ",
                            "prefix": "-allowPotentiallyMisencodedQuals",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Do not fail when encountered base qualities that are too high and seemingly indicate a problem with the base quality encoding of the BAM file.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Allow Potentially Misencoded Quals",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-baq",
                        "id": "#baq",
                        "inputBinding": {
                            "itemSeparator": " ",
                            "prefix": "--baq",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Type of BAQ calculation to apply in the engine.",
                        "sbg:toolDefaultValue": "OFF",
                        "label": "BAQ Calculation Type",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "baq",
                                "symbols": [
                                    "OFF",
                                    "CALCULATE_AS_NECESSARY",
                                    "RECALCULATE"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-baqGOP",
                        "id": "#baq_gap_open_penalty",
                        "inputBinding": {
                            "itemSeparator": " ",
                            "prefix": "--baqGapOpenPenalty",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "BAQ gap open penalty (Phred Scaled). Default value is 40. 30 is perhaps better for whole genome call sets.",
                        "sbg:toolDefaultValue": "40.0",
                        "label": "BAQ Gap Open Penalty",
                        "type": [
                            "null",
                            "float"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-DBQ",
                        "id": "#default_base_qualities",
                        "inputBinding": {
                            "itemSeparator": " ",
                            "prefix": "--defaultBaseQualities",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "If reads are missing some or all base quality scores, this value will be used for all base quality scores.",
                        "sbg:toolDefaultValue": "-1",
                        "label": "Default Base Qualities",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-DIQ",
                        "id": "#disable_indel_quals",
                        "inputBinding": {
                            "itemSeparator": " ",
                            "prefix": "--disable_indel_quals",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "If 'true', disables printing of base insertion and base deletion tags (with -BQSR). Turns off printing of the base insertion and base deletion tags when using the -BQSR argument and only the base substitution qualities will be produced.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Disable Indel Quals",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-dcov",
                        "id": "#downsample_to_coverage",
                        "inputBinding": {
                            "itemSeparator": " ",
                            "prefix": "--downsample_to_coverage",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Coverage to downsample to at any given locus; note that downsampled reads are randomly selected from all possible reads at a locus. For non-locus-based traversals (eg., ReadWalkers), this sets the maximum number of reads at each alignment start position.",
                        "sbg:toolDefaultValue": "",
                        "label": "Downsample to Coverage",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-dfrac",
                        "id": "#downsample_to_fraction",
                        "inputBinding": {
                            "itemSeparator": " ",
                            "prefix": "--downsample_to_fraction",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Fraction [0.0-1.0] of reads to downsample to.",
                        "sbg:toolDefaultValue": "",
                        "label": "Downsample to Fraction",
                        "type": [
                            "null",
                            "float"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-dt",
                        "id": "#downsampling_type",
                        "inputBinding": {
                            "itemSeparator": " ",
                            "prefix": "--downsampling_type",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Type of reads downsampling to employ at a given locus. Reads will be selected randomly to be removed from the pile based on the method described here.",
                        "sbg:toolDefaultValue": "",
                        "label": "Downsampling Type",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "downsampling_type",
                                "symbols": [
                                    "NONE",
                                    "ALL_READS",
                                    "BY_SAMPLE"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-EOQ",
                        "id": "#emit_original_quals",
                        "inputBinding": {
                            "itemSeparator": " ",
                            "prefix": "--emit_original_quals",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "If true, enables printing of the OQ tag with the original base qualities (with -BQSR).",
                        "sbg:toolDefaultValue": "False",
                        "label": "Emit Original Quals",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-fixMisencodedQuals",
                        "id": "#fix_misencoded_quals",
                        "inputBinding": {
                            "itemSeparator": " ",
                            "prefix": "-fixMisencodedQuals",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Fix mis-encoded base quality scores.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Fix Misencoded Quals",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-im",
                        "id": "#interval_merging",
                        "inputBinding": {
                            "itemSeparator": " ",
                            "prefix": "--interval_merging",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Indicates the interval merging rule we should use for abutting intervals.",
                        "sbg:toolDefaultValue": "ALL",
                        "label": "Interval Merging",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "interval_merging",
                                "symbols": [
                                    "ALL",
                                    "OVERLAPPING_ONLY"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-ip",
                        "id": "#interval_padding",
                        "inputBinding": {
                            "itemSeparator": " ",
                            "prefix": "--interval_padding",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Indicates how many basepairs of padding to include around each of the intervals specified with the -L/--intervals argument.",
                        "sbg:toolDefaultValue": "0",
                        "label": "Interval Padding",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-isr",
                        "id": "#interval_set_rule",
                        "inputBinding": {
                            "itemSeparator": " ",
                            "prefix": "--interval_set_rule",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Indicates the set merging approach the interval parser should use to combine the various -L or -XL inputs.",
                        "sbg:toolDefaultValue": "UNION",
                        "label": "Interval Set Rule",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "interval_set_rule",
                                "symbols": [
                                    "UNION",
                                    "INTERSECTION"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-kpr",
                        "id": "#keep_program_records",
                        "inputBinding": {
                            "itemSeparator": " ",
                            "prefix": "--keep_program_records",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Should we override the Walker's default and keep program records from the SAM header.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Keep Program Records",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-maxRuntime",
                        "id": "#max_runtime",
                        "inputBinding": {
                            "itemSeparator": " ",
                            "prefix": "--maxRuntime",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "If provided, that GATK will stop execution cleanly as soon after maxRuntime has been exceeded, truncating the run but not exiting with a failure.  By default the value is interpreted in minutes, but this can be changed by maxRuntimeUnits.",
                        "sbg:toolDefaultValue": "-1",
                        "label": "Max Runtime",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-maxRuntimeUnits",
                        "id": "#max_runtime_units",
                        "inputBinding": {
                            "itemSeparator": " ",
                            "prefix": "--maxRuntimeUnits",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "The TimeUnit for maxRuntime.",
                        "sbg:toolDefaultValue": "MINUTES",
                        "label": "Max Runtime Units",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "max_runtime_units",
                                "symbols": [
                                    "NANOSECONDS",
                                    "MICROSECONDS",
                                    "MILLISECONDS",
                                    "SECONDS",
                                    "MINUTES",
                                    "HOURS",
                                    "DAYS"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-ndrs",
                        "id": "#non_deterministic_random_seed",
                        "inputBinding": {
                            "itemSeparator": " ",
                            "prefix": "--nonDeterministicRandomSeed",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Makes the GATK behave non deterministically, that is, the random numbers generated will be different in every run.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Non Deterministic Random Seed",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-pedString",
                        "id": "#pedigree_string",
                        "inputBinding": {
                            "itemSeparator": " ",
                            "prefix": "--pedigreeString",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Pedigree string for samples.",
                        "sbg:toolDefaultValue": "[]",
                        "label": "Pedigree String",
                        "type": [
                            "null",
                            {
                                "type": "array",
                                "items": "string"
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-pedValidationType",
                        "id": "#pedigree_validation_type",
                        "inputBinding": {
                            "itemSeparator": " ",
                            "prefix": "--pedigreeValidationType",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "How strict should we be in validating the pedigree information?.",
                        "sbg:toolDefaultValue": "STRICT",
                        "label": "Pedigree Validation Type",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "pedigree_validation_type",
                                "symbols": [
                                    "STRICT",
                                    "SILENT"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-et",
                        "id": "#phone_home",
                        "inputBinding": {
                            "itemSeparator": " ",
                            "prefix": "--phone_home",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "What kind of GATK run report should we generate? STANDARD is the default, can be NO_ET so nothing is posted to the run repository. Please see http://gatkforums.broadinstitute.org/discussion/1250/what-is-phone-home-and-how-does-it-affect-me#latest for details.",
                        "sbg:toolDefaultValue": "STANDARD",
                        "label": "Phone Home",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "phone_home",
                                "symbols": [
                                    "NO_ET",
                                    "STANDARD"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-preserveQ",
                        "id": "#preserve_qscores_less_than",
                        "inputBinding": {
                            "itemSeparator": " ",
                            "prefix": "--preserve_qscores_less_than",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Bases with quality scores less than this threshold won't be recalibrated (with -BQSR).",
                        "sbg:toolDefaultValue": "6",
                        "label": "Preserve Qscores Less Than",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-rf",
                        "id": "#read_filter",
                        "inputBinding": {
                            "itemSeparator": null,
                            "prefix": "--read_filter",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Specify filtration criteria to apply to each read individually.",
                        "sbg:toolDefaultValue": "[]",
                        "label": "Read Filter",
                        "type": [
                            "null",
                            {
                                "type": "array",
                                "items": {
                                    "type": "enum",
                                    "name": "read_filter",
                                    "symbols": [
                                        "BadCigarFilter",
                                        "BadMateFilter",
                                        "CountingFilteringIterator.CountingReadFilter",
                                        "DuplicateReadFilter",
                                        "FailsVendorQualityCheckFilter",
                                        "HCMappingQualityFilter",
                                        "LibraryReadFilter",
                                        "MalformedReadFilter",
                                        "MappingQualityFilter",
                                        "MappingQualityUnavailableFilter",
                                        "MappingQualityZeroFilter",
                                        "MateSameStrandFilter",
                                        "MaxInsertSizeFilter",
                                        "MissingReadGroupFilter",
                                        "NoOriginalQualityScoresFilter",
                                        "NotPrimaryAlignmentFilter",
                                        "OverclippedReadFilter",
                                        "Platform454Filter",
                                        "PlatformFilter",
                                        "PlatformUnitFilter",
                                        "ReadGroupBlackListFilter",
                                        "ReadLengthFilter",
                                        "ReadNameFilter",
                                        "ReadStrandFilter",
                                        "ReassignMappingQualityFilter",
                                        "ReassignOneMappingQualityFilter",
                                        "SampleFilter",
                                        "SingleReadGroupFilter",
                                        "UnmappedReadFilter"
                                    ]
                                }
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-rgbl",
                        "id": "#read_group_black_list",
                        "inputBinding": {
                            "itemSeparator": " ",
                            "prefix": "--read_group_black_list",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Filters out read groups matching : or a .txt file containing the filter strings one per line.",
                        "sbg:toolDefaultValue": "[]",
                        "label": "Read Group Black List",
                        "type": [
                            "null",
                            {
                                "type": "array",
                                "items": "string"
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-rpr",
                        "id": "#remove_program_records",
                        "inputBinding": {
                            "itemSeparator": " ",
                            "prefix": "--remove_program_records",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Should we override the Walker's default and remove program records from the SAM header.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Remove Program Records",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-tag",
                        "id": "#tag",
                        "inputBinding": {
                            "itemSeparator": " ",
                            "prefix": "--tag",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Arbitrary tag string to identify this GATK run as part of a group of runs, for later analysis.",
                        "sbg:toolDefaultValue": "",
                        "label": "Tag",
                        "type": [
                            "null",
                            "string"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-U",
                        "id": "#unsafe",
                        "inputBinding": {
                            "itemSeparator": " ",
                            "prefix": "--unsafe",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "If set, enables unsafe operations: nothing will be checked at runtime.  For expert users only who know what they are doing.  We do not support usage of this argument.",
                        "sbg:toolDefaultValue": "",
                        "label": "Unsafe",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "unsafe",
                                "symbols": [
                                    "ALLOW_UNINDEXED_BAM",
                                    "ALLOW_UNSET_BAM_SORT_ORDER",
                                    "NO_READ_ORDER_VERIFICATION",
                                    "ALLOW_SEQ_DICT_INCOMPATIBILITY",
                                    "LENIENT_VCF_PROCESSING",
                                    "ALL"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-use_legacy_downsampler",
                        "id": "#use_legacy_downsampler",
                        "inputBinding": {
                            "itemSeparator": " ",
                            "prefix": "--use_legacy_downsampler",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Use the legacy downsampling implementation instead of the newer, less-tested implementation.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Use Legacy Downsampler",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-OQ",
                        "id": "#use_original_qualities",
                        "inputBinding": {
                            "itemSeparator": " ",
                            "prefix": "--useOriginalQualities",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "If set, use the original base quality scores from the OQ tag when present instead of the standard scores.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Use Original Qualities",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": "-S",
                        "id": "#validation_strictness",
                        "inputBinding": {
                            "itemSeparator": " ",
                            "prefix": "--validation_strictness",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "How strict should we be with validation.",
                        "sbg:toolDefaultValue": "SILENT",
                        "label": "Validation Strictness",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "validation_strictness",
                                "symbols": [
                                    "SILENT",
                                    "LENIENT",
                                    "STRICT"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "GATK General",
                        "sbg:altPrefix": null,
                        "id": "#intervals",
                        "inputBinding": {
                            "itemSeparator": " ",
                            "prefix": "-L",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "One or more genomic intervals over which to operate.",
                        "sbg:toolDefaultValue": "",
                        "label": "Intervals",
                        "type": [
                            "null",
                            "string"
                        ]
                    },
                    {
                        "sbg:category": "Execution",
                        "sbg:altPrefix": null,
                        "id": "#memory_per_job",
                        "description": "Amount of RAM memory in MB to be used per job.",
                        "sbg:toolDefaultValue": "2048",
                        "label": "Memory per job",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "Execution",
                        "sbg:altPrefix": null,
                        "id": "#cpu_per_job",
                        "description": "Number of CPUs per job.",
                        "sbg:toolDefaultValue": "1",
                        "label": "CPU per job",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "Execution",
                        "sbg:altPrefix": null,
                        "id": "#threads_per_job",
                        "description": "For tools which support multiprocessing, this value can be used to set the number of threads to be used.",
                        "sbg:toolDefaultValue": "4",
                        "label": "Threads per job",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "Unified Genotyper",
                        "sbg:altPrefix": "-nda",
                        "id": "#annotate_nda",
                        "inputBinding": {
                            "itemSeparator": " ",
                            "prefix": "--annotateNDA",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "If provided, we will annotate records with the number of alternate alleles that were discovered (but not necessarily genotyped) at a given site.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Annotate Nda",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "Unified Genotyper",
                        "sbg:altPrefix": "-A",
                        "id": "#annotation",
                        "inputBinding": {
                            "itemSeparator": " ",
                            "prefix": "--annotation",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "One or more specific annotations to apply to variant calls.",
                        "sbg:toolDefaultValue": "[]",
                        "label": "Annotation",
                        "type": [
                            "null",
                            {
                                "type": "array",
                                "items": "string"
                            }
                        ]
                    },
                    {
                        "sbg:category": "Unified Genotyper",
                        "sbg:altPrefix": "-slod",
                        "id": "#compute_slod",
                        "inputBinding": {
                            "itemSeparator": " ",
                            "prefix": "--computeSLOD",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "If provided, we will calculate the SLOD (SB annotation).",
                        "sbg:toolDefaultValue": "False",
                        "label": "Compute Slod",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "Unified Genotyper",
                        "sbg:altPrefix": "-contamination",
                        "id": "#contamination",
                        "inputBinding": {
                            "itemSeparator": " ",
                            "prefix": "--contamination_fraction_to_filter",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Fraction of contamination in sequencing data (for all samples) to aggressively remove.",
                        "sbg:toolDefaultValue": "0.05",
                        "label": "Contamination",
                        "type": [
                            "null",
                            "float"
                        ]
                    },
                    {
                        "sbg:category": "Unified Genotyper",
                        "sbg:altPrefix": "-XA",
                        "id": "#exclude_annotation",
                        "inputBinding": {
                            "itemSeparator": " ",
                            "prefix": "--excludeAnnotation",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "One or more specific annotations to exclude.",
                        "sbg:toolDefaultValue": "[]",
                        "label": "Exclude Annotation",
                        "type": [
                            "null",
                            {
                                "type": "array",
                                "items": "string"
                            }
                        ]
                    },
                    {
                        "sbg:category": "Unified Genotyper",
                        "sbg:altPrefix": "-glm",
                        "id": "#genotype_likelihoods_model",
                        "inputBinding": {
                            "itemSeparator": " ",
                            "prefix": "--genotype_likelihoods_model",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Genotype likelihoods calculation model to employ -- SNP is the default option, while INDEL is also available for calling indels and BOTH is available for calling both together.",
                        "sbg:toolDefaultValue": "SNP",
                        "label": "Genotype Likelihoods Model",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "genotype_likelihoods_model",
                                "symbols": [
                                    "SNP",
                                    "INDEL",
                                    "GENERALPLOIDYSNP",
                                    "GENERALPLOIDYINDEL",
                                    "BOTH"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "Unified Genotyper",
                        "sbg:altPrefix": "-gt_mode",
                        "id": "#genotyping_mode",
                        "inputBinding": {
                            "itemSeparator": " ",
                            "prefix": "--genotyping_mode",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Specifies how to determine the alternate alleles to use for genotyping.",
                        "sbg:toolDefaultValue": "DISCOVERY",
                        "label": "Genotyping Mode",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "genotyping_mode",
                                "symbols": [
                                    "DISCOVERY",
                                    "GENOTYPE_GIVEN_ALLELES"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "Unified Genotyper",
                        "sbg:altPrefix": "-G",
                        "id": "#group",
                        "inputBinding": {
                            "itemSeparator": " ",
                            "prefix": "--group",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "One or more classes/groups of annotations to apply to variant calls.",
                        "sbg:toolDefaultValue": "[u'Standard']",
                        "label": "Group",
                        "type": [
                            "null",
                            {
                                "type": "array",
                                "items": "string"
                            }
                        ]
                    },
                    {
                        "sbg:category": "Unified Genotyper",
                        "sbg:altPrefix": "-hets",
                        "id": "#heterozygosity",
                        "inputBinding": {
                            "itemSeparator": " ",
                            "prefix": "--heterozygosity",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Heterozygosity value used to compute prior likelihoods for any locus.",
                        "sbg:toolDefaultValue": "0.001",
                        "label": "Heterozygosity",
                        "type": [
                            "null",
                            "float"
                        ]
                    },
                    {
                        "sbg:category": "Unified Genotyper",
                        "sbg:altPrefix": null,
                        "id": "#ignore_lane_info",
                        "inputBinding": {
                            "itemSeparator": " ",
                            "prefix": "--ignoreLaneInfo",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Ignore lane when building error model, error model is then per-site.",
                        "sbg:toolDefaultValue": "False",
                        "label": "Ignore Lane Info",
                        "type": [
                            "null",
                            "boolean"
                        ]
                    },
                    {
                        "sbg:category": "Unified Genotyper",
                        "sbg:altPrefix": "-indelHeterozygosity",
                        "id": "#indel_heterozygosity",
                        "inputBinding": {
                            "itemSeparator": " ",
                            "prefix": "--indel_heterozygosity",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Heterozygosity for indel calling.",
                        "sbg:toolDefaultValue": "0.000125",
                        "label": "Indel Heterozygosity",
                        "type": [
                            "null",
                            "float"
                        ]
                    },
                    {
                        "sbg:category": "Unified Genotyper",
                        "sbg:altPrefix": "-deletions",
                        "id": "#max_deletion_fraction",
                        "inputBinding": {
                            "itemSeparator": " ",
                            "prefix": "--max_deletion_fraction",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Maximum fraction of reads with deletions spanning this locus for it to be callable [to disable, set to  1; default:0.05].",
                        "sbg:toolDefaultValue": "0.05",
                        "label": "Max Deletion Fraction",
                        "type": [
                            "null",
                            "float"
                        ]
                    },
                    {
                        "sbg:category": "Unified Genotyper",
                        "sbg:altPrefix": "-mbq",
                        "id": "#min_base_quality_score",
                        "inputBinding": {
                            "itemSeparator": " ",
                            "prefix": "--min_base_quality_score",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Minimum base quality required to consider a base for calling.",
                        "sbg:toolDefaultValue": "17",
                        "label": "Min Base Quality Score",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "Unified Genotyper",
                        "sbg:altPrefix": "-minIndelCnt",
                        "id": "#min_indel_cnt",
                        "inputBinding": {
                            "itemSeparator": " ",
                            "prefix": "--min_indel_count_for_genotyping",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Minimum number of consensus indels required to trigger genotyping run.",
                        "sbg:toolDefaultValue": "5",
                        "label": "Min Indel Cnt",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "Unified Genotyper",
                        "sbg:altPrefix": "-minIndelFrac",
                        "id": "#min_indel_frac",
                        "inputBinding": {
                            "itemSeparator": " ",
                            "prefix": "-minIndelFrac",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Minimum fraction of all reads at a locus that must contain an indel (of any allele) for that sample to contribute to the indel count for alleles.",
                        "sbg:toolDefaultValue": "0.25",
                        "label": "Min Indel Frac",
                        "type": [
                            "null",
                            "float"
                        ]
                    },
                    {
                        "sbg:category": "Unified Genotyper",
                        "sbg:altPrefix": "-out_mode",
                        "id": "#output_mode",
                        "inputBinding": {
                            "itemSeparator": " ",
                            "prefix": "--output_mode",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Specifies which type of calls we should output.",
                        "sbg:toolDefaultValue": "EMIT_VARIANTS_ONLY",
                        "label": "Output Mode",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "output_mode",
                                "symbols": [
                                    "EMIT_VARIANTS_ONLY",
                                    "EMIT_ALL_CONFIDENT_SITES",
                                    "EMIT_ALL_SITES"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "Unified Genotyper",
                        "sbg:altPrefix": "-pairHMM",
                        "id": "#pair_hmm_implementation",
                        "inputBinding": {
                            "itemSeparator": " ",
                            "prefix": "--pair_hmm_implementation",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "The PairHMM implementation to use for -glm INDEL genotype likelihood calculations.",
                        "sbg:toolDefaultValue": "ORIGINAL",
                        "label": "Pair Hmm Implementation",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "pair_hmm_implementation",
                                "symbols": [
                                    "EXACT",
                                    "ORIGINAL",
                                    "CACHING",
                                    "LOGLESS_CACHING"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "Unified Genotyper",
                        "sbg:altPrefix": "-pcr_error",
                        "id": "#pcr_error_rate",
                        "inputBinding": {
                            "itemSeparator": " ",
                            "prefix": "--pcr_error_rate",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "The PCR error rate to be used for computing fragment-based likelihoods.",
                        "sbg:toolDefaultValue": "0.0001",
                        "label": "Pcr Error Rate",
                        "type": [
                            "null",
                            "float"
                        ]
                    },
                    {
                        "sbg:category": "Unified Genotyper",
                        "sbg:altPrefix": "-stand_call_conf",
                        "id": "#stand_call_conf",
                        "inputBinding": {
                            "itemSeparator": " ",
                            "prefix": "--standard_min_confidence_threshold_for_calling",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "The minimum phred-scaled confidence threshold at which variants should be called.",
                        "sbg:toolDefaultValue": "30.0",
                        "label": "Stand Call Conf",
                        "type": [
                            "null",
                            "float"
                        ]
                    },
                    {
                        "sbg:category": "Unified Genotyper",
                        "sbg:altPrefix": "-stand_emit_conf",
                        "id": "#stand_emit_conf",
                        "inputBinding": {
                            "itemSeparator": " ",
                            "prefix": "--standard_min_confidence_threshold_for_emitting",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "The minimum phred-scaled confidence threshold at which variants should be emitted (and filtered with LowQual if less than the calling threshold).",
                        "sbg:toolDefaultValue": "30.0",
                        "label": "Stand Emit Conf",
                        "type": [
                            "null",
                            "float"
                        ]
                    },
                    {
                        "sbg:category": "Unified Genotyper",
                        "sbg:altPrefix": "-indelGCP",
                        "id": "#indel_gap_continuation_penalty",
                        "inputBinding": {
                            "itemSeparator": " ",
                            "prefix": "--indelGapContinuationPenalty",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Indel gap continuation penalty, as Phred-scaled probability.  I.e., 30 => 10^-30/10.",
                        "sbg:toolDefaultValue": "10",
                        "label": "Indel Gap Continuation Penalty",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "Unified Genotyper",
                        "sbg:altPrefix": "-indelGOP",
                        "id": "#indel_gap_open_penalty",
                        "inputBinding": {
                            "itemSeparator": " ",
                            "prefix": "--indelGapOpenPenalty",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Indel gap open penalty, as Phred-scaled probability.  I.e., 30 => 10^-30/10.",
                        "sbg:toolDefaultValue": "45",
                        "label": "Indel Gap Open Penalty",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "Unified Genotyper",
                        "sbg:altPrefix": "-maxAltAlleles",
                        "id": "#max_alternate_alleles",
                        "inputBinding": {
                            "itemSeparator": " ",
                            "prefix": "--max_alternate_alleles",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Maximum number of alternate alleles to genotype.",
                        "sbg:toolDefaultValue": "6",
                        "label": "Max Alternate Alleles",
                        "type": [
                            "null",
                            "int"
                        ]
                    },
                    {
                        "sbg:category": "Unified Genotyper",
                        "sbg:altPrefix": null,
                        "id": "#p_nonref_model",
                        "inputBinding": {
                            "itemSeparator": " ",
                            "prefix": "--p_nonref_model",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Non-reference probability calculation model to employ.",
                        "sbg:toolDefaultValue": "EXACT_INDEPENDENT",
                        "label": "P Nonref Model",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "p_nonref_model",
                                "symbols": [
                                    "EXACT_INDEPENDENT",
                                    "EXACT_REFERENCE",
                                    "EXACT_ORIGINAL",
                                    "EXACT_GENERAL_PLOIDY"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "Execution",
                        "sbg:toolDefaultValue": "0",
                        "id": "#memory_overhead_per_job",
                        "description": "Memory overhead per job. By default this parameter value is set to '0' (zero megabytes). This parameter value is added to the Memory per job parameter value. This results in the allocation of the sum total (Memory per job and Memory overhead per job) amount of memory per job. By default the memory per job parameter value is set to 2048 megabytes, unless specified otherwise.",
                        "type": [
                            "null",
                            "int"
                        ],
                        "label": "Memory overhead per job"
                    }
                ],
                "sbg:job": {
                    "allocatedResources": {
                        "mem": 2048,
                        "cpu": 1
                    },
                    "inputs": {
                        "dbsnp": {
                            "path": "/folder/dbSNP.vcf"
                        },
                        "intervals_file": [
                            {
                                "size": 0,
                                "class": "File",
                                "secondaryFiles": [],
                                "path": "/path/to/intervals_file-1.ext"
                            },
                            {
                                "size": 0,
                                "class": "File",
                                "secondaryFiles": [],
                                "path": "/path/to/intervals_file-2.ext"
                            }
                        ],
                        "reference": {
                            "path": "/folder/reference.fasta"
                        },
                        "stand_call_conf": 50,
                        "reads": [
                            {
                                "path": "sample1.bam"
                            },
                            {
                                "path": "sample2.bam"
                            }
                        ],
                        "stand_emit_conf": 10,
                        "memory_overhead_per_job": 0
                    }
                },
                "sbg:projectName": "GATK 2.3.9 Lite - Demo New ",
                "sbg:revisionsInfo": [
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1450911349,
                        "sbg:revision": 0,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1450911350,
                        "sbg:revision": 1,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1450911351,
                        "sbg:revision": 2,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1450911352,
                        "sbg:revision": 3,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1450911353,
                        "sbg:revision": 4,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1450911354,
                        "sbg:revision": 5,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1463297747,
                        "sbg:revision": 6,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1463663096,
                        "sbg:revision": 7,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:revisionNotes": "bam.bai extension removed from secondary files of reads input.",
                        "sbg:modifiedOn": 1469527805,
                        "sbg:revision": 8,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": "dbsnp link.",
                        "sbg:modifiedOn": 1471364268,
                        "sbg:revision": 9,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": "dbsnp guard []concat().",
                        "sbg:modifiedOn": 1471445503,
                        "sbg:revision": 10,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": "Metadata scatter.",
                        "sbg:modifiedOn": 1472656204,
                        "sbg:revision": 11,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": "fix for single interval file support",
                        "sbg:modifiedOn": 1475751155,
                        "sbg:revision": 12,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": "Double --intervals removed!",
                        "sbg:modifiedOn": 1475802580,
                        "sbg:revision": 13,
                        "sbg:modifiedBy": "vladimirk"
                    },
                    {
                        "sbg:revisionNotes": "^.bai --> .bai in reads input",
                        "sbg:modifiedOn": 1476436438,
                        "sbg:revision": 14,
                        "sbg:modifiedBy": "bogdang"
                    },
                    {
                        "sbg:revisionNotes": "Fix for single run without dbsnp",
                        "sbg:modifiedOn": 1484912384,
                        "sbg:revision": 15,
                        "sbg:modifiedBy": "bogdang"
                    }
                ],
                "sbg:toolAuthor": "Broad Institute",
                "sbg:contributors": [
                    "vladimirk",
                    "bogdang",
                    "bix-demo"
                ],
                "outputs": [
                    {
                        "sbg:fileTypes": "VCF",
                        "id": "#raw_vcf",
                        "outputBinding": {
                            "glob": "*.vcf",
                            "sbg:metadata": {},
                            "sbg:inheritMetadataFrom": "#reads",
                            "secondaryFiles": [
                                ".idx"
                            ]
                        },
                        "description": "A raw, unfiltered, highly specific callset in VCF format.",
                        "type": [
                            "null",
                            "File"
                        ],
                        "label": "VCF"
                    }
                ],
                "sbg:toolkit": "GATK"
            },
            "outputs": [
                {
                    "id": "#GATK_UnifiedGenotyper.raw_vcf"
                }
            ],
            "inputs": [
                {
                    "id": "#GATK_UnifiedGenotyper.reference",
                    "source": [
                        "#SBG_FASTA_Indices.fasta_reference"
                    ]
                },
                {
                    "id": "#GATK_UnifiedGenotyper.reads",
                    "source": [
                        "#GATK_PrintReads.recalibrated_bam"
                    ]
                },
                {
                    "id": "#GATK_UnifiedGenotyper.exclude_intervals"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.intervals_file",
                    "source": [
                        "#SBG_Prepare_Intervals.intervals"
                    ]
                },
                {
                    "id": "#GATK_UnifiedGenotyper.gatk_key"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.bqsr"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.dbsnp",
                    "source": [
                        "#known_sites_1"
                    ]
                },
                {
                    "id": "#GATK_UnifiedGenotyper.alleles"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.comp"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.reference_sample_calls"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.disable_radnomization"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.allow_potentailly_misencoded_quals"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.baq"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.baq_gap_open_penalty"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.default_base_qualities"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.disable_indel_quals"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.downsample_to_coverage"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.downsample_to_fraction"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.downsampling_type"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.emit_original_quals"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.fix_misencoded_quals"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.interval_merging"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.interval_padding"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.interval_set_rule"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.keep_program_records"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.max_runtime"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.max_runtime_units"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.non_deterministic_random_seed"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.pedigree_string"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.pedigree_validation_type"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.phone_home"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.preserve_qscores_less_than"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.read_filter"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.read_group_black_list"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.remove_program_records"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.tag"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.unsafe"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.use_legacy_downsampler"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.use_original_qualities"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.validation_strictness"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.intervals"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.memory_per_job",
                    "default": 2048
                },
                {
                    "id": "#GATK_UnifiedGenotyper.cpu_per_job",
                    "default": 1
                },
                {
                    "id": "#GATK_UnifiedGenotyper.threads_per_job",
                    "default": 4
                },
                {
                    "id": "#GATK_UnifiedGenotyper.annotate_nda"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.annotation"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.compute_slod"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.contamination"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.exclude_annotation"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.genotype_likelihoods_model",
                    "default": "BOTH"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.genotyping_mode"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.group"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.heterozygosity"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.ignore_lane_info"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.indel_heterozygosity"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.max_deletion_fraction"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.min_base_quality_score"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.min_indel_cnt"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.min_indel_frac"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.output_mode"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.pair_hmm_implementation"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.pcr_error_rate"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.stand_call_conf"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.stand_emit_conf"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.indel_gap_continuation_penalty"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.indel_gap_open_penalty"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.max_alternate_alleles"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.p_nonref_model"
                },
                {
                    "id": "#GATK_UnifiedGenotyper.memory_overhead_per_job",
                    "default": 64
                }
            ],
            "sbg:x": 1971.6669149928698
        },
        {
            "id": "#Picard_CollectAlignmentSummaryMetrics",
            "sbg:y": -523.3333948188377,
            "run": {
                "sbg:modifiedOn": 1491905414,
                "sbg:id": "bix-demo/picard-1-140-demo/picard-collectalignmentsummarymetrics-1-140/7",
                "id": "https://api.sbgenomics.com/v2/apps/bix-demo/picard-1-140-demo/picard-collectalignmentsummarymetrics-1-140/7/raw/",
                "sbg:cmdPreview": "java -Xmx2048M -jar /opt/picard-tools-1.140/picard.jar CollectAlignmentSummaryMetrics INPUT=/root/folder/example.bam OUTPUT=example.summary_metrics.txt",
                "sbg:revision": 7,
                "requirements": [
                    {
                        "requirements": [
                            {
                                "class": "DockerRequirement",
                                "dockerPull": "rabix/js-engine"
                            }
                        ],
                        "class": "ExpressionEngineRequirement",
                        "id": "#cwl-js-engine"
                    }
                ],
                "successCodes": [],
                "sbg:sbgMaintained": false,
                "sbg:categories": [
                    "SAM/BAM-Processing",
                    "Quality-Control",
                    "Quantification"
                ],
                "sbg:project": "bix-demo/picard-1-140-demo",
                "sbg:image_url": null,
                "stdin": "",
                "sbg:toolkitVersion": "1.140",
                "sbg:links": [
                    {
                        "label": "Homepage",
                        "id": "http://broadinstitute.github.io/picard/index.html"
                    },
                    {
                        "label": "Source Code",
                        "id": "https://github.com/broadinstitute/picard/releases/tag/1.140"
                    },
                    {
                        "label": "Wiki",
                        "id": "http://broadinstitute.github.io/picard/"
                    },
                    {
                        "label": "Download",
                        "id": "https://github.com/broadinstitute/picard/zipball/master"
                    },
                    {
                        "label": "Publication",
                        "id": "http://broadinstitute.github.io/picard/"
                    }
                ],
                "sbg:createdOn": 1450911255,
                "description": "Picard CollectAlignmentSummaryMetrics assesses the quality of alignment by analyzing a SAM or BAM file. It compares it with the reference file (FASTA) and provides alignment statistics, such as the number of input reads and the percent of reads that are mapped. It produces a file which contains summary alignment metrics from a SAM or BAM file.\n\nNote: This tool requires the exact same FASTA file as the one to which raw reads were aligned.\n\n### Common issues\n\n1) BAM file - Sort order should be coordinate based.\n2) Reference sequence file - Note that while this argument is not required, without it only a small subset of the metrics will be calculated. If reference sequence file is used, sequence index and dictionary are required. This tool requires the exact same FASTA file as the one to which raw reads were aligned.",
                "hints": [
                    {
                        "dockerImageId": "eab0e70b6629",
                        "class": "DockerRequirement",
                        "dockerPull": "images.sbgenomics.com/mladenlsbg/picard:1.140"
                    },
                    {
                        "value": 1,
                        "class": "sbg:CPURequirement"
                    },
                    {
                        "value": {
                            "script": "{\n  if($job.inputs.memory_per_job){\n  \treturn $job.inputs.memory_per_job\n  }\n  \treturn 2048\n}",
                            "engine": "#cwl-js-engine",
                            "class": "Expression"
                        },
                        "class": "sbg:MemRequirement"
                    }
                ],
                "label": "Picard CollectAlignmentSummaryMetrics",
                "arguments": [
                    {
                        "position": 3,
                        "prefix": "OUTPUT=",
                        "separate": false,
                        "valueFrom": {
                            "script": "{\n  if ($job.inputs.input_bam)\n  {\n    filename = [].concat($job.inputs.input_bam)[0].path\n    filebase = filename.split('.').slice(0, -1)\n\n    return filebase.concat(\"summary_metrics.txt\").join(\".\").replace(/^.*[\\\\\\/]/, '')\n  }\n}\n",
                            "engine": "#cwl-js-engine",
                            "class": "Expression"
                        }
                    }
                ],
                "stdout": "",
                "baseCommand": [
                    "java",
                    {
                        "script": "{   \n  if($job.inputs.memory_per_job){\n    return '-Xmx'.concat($job.inputs.memory_per_job, 'M')\n  }   \n  \treturn '-Xmx2048M'\n}",
                        "engine": "#cwl-js-engine",
                        "class": "Expression"
                    },
                    "-jar",
                    "/opt/picard-tools-1.140/picard.jar",
                    "CollectAlignmentSummaryMetrics"
                ],
                "temporaryFailCodes": [],
                "sbg:latestRevision": 7,
                "sbg:validationErrors": [],
                "sbg:modifiedBy": "medjo",
                "cwlVersion": "sbg:draft-2",
                "sbg:license": "MIT License, Apache 2.0 Licence",
                "sbg:appVersion": [
                    "sbg:draft-2"
                ],
                "class": "CommandLineTool",
                "sbg:createdBy": "bix-demo",
                "inputs": [
                    {
                        "sbg:category": "Options",
                        "type": [
                            "null",
                            {
                                "type": "array",
                                "items": "string"
                            }
                        ],
                        "id": "#adapter_sequence",
                        "inputBinding": {
                            "position": 8,
                            "itemSeparator": null,
                            "prefix": "ADAPTER_SEQUENCE=",
                            "sbg:cmdInclude": true,
                            "separate": false
                        },
                        "description": "List of adapter sequences to use when processing the alignment metrics. Default value: [AATGATACGGCGACCACCGAGATCTACACTCTTTCCCTACACGACGCTCTTCCGATCT, AGATCGGAAGAGCTCGTATGCCGTCTTCTGCTTG, AATGATACGGCGACCACCGAGATCTACACTCTTTCCCTACACGACGCTCTTCCGATCT, AGATCGGAAGAGCGGTTCAGCAGGAATGCCGAGACCGATCTCGTATGCCGTCTTCTGCTTG, AATGATACGGCGACCACCGAGATCTACACTCTTTCCCTACACGACGCTCTTCCGATCT, AGATCGGAAGAGCACACGTCTGAACTCCAGTCACNNNNNNNNATCTCGTATGCCGTCTTCTGCTTG]. This option can be set to 'null' to clear the default value. This option may be specified 0 or more times. This option can be set to 'null' to clear the default list.",
                        "sbg:toolDefaultValue": "AATGATACGGCGACCACCGAGATCTACACTCTTTCCCTACACGACGCTCTTCCGATCT",
                        "label": "Adapter sequence"
                    },
                    {
                        "sbg:category": "Options",
                        "sbg:altPrefix": "AS",
                        "id": "#assume_sorted",
                        "inputBinding": {
                            "prefix": "ASSUME_SORTED=",
                            "sbg:cmdInclude": true,
                            "separate": false
                        },
                        "description": "If this parameter is set to true, the sort order in the header file will be ignored. Default value: true. This option can be set to 'null' to clear the default value. Possible values: {true, false}.",
                        "sbg:toolDefaultValue": "true",
                        "label": "Assume sorted",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "assume_sorted",
                                "symbols": [
                                    "true",
                                    "false"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "Options",
                        "type": [
                            "null",
                            "int"
                        ],
                        "id": "#compression_level",
                        "inputBinding": {
                            "position": 4,
                            "prefix": "COMPRESSION_LEVEL=",
                            "sbg:cmdInclude": true,
                            "separate": false
                        },
                        "description": "Compression level for all compressed files created (e.g. BAM and GELI). Default value: 5. This option can be set to 'null' to clear the default value.",
                        "sbg:toolDefaultValue": "5",
                        "label": "Compression level"
                    },
                    {
                        "sbg:category": "File inputs",
                        "sbg:fileTypes": "BAM, SAM",
                        "id": "#input_bam",
                        "inputBinding": {
                            "position": 0,
                            "prefix": "INPUT=",
                            "sbg:cmdInclude": true,
                            "separate": false
                        },
                        "description": "Input SAM or BAM file.  Required. Note: Sort order should be coordinate based.",
                        "sbg:altPrefix": "I",
                        "label": "Input file",
                        "type": [
                            "File"
                        ]
                    },
                    {
                        "sbg:category": "Options",
                        "sbg:altPrefix": "BS",
                        "id": "#is_bisulfite_sequenced",
                        "inputBinding": {
                            "position": 8,
                            "prefix": "BS=",
                            "sbg:cmdInclude": true,
                            "separate": false
                        },
                        "description": "This parameter indicates whether the SAM or BAM file consists of bisulfite sequenced reads. Default value: false. This option can be set to 'null' to clear the default value. Possible values: {true, false}.",
                        "sbg:toolDefaultValue": "false",
                        "label": "Is bisulfite sequenced",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "is_bisulfite_sequenced",
                                "symbols": [
                                    "true",
                                    "false"
                                ]
                            }
                        ]
                    },
                    {
                        "sbg:category": "Options",
                        "type": [
                            "null",
                            "int"
                        ],
                        "id": "#max_insert_size",
                        "inputBinding": {
                            "position": 9,
                            "prefix": "MAX_INSERT_SIZE=",
                            "sbg:cmdInclude": true,
                            "separate": false
                        },
                        "description": "Paired end reads above this insert size will be considered chimeric along with inter-chromosomal pairs. Default value: 100000. This option can be set to 'null' to clear the default value.",
                        "sbg:toolDefaultValue": "100000",
                        "label": "Max insert size"
                    },
                    {
                        "sbg:category": "Options",
                        "type": [
                            "null",
                            "int"
                        ],
                        "id": "#max_records_in_ram",
                        "inputBinding": {
                            "position": 4,
                            "prefix": "MAX_RECORDS_IN_RAM=",
                            "sbg:cmdInclude": true,
                            "separate": false
                        },
                        "description": "When writing SAM files that need to be sorted, this parameter will specify the number of records stored in RAM before spilling to disk. Increasing this number reduces the number of file handles needed to sort a SAM file, and increases the amount of RAM needed. Default value: 500000. This option can be set to 'null' to clear the default value.",
                        "sbg:toolDefaultValue": "500000",
                        "label": "Max records in RAM"
                    },
                    {
                        "sbg:category": "Options",
                        "sbg:altPrefix": "LEVEL",
                        "id": "#metric_accumulation_level",
                        "inputBinding": {
                            "position": 8,
                            "itemSeparator": null,
                            "prefix": "METRIC_ACCUMULATION_LEVEL=",
                            "sbg:cmdInclude": true,
                            "separate": false
                        },
                        "description": "This parameter indicates the level(s) at which to accumulate metrics. Default value: [ALL_READS]. This option can be set to 'null' to clear the default value. Possible values: {ALL_READS, SAMPLE, LIBRARY, READ_GROUP}. This option may be specified 0 or more times. This option can be set to 'null' to clear the default list.",
                        "sbg:toolDefaultValue": "ALL_READS",
                        "label": "Metric accumulation level",
                        "type": [
                            "null",
                            {
                                "type": "array",
                                "items": {
                                    "type": "enum",
                                    "name": "metric_accumulation_level",
                                    "symbols": [
                                        "ALL_READS",
                                        "SAMPLE",
                                        "LIBRARY",
                                        "READ_GROUP"
                                    ]
                                }
                            }
                        ]
                    },
                    {
                        "sbg:category": "Options",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "quiet",
                                "symbols": [
                                    "true",
                                    "false"
                                ]
                            }
                        ],
                        "id": "#quiet",
                        "inputBinding": {
                            "position": 4,
                            "prefix": "QUIET=",
                            "sbg:cmdInclude": true,
                            "separate": false
                        },
                        "description": "This parameter indicates whether to suppress job-summary info on System.err. Default value: false. This option can be set to 'null' to clear the default value. Possible values: {true, false}.",
                        "sbg:toolDefaultValue": "false",
                        "label": "Quiet"
                    },
                    {
                        "sbg:category": "File inputs",
                        "sbg:fileTypes": "FASTA",
                        "id": "#reference",
                        "inputBinding": {
                            "position": 3,
                            "prefix": "REFERENCE_SEQUENCE=",
                            "sbg:cmdInclude": true,
                            "separate": false
                        },
                        "description": "Reference sequence file. Note that while this argument is not required, without it only a small subset of the metrics will be calculated. If reference sequence file is used, sequence index and dictionary are required. This tool requires the exact same FASTA file as the one to which raw reads were aligned. Default value: null.",
                        "sbg:altPrefix": "R",
                        "label": "Reference sequence",
                        "type": [
                            "null",
                            "File"
                        ]
                    },
                    {
                        "sbg:category": "Options",
                        "type": [
                            "null",
                            "int"
                        ],
                        "id": "#stop_after",
                        "inputBinding": {
                            "position": 9,
                            "prefix": "STOP_AFTER=",
                            "sbg:cmdInclude": true,
                            "separate": false
                        },
                        "description": "Stop after processing N reads, mainly for debugging. Default value: 0. This option can be set to 'null' to clear the default value.",
                        "sbg:toolDefaultValue": "0",
                        "label": "Stop after"
                    },
                    {
                        "sbg:category": "Options",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "validation_stringency",
                                "symbols": [
                                    "STRICT",
                                    "LENIENT",
                                    "SILENT"
                                ]
                            }
                        ],
                        "id": "#validation_stringency",
                        "inputBinding": {
                            "position": 4,
                            "prefix": "VALIDATION_STRINGENCY=",
                            "sbg:cmdInclude": true,
                            "separate": false,
                            "valueFrom": {
                                "script": "{\n  if ($job.inputs.validation_stringency)\n  {\n    return $job.inputs.validation_stringency\n  }\n  else\n  {\n    return \"SILENT\"\n  }\n}",
                                "engine": "#cwl-js-engine",
                                "class": "Expression"
                            }
                        },
                        "description": "Validation stringency for all SAM files read by this program. Setting stringency to SILENT can improve performance when processing a BAM file in which variable-length data (read, qualities, tags) do not otherwise need to be decoded. Default value: STRICT. This option can be set to 'null' to clear the default value. Possible values: {STRICT, LENIENT, SILENT}.",
                        "sbg:toolDefaultValue": "SILENT",
                        "label": "Validation stringency"
                    },
                    {
                        "sbg:category": "Options",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "verbosity",
                                "symbols": [
                                    "ERROR",
                                    "WARNING",
                                    "INFO",
                                    "DEBUG"
                                ]
                            }
                        ],
                        "id": "#verbosity",
                        "inputBinding": {
                            "position": 6,
                            "prefix": "VERBOSITY=",
                            "sbg:cmdInclude": true,
                            "separate": false
                        },
                        "description": "Control verbosity of logging. Default value: INFO. This option can be set to 'null' to clear the default value. Possible values: {ERROR, WARNING, INFO, DEBUG}.",
                        "sbg:toolDefaultValue": "INFO",
                        "label": "Verbosity"
                    },
                    {
                        "sbg:category": "Execution options",
                        "sbg:toolDefaultValue": "2048",
                        "id": "#memory_per_job",
                        "description": "Amount of RAM memory to be used per job. Defaults to 2048 MB for single threaded jobs.",
                        "type": [
                            "null",
                            "int"
                        ],
                        "label": "Memory per job"
                    }
                ],
                "sbg:job": {
                    "allocatedResources": {
                        "mem": 2048,
                        "cpu": 1
                    },
                    "inputs": {
                        "metric_accumulation_level": [
                            "ALL_READS"
                        ],
                        "input_bam": {
                            "path": "/root/folder/example.bam"
                        },
                        "reference": {
                            "path": "/root/directory/example.fasta"
                        },
                        "memory_per_job": 0
                    }
                },
                "sbg:projectName": "Picard 1.140 - Demo New",
                "sbg:revisionsInfo": [
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1450911255,
                        "sbg:revision": 0,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1450911256,
                        "sbg:revision": 1,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1450911257,
                        "sbg:revision": 2,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:revisionNotes": "[].concat(input_bam)[0].path",
                        "sbg:modifiedOn": 1472811193,
                        "sbg:revision": 3,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:revisionNotes": "Category field is set",
                        "sbg:modifiedOn": 1491475478,
                        "sbg:revision": 4,
                        "sbg:modifiedBy": "medjo"
                    },
                    {
                        "sbg:revisionNotes": "Common isses",
                        "sbg:modifiedOn": 1491479931,
                        "sbg:revision": 5,
                        "sbg:modifiedBy": "medjo"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1491486008,
                        "sbg:revision": 6,
                        "sbg:modifiedBy": "medjo"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1491905414,
                        "sbg:revision": 7,
                        "sbg:modifiedBy": "medjo"
                    }
                ],
                "sbg:toolAuthor": "Broad Institute",
                "sbg:contributors": [
                    "medjo",
                    "bix-demo"
                ],
                "outputs": [
                    {
                        "sbg:fileTypes": "TXT",
                        "id": "#summary_metrics",
                        "outputBinding": {
                            "glob": "*.summary_metrics.txt",
                            "sbg:metadata": {},
                            "sbg:inheritMetadataFrom": "#input_bam",
                            "secondaryFiles": []
                        },
                        "description": "File to which the output will be written.",
                        "type": [
                            "File"
                        ],
                        "label": "Summary metrics"
                    }
                ],
                "sbg:toolkit": "Picard"
            },
            "outputs": [
                {
                    "id": "#Picard_CollectAlignmentSummaryMetrics.summary_metrics"
                }
            ],
            "inputs": [
                {
                    "id": "#Picard_CollectAlignmentSummaryMetrics.adapter_sequence"
                },
                {
                    "id": "#Picard_CollectAlignmentSummaryMetrics.assume_sorted",
                    "default": "true"
                },
                {
                    "id": "#Picard_CollectAlignmentSummaryMetrics.compression_level",
                    "default": 5
                },
                {
                    "id": "#Picard_CollectAlignmentSummaryMetrics.input_bam",
                    "source": [
                        "#Sambamba_Merge.merged_bam"
                    ]
                },
                {
                    "id": "#Picard_CollectAlignmentSummaryMetrics.is_bisulfite_sequenced",
                    "default": "false"
                },
                {
                    "id": "#Picard_CollectAlignmentSummaryMetrics.max_insert_size",
                    "default": 100000
                },
                {
                    "id": "#Picard_CollectAlignmentSummaryMetrics.max_records_in_ram"
                },
                {
                    "id": "#Picard_CollectAlignmentSummaryMetrics.metric_accumulation_level",
                    "default": [
                        "ALL_READS"
                    ]
                },
                {
                    "id": "#Picard_CollectAlignmentSummaryMetrics.quiet",
                    "default": "false"
                },
                {
                    "id": "#Picard_CollectAlignmentSummaryMetrics.reference",
                    "source": [
                        "#SBG_FASTA_Indices.fasta_reference"
                    ]
                },
                {
                    "id": "#Picard_CollectAlignmentSummaryMetrics.stop_after"
                },
                {
                    "id": "#Picard_CollectAlignmentSummaryMetrics.validation_stringency",
                    "default": "SILENT"
                },
                {
                    "id": "#Picard_CollectAlignmentSummaryMetrics.verbosity",
                    "default": "INFO"
                },
                {
                    "id": "#Picard_CollectAlignmentSummaryMetrics.memory_per_job"
                }
            ],
            "sbg:x": 2506.666847652864
        },
        {
            "id": "#SBG_Genome_Coverage",
            "sbg:y": -721.2212371826176,
            "run": {
                "sbg:modifiedOn": 1493296999,
                "sbg:id": "bix-demo/sbgtools-demo/sbg-genome-coverage/3",
                "id": "https://api.sbgenomics.com/v2/apps/bix-demo/sbgtools-demo/sbg-genome-coverage/3/raw/",
                "sbg:cmdPreview": "python3.6 sbg_genome_coverage.py -b bam.ext -f fasta.ext",
                "description": "SBG Genome Coverage extends BEDTools Genome Coverage. The Genome Coverage calculates histograms, per-base reports and BedGraph summaries of feature coverage (aligned sequences for example) for a given genome. This extended version additionally extracts and creates a text file containing summary coverage stats.",
                "successCodes": [],
                "sbg:sbgMaintained": false,
                "sbg:categories": [
                    "Analysis"
                ],
                "sbg:project": "bix-demo/sbgtools-demo",
                "sbg:image_url": null,
                "stdin": "",
                "requirements": [
                    {
                        "requirements": [
                            {
                                "class": "DockerRequirement",
                                "dockerPull": "rabix/js-engine"
                            }
                        ],
                        "class": "ExpressionEngineRequirement",
                        "id": "#cwl-js-engine"
                    },
                    {
                        "fileDef": [
                            {
                                "fileContent": "\"\"\"\nUsage:\n    sbg_genome_coverage.py --bam FILE --fasta FILE [options]\n\nOptions:\n    -h, --help                      Show this message.\n\n    -b, --bam FILE                  Input BAM file for coverage calculation.\n\n    -f, --fasta FILE                Reference file.\n\n    --format ENUM                   Output format. Available options: {0, 1, 2}\n                                    0: Bed-Histogram\n                                    1: Bed-DepthPerBase\n                                    2: BedGraph\n                                    [default: 0]\n\n    --report_z                      If BedGraph or Depth Per Base output is\n                                    selected, also report zero-depth positions.\n\n    --gzipped                       Compress output with gzip.\n\n    --split                         Treat BAM entries as distinct BED intervals\n                                    when computing coverage. Uses CIGAR 'N' and\n                                    'D' operations to infer the blocks for\n                                    computing coverage.\n\n    --strand ENUM                   Calculate coverage of intervals from a\n                                    specific strand.\n                                    Available options: {0, 1, 2}\n                                    0: Not Specified\n                                    1: Forward+\n                                    2: Reverse-\n                                    [default: 0]\n\n    --coverage_interval ENUM        Coverage calculation.\n                                    Available options:  \n                                    0: Entire Interval\n                                    3: 3' Positions Only\n                                    5: 5' Positions Only\n                                    [default: 0]\n\n    --scale FLOAT                   Scale the coverage by a constant factor.\n                                    Requires BedGraph or Dept Per Base output.\n                                    [default: 1.0]\n\n    --trackopt STR                  Writes additional track line definition\n                                    parameters in the first line.\n\n    --trackline                     Adds a UCSC/Genome-Browser track line\n                                    definition in the first line of the output.\n\n\"\"\"\n\nfrom docopt import docopt\nimport os\nimport pipes\nfrom pathlib import Path\nimport subprocess\nfrom enum import IntEnum\nfrom Compressor import PigzCompressor\n\nargs = docopt(__doc__, version='1.0')\n\nargs['--format'] = int(args['--format'])\nargs['--strand'] = int(args['--strand'])\nargs['--coverage_interval'] = int(args['--coverage_interval'])\nargs['--scale'] = float(args['--scale'])\n\n# BEDTOOLS_ROOT = ''\n\nBEDTOOLS_ROOT = '/opt/bedtools2/bin/'\n\nclass BEDTOOLS_FORMAT(IntEnum):\n    BedHistogram = 0\n    BedDepthPerBase = 1\n    BedGraph = 2\n\nclass BEDTOOLS_STRAND(IntEnum):\n    NotSpecified = 0\n    Forward = 1\n    Reverse = 2\n\nclass BEDTOOLS_COVERAGE_INTERVAL:\n    EntireInterval = 0\n    ThreePrimPositionsOnly = 3\n    FivePrimPositionsOnly = 5\n\ndef append_arg(arg_list, *args):\n    for arg in args:\n        if arg not in (None, ''):\n            arg_list.append(pipes.quote(arg))\n\ndef append_narg(arg_list, key, value):\n    if value in (None, '') or value is False:\n        return\n    if isinstance(value, bool):\n        append_arg(arg_list, key)\n    else:\n        append_arg(arg_list, key, str(value))\n\ndef get_output_file_name(bam, params):\n    just_name = lambda file_name: Path(file_name).name\n\n    if params['--format'] == BEDTOOLS_FORMAT.BedDepthPerBase:\n        return just_name(bam) + '.per_interval.bed'\n    elif params['--format'] == BEDTOOLS_FORMAT.BedHistogram:\n        return just_name(bam) + '.bed'\n    elif params['--format'] == BEDTOOLS_FORMAT.BedGraph:\n        return just_name(bam) + '.bedgraph'\n    else:\n        raise Exception('Unsupported --format value.')\n\ndef get_bedtools_cmd(bam, genome, parameters) -> list:\n    cmd_bedtools = [os.path.join(BEDTOOLS_ROOT, 'genomeCoverageBed'), '-ibam', bam, '-g', genome]\n\n    if parameters['--format'] == BEDTOOLS_FORMAT.BedDepthPerBase:\n        if parameters['--report_z'] is True:\n            append_arg(cmd_bedtools, '-d')\n        else:\n            append_arg(cmd_bedtools, '-dz')\n    elif parameters['--format'] == BEDTOOLS_FORMAT.BedGraph:\n        if parameters['--report_z'] is True:\n            append_arg(cmd_bedtools, '-bga')\n        else:\n            append_arg(cmd_bedtools, '-bg')\n\n    append_narg(cmd_bedtools, '-split', parameters['--split'])\n\n    if parameters['--coverage_interval'] == BEDTOOLS_COVERAGE_INTERVAL.FivePrimPositionsOnly:\n        append_arg(cmd_bedtools, '-5')\n    elif parameters['--coverage_interval'] == BEDTOOLS_COVERAGE_INTERVAL.ThreePrimPositionsOnly:\n        append_arg(cmd_bedtools, '-3')\n\n    if parameters['--format'] == BEDTOOLS_FORMAT.BedDepthPerBase or parameters['--format'] == BEDTOOLS_FORMAT.BedGraph:\n        append_narg(cmd_bedtools, '-scale', parameters['--scale'])\n\n    if parameters['--strand'] == BEDTOOLS_STRAND.Forward:\n        append_narg(cmd_bedtools, '-strand', '+')\n    elif parameters['--strand'] == BEDTOOLS_STRAND.Reverse:\n        append_narg(cmd_bedtools, '-strand', '-')\n\n    if parameters['--format'] == BEDTOOLS_FORMAT.BedGraph:\n        append_narg(cmd_bedtools, '-trackopts', parameters['--trackopt'])\n        append_narg(cmd_bedtools, '-trackline', parameters['--trackline'])\n\n    return cmd_bedtools\n\ndef handle_bed_histogram(bam, genome, parameters, gzip, ziper):\n    output_file = get_output_file_name(bam, parameters)\n    cmd_bedtools = get_bedtools_cmd(bam, genome, parameters)\n    cmd_summary = ['grep', '^genome']\n    cmd_intervals = ['grep', '-v', '^genome']\n    cmd_pigz = ['pigz', '--force', '--keep']\n\n    summary = open(Path(output_file).name + '.summary', 'wb')\n    per_interval_path = Path(output_file).name + '.per_interval.bed.gz' if gzip \\\n                        else Path(output_file).name + '.per_interval.bed'\n\n    per_interval = open(per_interval_path, 'wb')\n\n    bed_proc = subprocess.Popen(cmd_bedtools, stdout=subprocess.PIPE)\n    sum_proc = subprocess.Popen(cmd_summary,  stdin=subprocess.PIPE, stdout=summary)\n    inter_proc = subprocess.Popen(cmd_intervals, stdin=subprocess.PIPE, stdout=subprocess.PIPE if gzip else per_interval)\n    pigz_proc = None\n\n    if gzip:\n        pigz_proc = subprocess.Popen(cmd_pigz, stdin=inter_proc.stdout, stdout=per_interval)\n\n    try:\n        while True:\n            data = bed_proc.stdout.readline()\n            if not data:\n                sum_proc.stdin.close()\n                inter_proc.stdin.close()\n                break\n            sum_proc.stdin.write(data)\n            inter_proc.stdin.write(data)\n\n        bed_proc.wait()\n        inter_proc.wait()\n        sum_proc.wait()\n\n        if gzip and pigz_proc:\n            pigz_proc.wait()\n\n    except Exception as e:\n        print (str(e))\n        bed_proc.kill()\n        sum_proc.kill()\n        inter_proc.kill()\n    finally:\n        summary.close()\n        per_interval.close()\n\ndef handle_graph_or_depth(bam, genome, parameters, gzip, ziper):\n    output_file = get_output_file_name(bam, parameters)\n    cmd_bedtools = get_bedtools_cmd(bam, genome, parameters)\n\n    stdout = subprocess.PIPE if gzip else open(output_file, 'w')\n    process = subprocess.Popen(cmd_bedtools, stdout=stdout)\n    if gzip:\n        with open(output_file + '.gz', 'wb') as out:\n            ziper.compress(stdin=process.stdout, stdout=out, params={'threads': 2})\n    process.wait()\n\ndef main():\n    ziper = PigzCompressor()\n    if args['--format'] == BEDTOOLS_FORMAT.BedHistogram:\n        handle_bed_histogram(args['--bam'], args['--fasta'], args, args['--gzipped'], ziper)\n    elif args['--format'] == BEDTOOLS_FORMAT.BedDepthPerBase:\n        handle_graph_or_depth(args['--bam'], args['--fasta'], args, args['--gzipped'], ziper)\n    elif args['--format'] == BEDTOOLS_FORMAT.BedGraph:\n        handle_graph_or_depth(args['--bam'], args['--fasta'], args, args['--gzipped'], ziper)\nif __name__ == '__main__':\n    main()",
                                "filename": "sbg_genome_coverage.py"
                            }
                        ],
                        "class": "CreateFileRequirement"
                    }
                ],
                "sbg:revision": 3,
                "sbg:createdOn": 1450911308,
                "hints": [
                    {
                        "dockerImageId": "",
                        "class": "DockerRequirement",
                        "dockerPull": "images.sbgenomics.com/filip_tubic/sbg_genome_coverage:2.0"
                    },
                    {
                        "value": 1,
                        "class": "sbg:CPURequirement"
                    },
                    {
                        "value": 4096,
                        "class": "sbg:MemRequirement"
                    }
                ],
                "label": "SBG Genome Coverage",
                "arguments": [],
                "stdout": "",
                "baseCommand": [
                    "python3.6",
                    "sbg_genome_coverage.py"
                ],
                "temporaryFailCodes": [],
                "sbg:latestRevision": 3,
                "sbg:validationErrors": [],
                "sbg:modifiedBy": "filip_tubic",
                "cwlVersion": "sbg:draft-2",
                "sbg:license": "Apache License 2.0",
                "sbg:appVersion": [
                    "sbg:draft-2"
                ],
                "class": "CommandLineTool",
                "sbg:createdBy": "bix-demo",
                "inputs": [
                    {
                        "sbg:category": "INPUT FILES",
                        "sbg:fileTypes": "BAM",
                        "id": "#bam",
                        "inputBinding": {
                            "prefix": "-b",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Input BAM file for coverage calculation.",
                        "type": [
                            "File"
                        ],
                        "label": "Bam"
                    },
                    {
                        "sbg:category": "INPUT FILES",
                        "sbg:fileTypes": "FASTA,FA",
                        "id": "#fasta",
                        "inputBinding": {
                            "prefix": "-f",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Reference file.",
                        "type": [
                            "File"
                        ],
                        "label": "Fasta"
                    },
                    {
                        "sbg:category": "OPTIONS",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "format",
                                "symbols": [
                                    "Bed-Histogram",
                                    "Bed-DepthPerBase",
                                    "BedGraph"
                                ]
                            }
                        ],
                        "id": "#format",
                        "inputBinding": {
                            "prefix": "--format",
                            "sbg:cmdInclude": true,
                            "separate": true,
                            "valueFrom": {
                                "script": "{\n  if ($job.inputs.format == 'Bed-Histogram') return 0\n  if ($job.inputs.format == 'Bed-DepthPerBase') return 1\n  if ($job.inputs.format == 'BedGraph') return 2\n}",
                                "engine": "#cwl-js-engine",
                                "class": "Expression"
                            }
                        },
                        "description": "Output format.",
                        "label": "Format"
                    },
                    {
                        "sbg:category": "OPTIONS",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "id": "#report_z",
                        "inputBinding": {
                            "prefix": "--report_z",
                            "sbg:cmdInclude": true,
                            "separate": false
                        },
                        "description": "If BedGraph or Depth Per Base output is selected, also report zero-depth positions.",
                        "label": "Report Z"
                    },
                    {
                        "sbg:category": "OPTIONS",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "id": "#gzipped",
                        "inputBinding": {
                            "prefix": "--gzipped",
                            "sbg:cmdInclude": true,
                            "separate": false
                        },
                        "description": "Compress output with gzip.",
                        "label": "GZipped"
                    },
                    {
                        "sbg:category": "OPTIONS",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "id": "#split",
                        "inputBinding": {
                            "prefix": "--split",
                            "sbg:cmdInclude": true,
                            "separate": false
                        },
                        "description": "Treat BAM entries as distinct BED intervals when computing coverage. Uses CIGAR 'N' and 'D' operations to infer the blocks for computing coverage.",
                        "label": "Split"
                    },
                    {
                        "sbg:category": "OPTIONS",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "strand",
                                "symbols": [
                                    "Not Specified",
                                    "Forward+",
                                    "Reverse-"
                                ]
                            }
                        ],
                        "id": "#strand",
                        "inputBinding": {
                            "prefix": "--strand",
                            "sbg:cmdInclude": true,
                            "separate": true,
                            "valueFrom": {
                                "script": "{\n  if ($job.inputs.strand == 'Not Specified') return 0\n  if ($job.inputs.strand == 'Forward+') return 1\n  if ($job.inputs.strand == 'Reverse-') return 2\n}",
                                "engine": "#cwl-js-engine",
                                "class": "Expression"
                            }
                        },
                        "description": "Calculate coverage of intervals from a specific strand.",
                        "label": "Strand"
                    },
                    {
                        "sbg:category": "OPTIONS",
                        "type": [
                            "null",
                            {
                                "type": "enum",
                                "name": "coverage_interval",
                                "symbols": [
                                    "Entire Interval",
                                    "3' Positions Only",
                                    "5' Positions Only"
                                ]
                            }
                        ],
                        "id": "#coverage_interval",
                        "inputBinding": {
                            "prefix": "--coverage_interval",
                            "sbg:cmdInclude": true,
                            "separate": true,
                            "valueFrom": {
                                "script": "{\n  if ($job.inputs.coverage_interval == 'Entire Interval') return 0\n  if ($job.inputs.coverage_interval == \"3' Positions Only\") return 3\n  if ($job.inputs.coverage_interval == \"5' Positions Only\") return 5\n}",
                                "engine": "#cwl-js-engine",
                                "class": "Expression"
                            }
                        },
                        "description": "Coverage calculation.",
                        "label": "Coverage interval"
                    },
                    {
                        "sbg:category": "OPTIONS",
                        "type": [
                            "null",
                            "float"
                        ],
                        "id": "#scale",
                        "inputBinding": {
                            "prefix": "--scale",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Scale the coverage by a constant factor. Requires BedGraph or Dept Per Base output.",
                        "label": "Scale"
                    },
                    {
                        "sbg:category": "OPTIONS",
                        "type": [
                            "null",
                            "string"
                        ],
                        "id": "#trackopt",
                        "inputBinding": {
                            "prefix": "--trackopt",
                            "sbg:cmdInclude": true,
                            "separate": true
                        },
                        "description": "Writes additional track line definition parameters in the first line.",
                        "label": "Additional track"
                    },
                    {
                        "sbg:category": "OPTIONS",
                        "type": [
                            "null",
                            "boolean"
                        ],
                        "id": "#trackline",
                        "inputBinding": {
                            "prefix": "--trackline",
                            "sbg:cmdInclude": true,
                            "separate": false
                        },
                        "description": "Adds a UCSC/Genome-Browser track line definition in the first line of the output.",
                        "label": "UCSC track line"
                    }
                ],
                "sbg:job": {
                    "allocatedResources": {
                        "mem": 4096,
                        "cpu": 1
                    },
                    "inputs": {
                        "coverage_interval": "Entire Interval",
                        "report_z": true,
                        "bam": {
                            "size": 0,
                            "class": "File",
                            "path": "bam.ext",
                            "secondaryFiles": []
                        },
                        "format": "BedGraph",
                        "trackopt": "trackopt",
                        "fasta": {
                            "size": 0,
                            "class": "File",
                            "path": "fasta.ext",
                            "secondaryFiles": []
                        },
                        "strand": "Forward+",
                        "split": true,
                        "trackline": true,
                        "scale": 0,
                        "gzipped": true
                    }
                },
                "sbg:projectName": "SBGTools - Demo New",
                "sbg:revisionsInfo": [
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1450911308,
                        "sbg:revision": 0,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1450911308,
                        "sbg:revision": 1,
                        "sbg:modifiedBy": "bix-demo"
                    },
                    {
                        "sbg:revisionNotes": "BEDTools newer version",
                        "sbg:modifiedOn": 1476214514,
                        "sbg:revision": 2,
                        "sbg:modifiedBy": "bogdang"
                    },
                    {
                        "sbg:revisionNotes": null,
                        "sbg:modifiedOn": 1493296999,
                        "sbg:revision": 3,
                        "sbg:modifiedBy": "filip_tubic"
                    }
                ],
                "sbg:toolAuthor": "Seven Bridges Genomics",
                "sbg:contributors": [
                    "bogdang",
                    "filip_tubic",
                    "bix-demo"
                ],
                "outputs": [
                    {
                        "type": [
                            "null",
                            "File"
                        ],
                        "label": "Per interval",
                        "outputBinding": {
                            "glob": {
                                "script": "if ($job.inputs.gzipped)\n\t'*.per_interval.bed.gz'\nelse\n\t'*.per_interval.bed'",
                                "engine": "#cwl-js-engine",
                                "class": "Expression"
                            },
                            "sbg:metadata": {
                                "file_format": "BED"
                            },
                            "sbg:inheritMetadataFrom": "#bam"
                        },
                        "id": "#per_interval"
                    },
                    {
                        "type": [
                            "null",
                            "File"
                        ],
                        "label": "Summary",
                        "outputBinding": {
                            "glob": "*.summary",
                            "sbg:metadata": {
                                "file_format": "TEXT"
                            },
                            "sbg:inheritMetadataFrom": "#bam"
                        },
                        "description": "Summary file.",
                        "id": "#summary"
                    },
                    {
                        "type": [
                            "null",
                            "File"
                        ],
                        "label": "Bed graph",
                        "outputBinding": {
                            "glob": {
                                "script": "if ($job.inputs.gzipped)\n\t'*.bedgraph.gz'\nelse\n\t'*.bedgraph'",
                                "engine": "#cwl-js-engine",
                                "class": "Expression"
                            }
                        },
                        "id": "#bed_graph"
                    }
                ],
                "sbg:toolkit": "SBGTools"
            },
            "outputs": [
                {
                    "id": "#SBG_Genome_Coverage.per_interval"
                },
                {
                    "id": "#SBG_Genome_Coverage.summary"
                },
                {
                    "id": "#SBG_Genome_Coverage.bed_graph"
                }
            ],
            "inputs": [
                {
                    "id": "#SBG_Genome_Coverage.bam",
                    "source": [
                        "#Sambamba_Merge.merged_bam"
                    ]
                },
                {
                    "id": "#SBG_Genome_Coverage.fasta",
                    "source": [
                        "#SBG_FASTA_Indices.fasta_reference"
                    ]
                },
                {
                    "id": "#SBG_Genome_Coverage.format",
                    "default": "Bed-Histogram"
                },
                {
                    "id": "#SBG_Genome_Coverage.report_z"
                },
                {
                    "id": "#SBG_Genome_Coverage.gzipped"
                },
                {
                    "id": "#SBG_Genome_Coverage.split"
                },
                {
                    "id": "#SBG_Genome_Coverage.strand"
                },
                {
                    "id": "#SBG_Genome_Coverage.coverage_interval",
                    "default": "Entire Interval"
                },
                {
                    "id": "#SBG_Genome_Coverage.scale"
                },
                {
                    "id": "#SBG_Genome_Coverage.trackopt"
                },
                {
                    "id": "#SBG_Genome_Coverage.trackline"
                }
            ],
            "sbg:x": 2820.0009155273456
        }
    ],
    "sbg:toolkitVersion": "1.0",
    "sbg:latestRevision": 61,
    "sbg:modifiedBy": "nikola_jovanovic",
    "cwlVersion": "sbg:draft-2",
    "sbg:license": "Apache License 2.0",
    "sbg:batchBy": {
        "type": "criteria",
        "criteria": [
            "metadata.sample_id"
        ]
    },
    "sbg:appVersion": [
        "sbg:draft-2"
    ],
    "class": "Workflow",
    "sbg:batchInput": "#fastq",
    "inputs": [
        {
            "sbg:fileTypes": "ZIP",
            "sbg:suggestedValue": {
                "path": "5772b6be507c1752674486c6",
                "name": "GRCh37.75.zip",
                "class": "File"
            },
            "id": "#database_1",
            "type": [
                "File"
            ],
            "sbg:y": 356.6619691979336,
            "label": "SnpEff database",
            "sbg:x": 3039.9998648299047
        },
        {
            "type": [
                {
                    "type": "array",
                    "items": "File"
                }
            ],
            "sbg:fileTypes": "FASTQ,FASTQ.GZ,FQ,FQ.GZ",
            "id": "#fastq",
            "sbg:includeInPorts": true,
            "sbg:y": 254.66667691866573,
            "label": "FASTQ",
            "batchType": "metadata.sample_id",
            "sbg:x": -43.333329757054656
        },
        {
            "type": [
                "File"
            ],
            "sbg:fileTypes": "FASTA,FA,FA.GZ,FASTA.GZ,TAR",
            "sbg:suggestedValue": {
                "path": "5772b6d9507c1752674486e7",
                "name": "human_g1k_v37_decoy.fasta.tar",
                "class": "File"
            },
            "id": "#reference",
            "sbg:includeInPorts": true,
            "sbg:y": 21.33333672417546,
            "label": "Reference or TAR with BWA reference indices",
            "sbg:x": -83.99998560216626
        },
        {
            "type": [
                "File"
            ],
            "sbg:fileTypes": "BED",
            "sbg:suggestedValue": {
                "path": "5772b6d8507c1752674486e5",
                "name": "human_g1k_v37_decoy.breakpoints.bed",
                "class": "File"
            },
            "id": "#bed_file_1",
            "sbg:includeInPorts": true,
            "sbg:y": 1183.3286236522697,
            "label": "Target BED",
            "sbg:x": 133.33333332008812
        },
        {
            "type": [
                {
                    "type": "array",
                    "items": "File"
                }
            ],
            "sbg:fileTypes": "VCF",
            "sbg:suggestedValue": [
                {
                    "path": "5772b6c9507c1752674486d4",
                    "name": "Mills_and_1000G_gold_standard.indels.b37.sites.vcf",
                    "class": "File"
                },
                {
                    "path": "578cf947507c17681a3117ce",
                    "name": "1000G_phase1.indels.b37.vcf",
                    "class": "File"
                }
            ],
            "id": "#known_1",
            "sbg:includeInPorts": true,
            "sbg:y": 548.3286820515789,
            "label": "Known INDELs",
            "sbg:x": 711.6666337913925
        },
        {
            "type": [
                "File"
            ],
            "sbg:fileTypes": "VCF",
            "sbg:suggestedValue": {
                "path": "5772b6c9507c1752674486d4",
                "name": "Mills_and_1000G_gold_standard.indels.b37.sites.vcf",
                "class": "File"
            },
            "id": "#input_vcf_3",
            "sbg:includeInPorts": true,
            "sbg:y": 391.6668539709586,
            "label": "Mills",
            "sbg:x": 2456.667814082613
        },
        {
            "type": [
                "File"
            ],
            "sbg:fileTypes": "VCF",
            "sbg:suggestedValue": {
                "path": "578cf947507c17681a3117d0",
                "name": "1000G_phase1.snps.high_confidence.b37.vcf",
                "class": "File"
            },
            "id": "#input_vcf_2",
            "sbg:includeInPorts": true,
            "sbg:y": -146.66666666666674,
            "label": "1000g phase1 snps",
            "sbg:x": 2051.6670735677094
        },
        {
            "type": [
                "File"
            ],
            "sbg:fileTypes": "VCF",
            "sbg:suggestedValue": {
                "path": "5772b6d3507c1752674486df",
                "name": "hapmap_3.3.b37.vcf",
                "class": "File"
            },
            "id": "#input_vcf_1",
            "sbg:includeInPorts": true,
            "sbg:y": -231.666717529297,
            "label": "HapMap",
            "sbg:x": 2180.000508626303
        },
        {
            "type": [
                "File"
            ],
            "sbg:fileTypes": "VCF",
            "sbg:suggestedValue": {
                "path": "578cf946507c17681a3117cb",
                "name": "1000G_omni2.5.b37.vcf",
                "class": "File"
            },
            "id": "#input_vcf",
            "sbg:includeInPorts": true,
            "sbg:y": -326.6667683919273,
            "label": "1000g Omni",
            "sbg:x": 2051.6673787434906
        },
        {
            "type": [
                {
                    "type": "array",
                    "items": "File"
                }
            ],
            "sbg:fileTypes": "VCF",
            "sbg:suggestedValue": [
                {
                    "path": "5772b6cd507c1752674486d8",
                    "name": "dbsnp_137.b37.vcf",
                    "class": "File"
                }
            ],
            "id": "#known_sites_1",
            "sbg:includeInPorts": true,
            "sbg:y": 834.9953711163477,
            "label": "dbSNP",
            "sbg:x": 361.6667957968216
        },
        {
            "sbg:includeInPorts": true,
            "id": "#intervals",
            "type": [
                "string"
            ],
            "sbg:y": 994.9941705862676,
            "label": "BQSR intervals optimal value is 20 or chr20",
            "sbg:x": 413.3332543108168
        }
    ],
    "sbg:canvas_y": -98,
    "sbg:projectName": "Whole Genome Analysis - BWA + GATK 2.3.9-Lite (with Metrics) - Demo",
    "sbg:revisionsInfo": [
        {
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1459775882,
            "sbg:revision": 0,
            "sbg:modifiedBy": "mladenlSBG"
        },
        {
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1459776056,
            "sbg:revision": 1,
            "sbg:modifiedBy": "mladenlSBG"
        },
        {
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1462541035,
            "sbg:revision": 2,
            "sbg:modifiedBy": "bix-demo"
        },
        {
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1465215515,
            "sbg:revision": 3,
            "sbg:modifiedBy": "vladimirk.sudo"
        },
        {
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1465314089,
            "sbg:revision": 4,
            "sbg:modifiedBy": "vladimirk"
        },
        {
            "sbg:revisionNotes": null,
            "sbg:modifiedOn": 1466090180,
            "sbg:revision": 5,
            "sbg:modifiedBy": "vladimirk"
        },
        {
            "sbg:revisionNotes": "Intervals in 2 BED files, one with GLs executes sequentially.",
            "sbg:modifiedOn": 1467721313,
            "sbg:revision": 6,
            "sbg:modifiedBy": "vladimirk"
        },
        {
            "sbg:revisionNotes": "Added reads connection to Indel Realigner",
            "sbg:modifiedOn": 1467721724,
            "sbg:revision": 7,
            "sbg:modifiedBy": "vladimirk"
        },
        {
            "sbg:revisionNotes": "GL Intervals connected to Indel Realigner, Printreads and Unified Genotyper",
            "sbg:modifiedOn": 1467808591,
            "sbg:revision": 8,
            "sbg:modifiedBy": "vladimirk"
        },
        {
            "sbg:revisionNotes": "Added description for 2-BED file parallelization.",
            "sbg:modifiedOn": 1467820900,
            "sbg:revision": 9,
            "sbg:modifiedBy": "vladimirk"
        },
        {
            "sbg:revisionNotes": "Added Split BED node.",
            "sbg:modifiedOn": 1467904064,
            "sbg:revision": 10,
            "sbg:modifiedBy": "vladimirk"
        },
        {
            "sbg:revisionNotes": "updated GATK tools.",
            "sbg:modifiedOn": 1467904552,
            "sbg:revision": 11,
            "sbg:modifiedBy": "vladimirk"
        },
        {
            "sbg:revisionNotes": "SnpEff4.2 added.",
            "sbg:modifiedOn": 1467904864,
            "sbg:revision": 12,
            "sbg:modifiedBy": "vladimirk"
        },
        {
            "sbg:revisionNotes": "SnpEff threads and memory set.\nBWA MEM threads set to 30, to allow it to work in parallel with FastqC.",
            "sbg:modifiedOn": 1467973178,
            "sbg:revision": 13,
            "sbg:modifiedBy": "vladimirk"
        },
        {
            "sbg:revisionNotes": "BWA MEM memory = 54Gb",
            "sbg:modifiedOn": 1467974582,
            "sbg:revision": 14,
            "sbg:modifiedBy": "vladimirk"
        },
        {
            "sbg:revisionNotes": "SnpEff summary HTML",
            "sbg:modifiedOn": 1468113366,
            "sbg:revision": 15,
            "sbg:modifiedBy": "vladimirk"
        },
        {
            "sbg:revisionNotes": "GATK Best practice changes.",
            "sbg:modifiedOn": 1468253712,
            "sbg:revision": 16,
            "sbg:modifiedBy": "vladimirk"
        },
        {
            "sbg:revisionNotes": "BUGfix SBG Pass intervals connected",
            "sbg:modifiedOn": 1468278412,
            "sbg:revision": 17,
            "sbg:modifiedBy": "vladimirk"
        },
        {
            "sbg:revisionNotes": "BUGFIX sbg pass intervals connected.",
            "sbg:modifiedOn": 1468278492,
            "sbg:revision": 18,
            "sbg:modifiedBy": "vladimirk"
        },
        {
            "sbg:revisionNotes": "BUGFIX SBG Pass intervals",
            "sbg:modifiedOn": 1468278541,
            "sbg:revision": 19,
            "sbg:modifiedBy": "vladimirk"
        },
        {
            "sbg:revisionNotes": "BUGFIX SBG Pass intervals",
            "sbg:modifiedOn": 1468278618,
            "sbg:revision": 20,
            "sbg:modifiedBy": "vladimirk"
        },
        {
            "sbg:revisionNotes": "BUGFIX SBG Pass intervals",
            "sbg:modifiedOn": 1468278673,
            "sbg:revision": 21,
            "sbg:modifiedBy": "vladimirk"
        },
        {
            "sbg:revisionNotes": "BWA MEM and BWA INDEX latest versions.",
            "sbg:modifiedOn": 1469450423,
            "sbg:revision": 22,
            "sbg:modifiedBy": "vladimirk"
        },
        {
            "sbg:revisionNotes": "Added \"suggested\" files.",
            "sbg:modifiedOn": 1469452420,
            "sbg:revision": 23,
            "sbg:modifiedBy": "vladimirk"
        },
        {
            "sbg:revisionNotes": "Source for Apps from Public Apps removed.",
            "sbg:modifiedOn": 1469799104,
            "sbg:revision": 24,
            "sbg:modifiedBy": "vladimirk"
        },
        {
            "sbg:revisionNotes": "Added SBG Quality Adjuster.",
            "sbg:modifiedOn": 1471016955,
            "sbg:revision": 25,
            "sbg:modifiedBy": "vladimirk"
        },
        {
            "sbg:revisionNotes": "Quality Adjuster scattered.",
            "sbg:modifiedOn": 1471019143,
            "sbg:revision": 26,
            "sbg:modifiedBy": "vladimirk"
        },
        {
            "sbg:revisionNotes": "Prepare VQSR updated.",
            "sbg:modifiedOn": 1471363528,
            "sbg:revision": 27,
            "sbg:modifiedBy": "vladimirk"
        },
        {
            "sbg:revisionNotes": "All inputs set to required.",
            "sbg:modifiedOn": 1471363986,
            "sbg:revision": 28,
            "sbg:modifiedBy": "vladimirk"
        },
        {
            "sbg:revisionNotes": "Updated staged to link at some GATK tools.",
            "sbg:modifiedOn": 1471364502,
            "sbg:revision": 29,
            "sbg:modifiedBy": "vladimirk"
        },
        {
            "sbg:revisionNotes": "UG fixed.",
            "sbg:modifiedOn": 1471445735,
            "sbg:revision": 30,
            "sbg:modifiedBy": "vladimirk"
        },
        {
            "sbg:revisionNotes": "UG scatter []concat(dbsnp)",
            "sbg:modifiedOn": 1471450484,
            "sbg:revision": 31,
            "sbg:modifiedBy": "vladimirk"
        },
        {
            "sbg:revisionNotes": "Small fix - no link for dbsnp.",
            "sbg:modifiedOn": 1471479575,
            "sbg:revision": 32,
            "sbg:modifiedBy": "vladimirk"
        },
        {
            "sbg:revisionNotes": "Missing suggested files set.",
            "sbg:modifiedOn": 1471878511,
            "sbg:revision": 33,
            "sbg:modifiedBy": "vladimirk"
        },
        {
            "sbg:revisionNotes": "Missing file types set.",
            "sbg:modifiedOn": 1471879264,
            "sbg:revision": 34,
            "sbg:modifiedBy": "vladimirk"
        },
        {
            "sbg:revisionNotes": "bwa-mem updated.",
            "sbg:modifiedOn": 1471892434,
            "sbg:revision": 35,
            "sbg:modifiedBy": "vladimirk"
        },
        {
            "sbg:revisionNotes": "percent_bad_variants on VQSRs = 0.05",
            "sbg:modifiedOn": 1471949863,
            "sbg:revision": 36,
            "sbg:modifiedBy": "vladimirk"
        },
        {
            "sbg:revisionNotes": "Returned to older version with all inputs set to required.",
            "sbg:modifiedOn": 1471957062,
            "sbg:revision": 37,
            "sbg:modifiedBy": "vladimirk"
        },
        {
            "sbg:revisionNotes": "Prepare intervals with tools in scatter mode. All GATK \"Scatter\" tools removed.",
            "sbg:modifiedOn": 1473156320,
            "sbg:revision": 38,
            "sbg:modifiedBy": "vladimirk"
        },
        {
            "sbg:revisionNotes": "Input fastq batch by sample",
            "sbg:modifiedOn": 1475246652,
            "sbg:revision": 39,
            "sbg:modifiedBy": "bogdang"
        },
        {
            "sbg:revisionNotes": "Interval -L 20 set at BaseRecalibrator",
            "sbg:modifiedOn": 1475594685,
            "sbg:revision": 40,
            "sbg:modifiedBy": "bogdang"
        },
        {
            "sbg:revisionNotes": "Tools updated. Added detailed description of the workflow.",
            "sbg:modifiedOn": 1476267555,
            "sbg:revision": 41,
            "sbg:modifiedBy": "vladimirk"
        },
        {
            "sbg:revisionNotes": "BQSR intervals set to required",
            "sbg:modifiedOn": 1476272572,
            "sbg:revision": 42,
            "sbg:modifiedBy": "vladimirk"
        },
        {
            "sbg:revisionNotes": "BWA-MEM and GATK tools optimized.",
            "sbg:modifiedOn": 1476709047,
            "sbg:revision": 43,
            "sbg:modifiedBy": "vladimirk"
        },
        {
            "sbg:revisionNotes": "Sambamba merge and view updated, set number of reserved threads.",
            "sbg:modifiedOn": 1476709446,
            "sbg:revision": 44,
            "sbg:modifiedBy": "vladimirk"
        },
        {
            "sbg:revisionNotes": "Split BED file by interval",
            "sbg:modifiedOn": 1476711759,
            "sbg:revision": 45,
            "sbg:modifiedBy": "vladimirk"
        },
        {
            "sbg:revisionNotes": "Memory overhead for UG set to 300MB to start it the same time as Sambamba Merge.",
            "sbg:modifiedOn": 1476717166,
            "sbg:revision": 46,
            "sbg:modifiedBy": "vladimirk"
        },
        {
            "sbg:revisionNotes": "Memory overhead set to 300 for IR and PR, 64 for RTC.",
            "sbg:modifiedOn": 1476718539,
            "sbg:revision": 47,
            "sbg:modifiedBy": "vladimirk"
        },
        {
            "sbg:revisionNotes": "Scatter by intervals. Memory overhead set to 300 instead 512.",
            "sbg:modifiedOn": 1476787701,
            "sbg:revision": 48,
            "sbg:modifiedBy": "vladimirk"
        },
        {
            "sbg:revisionNotes": "Added genome coverage and memory overhead adjusted",
            "sbg:modifiedOn": 1476961531,
            "sbg:revision": 49,
            "sbg:modifiedBy": "vladimirk"
        },
        {
            "sbg:revisionNotes": "Returned older tested revision (BQSR intervals set to required)",
            "sbg:modifiedOn": 1476984251,
            "sbg:revision": 50,
            "sbg:modifiedBy": "vladimirk"
        },
        {
            "sbg:revisionNotes": "Returned older revision: BQSR interval set to required. Prepare intervals from SBGTools",
            "sbg:modifiedOn": 1477046171,
            "sbg:revision": 51,
            "sbg:modifiedBy": "vladimirk"
        },
        {
            "sbg:revisionNotes": "Optimized execution with number of threads for GATK tools. WGS Coverage replaced with SBG Genome Coverage.",
            "sbg:modifiedOn": 1479383747,
            "sbg:revision": 52,
            "sbg:modifiedBy": "vladimirk"
        },
        {
            "sbg:revisionNotes": "SBG prepare intervals from Demo project. All tools updated.",
            "sbg:modifiedOn": 1480071428,
            "sbg:revision": 53,
            "sbg:modifiedBy": "vladimirk"
        },
        {
            "sbg:revisionNotes": "port intervals renamed to previous name bqsr_intervals",
            "sbg:modifiedOn": 1480427777,
            "sbg:revision": 54,
            "sbg:modifiedBy": "vladimirk"
        },
        {
            "sbg:revisionNotes": "FASTQC and BWA-MEM updated.",
            "sbg:modifiedOn": 1481109842,
            "sbg:revision": 55,
            "sbg:modifiedBy": "vladimirk"
        },
        {
            "sbg:revisionNotes": "Quality adjuster updated.",
            "sbg:modifiedOn": 1481623523,
            "sbg:revision": 56,
            "sbg:modifiedBy": "vladimirk"
        },
        {
            "sbg:revisionNotes": "Tool updates.\nChanged inputs to VQSR INDELS to Mills and dbSNP per recommendations on GATK best practices:\nhttps://software.broadinstitute.org/gatk/documentation/article.php?id=1259\n\nhttps://software.broadinstitute.org/gatk/documentation/article?id=2805",
            "sbg:modifiedOn": 1496060351,
            "sbg:revision": 57,
            "sbg:modifiedBy": "nikola_jovanovic"
        },
        {
            "sbg:revisionNotes": "Set mills known to false",
            "sbg:modifiedOn": 1496074665,
            "sbg:revision": 58,
            "sbg:modifiedBy": "nikola_jovanovic"
        },
        {
            "sbg:revisionNotes": "VQSR suggested updated",
            "sbg:modifiedOn": 1496317394,
            "sbg:revision": 59,
            "sbg:modifiedBy": "vladimirk"
        },
        {
            "sbg:revisionNotes": "Added workflow description. intervals -> bqsr_intervals",
            "sbg:modifiedOn": 1499686066,
            "sbg:revision": 60,
            "sbg:modifiedBy": "vladimirk"
        },
        {
            "sbg:revisionNotes": "Batch for fastqs",
            "sbg:modifiedOn": 1499770079,
            "sbg:revision": 61,
            "sbg:modifiedBy": "vladimirk"
        }
    ],
    "sbg:toolAuthor": "Seven Bridges",
    "sbg:contributors": [
        "bix-demo",
        "nikola_jovanovic",
        "bogdang",
        "mladenlSBG",
        "vladimirk",
        "vladimirk.sudo"
    ],
    "outputs": [
        {
            "type": [
                "null",
                "File"
            ],
            "sbg:fileTypes": "HTML, B64HTML",
            "id": "#b64html",
            "required": false,
            "sbg:includeInPorts": true,
            "sbg:y": 444.0000584655357,
            "label": "FastQC report",
            "source": [
                "#SBG_Html2b64.b64html"
            ],
            "sbg:x": 518.3334852059734
        },
        {
            "type": [
                "File"
            ],
            "sbg:fileTypes": "TXT",
            "id": "#summary_metrics",
            "required": true,
            "sbg:includeInPorts": true,
            "sbg:y": -523.3333742088753,
            "label": "Picard Alignment Metrics",
            "source": [
                "#Picard_CollectAlignmentSummaryMetrics.summary_metrics"
            ],
            "sbg:x": 2745.0003536145005
        },
        {
            "type": [
                "null",
                "File"
            ],
            "sbg:fileTypes": "PDF",
            "id": "#plot_pdf",
            "required": false,
            "sbg:includeInPorts": true,
            "sbg:y": 615.0001635419057,
            "label": "BaseRecalibrator Plot",
            "source": [
                "#GATK_BaseRecalibrator.plot_pdf"
            ],
            "sbg:x": 1800.0004876984663
        },
        {
            "type": [
                "null",
                "File"
            ],
            "sbg:fileTypes": "TXT",
            "id": "#summary_text",
            "required": false,
            "sbg:includeInPorts": true,
            "sbg:y": 59.99999346997966,
            "label": "SnpEff Summary text",
            "source": [
                "#SnpEff.summary_text"
            ],
            "sbg:x": 3690.0001456340174
        },
        {
            "type": [
                "null",
                "File"
            ],
            "sbg:fileTypes": "VCF, TXT, GATK, BED, BEDANN",
            "id": "#annotated",
            "required": false,
            "sbg:includeInPorts": true,
            "sbg:y": 371.66670515802275,
            "label": "Annotated VCF",
            "source": [
                "#SnpEff.annotated"
            ],
            "sbg:x": 3673.333559420379
        },
        {
            "type": [
                "File"
            ],
            "sbg:fileTypes": "VCF",
            "id": "#combined_vcf",
            "required": true,
            "sbg:includeInPorts": true,
            "sbg:y": 648.3333466317924,
            "label": "Raw VCF",
            "source": [
                "#GATK_CombineVariants.combined_vcf"
            ],
            "sbg:x": 2531.6667673985175
        },
        {
            "type": [
                "null",
                "File"
            ],
            "sbg:fileTypes": "HTML, CSV",
            "id": "#summary",
            "required": false,
            "sbg:includeInPorts": true,
            "sbg:y": 219.99421000457625,
            "label": "SnpEff summary HTML",
            "source": [
                "#SnpEff.summary"
            ],
            "sbg:x": 3710.000015523695
        },
        {
            "type": [
                "null",
                "File"
            ],
            "sbg:includeInPorts": true,
            "id": "#summary_1",
            "required": false,
            "sbg:y": -750.0057737959752,
            "label": "Genome Coverage",
            "source": [
                "#SBG_Genome_Coverage.summary"
            ],
            "sbg:x": 3229.9999191098727
        },
        {
            "type": [
                "null",
                "File"
            ],
            "sbg:includeInPorts": true,
            "id": "#per_interval",
            "required": false,
            "sbg:y": -583.3391089969207,
            "label": "Coverage Per Interval",
            "source": [
                "#SBG_Genome_Coverage.per_interval"
            ],
            "sbg:x": 3226.6665857765397
        }
    ],
    "sbg:toolkit": "SBGTools"
}