{
  "id" : "14abe3e7-4d44-4ad0-886f-1d3be6928102",
  "parentId" : "348d55b7-8cd7-4053-809f-d425cbcb0e25",
  "rootId" : "348d55b7-8cd7-4053-809f-d425cbcb0e25",
  "name" : "root.ChIP_seq_BEDTools_intersect_1",
  "app" : "data:text/plain;base64,ewogICJjb250cmlidXRvciIgOiBbIF0sCiAgIm93bmVyIiA6IFsgXSwKICAiY3dsVmVyc2lvbiIgOiAic2JnOmRyYWZ0LTIiLAogICJpbnB1dHMiIDogWyB7CiAgICAiaWQiIDogIiN3cml0ZV9vdmVybGFwX2FkZGl0aW9uYWwiLAogICAgInR5cGUiIDogWyAibnVsbCIsICJib29sZWFuIiBdLAogICAgImlucHV0QmluZGluZyIgOiB7CiAgICAgICJwcmVmaXgiIDogIi13YW8iLAogICAgICAic2JnOmNtZEluY2x1ZGUiIDogdHJ1ZSwKICAgICAgInNlcGFyYXRlIiA6IGZhbHNlCiAgICB9LAogICAgImRlc2NyaXB0aW9uIiA6ICJXcml0ZSB0aGUgb3JpZ2luYWwgQSBhbmQgQiBlbnRyaWVzIHBsdXMgdGhlIG51bWJlciBvZiBiYXNlIHBhaXJzIG9mIG92ZXJsYXAgYmV0d2VlbiB0aGUgdHdvIGZlYXR1cmVzLiBPdmVybGFwcGluZyBmZWF0dXJlcyByZXN0cmljdGVkIGJ5IC1mIGFuZCAtci4gSG93ZXZlciwgQSBmZWF0dXJlcyB3L28gb3ZlcmxhcCBhcmUgYWxzbyByZXBvcnRlZCBcdHdpdGggYSBOVUxMIEIgZmVhdHVyZSBhbmQgb3ZlcmxhcCA9IDAuIiwKICAgICJzYmc6Y2F0ZWdvcnkiIDogIkV4ZWN1dGlvbiIsCiAgICAibGFiZWwiIDogIldyaXRlIEEsIEIsIG92ZXJsYXAgYW5kIGFkZGl0aW9uYWwiCiAgfSwgewogICAgImlkIiA6ICIjd3JpdGVfb3ZlcmxhcCIsCiAgICAidHlwZSIgOiBbICJudWxsIiwgImJvb2xlYW4iIF0sCiAgICAiaW5wdXRCaW5kaW5nIiA6IHsKICAgICAgInByZWZpeCIgOiAiLXdvIiwKICAgICAgInNiZzpjbWRJbmNsdWRlIiA6IHRydWUsCiAgICAgICJzZXBhcmF0ZSIgOiBmYWxzZQogICAgfSwKICAgICJkZXNjcmlwdGlvbiIgOiAiV3JpdGUgdGhlIG9yaWdpbmFsIEEgYW5kIEIgZW50cmllcyBwbHVzIHRoZSBudW1iZXIgb2YgYmFzZSBwYWlycyBvZiBvdmVybGFwIGJldHdlZW4gdGhlIHR3byBmZWF0dXJlcy4gT3ZlcmxhcHMgcmVzdHJpY3RlZCBieSAtZiBhbmQgLXIuIE9ubHkgQSBmZWF0dXJlcyB3aXRoIG92ZXJsYXAgYXJlIHJlcG9ydGVkLiIsCiAgICAic2JnOmNhdGVnb3J5IiA6ICJFeGVjdXRpb24iLAogICAgImxhYmVsIiA6ICJXcml0ZSBBLCBCIGFuZCBvdmVybGFwIgogIH0sIHsKICAgICJpZCIgOiAiI3dyaXRlX292ZWxhcF9iIiwKICAgICJ0eXBlIiA6IFsgIm51bGwiLCAiYm9vbGVhbiIgXSwKICAgICJpbnB1dEJpbmRpbmciIDogewogICAgICAicHJlZml4IiA6ICItYyIsCiAgICAgICJzYmc6Y21kSW5jbHVkZSIgOiB0cnVlLAogICAgICAic2VwYXJhdGUiIDogZmFsc2UKICAgIH0sCiAgICAiZGVzY3JpcHRpb24iIDogIkZvciBlYWNoIGVudHJ5IGluIEEsIHJlcG9ydCB0aGUgbnVtYmVyIG9mIG92ZXJsYXBzIHdpdGggQi4gUmVwb3J0cyAwIGZvciBBIGVudHJpZXMgdGhhdCBoYXZlIG5vIG92ZXJsYXAgd2l0aCBCLiBPdmVybGFwcyByZXN0cmljdGVkIGJ5IC1mIGFuZCAtci4iLAogICAgInNiZzpjYXRlZ29yeSIgOiAiRXhlY3V0aW9uIiwKICAgICJsYWJlbCIgOiAiRm9yIGVudHJ5IGluIEEgd3JpdGUgb3ZlcmxhcCBpZiBpbiBCIgogIH0sIHsKICAgICJpZCIgOiAiI3dyaXRlX29yaWdpbmFsX2EiLAogICAgInR5cGUiIDogWyAibnVsbCIsICJib29sZWFuIiBdLAogICAgImlucHV0QmluZGluZyIgOiB7CiAgICAgICJwcmVmaXgiIDogIi11IiwKICAgICAgInNiZzpjbWRJbmNsdWRlIiA6IHRydWUsCiAgICAgICJzZXBhcmF0ZSIgOiBmYWxzZQogICAgfSwKICAgICJkZXNjcmlwdGlvbiIgOiAiV3JpdGUgdGhlIG9yaWdpbmFsIEEgZW50cnkgX29uY2VfIGlmIF9hbnlfIG92ZXJsYXBzIGZvdW5kIGluIEIuIFx0XHQtIEluIG90aGVyIHdvcmRzLCBqdXN0IHJlcG9ydCB0aGUgZmFjdCA+PTEgaGl0IHdhcyBmb3VuZC4gXHRcdC0gT3ZlcmxhcHMgcmVzdHJpY3RlZCBieSAtZiBhbmQgLXIuIiwKICAgICJzYmc6Y2F0ZWdvcnkiIDogIkV4ZWN1dGlvbiIsCiAgICAibGFiZWwiIDogIldyaXRlIG9yaWdpbmFsIEEgZW50cnkgaWYgZm91bmQgaW4gQiIKICB9LCB7CiAgICAiaWQiIDogIiN3cml0ZV9ub19vdmVybGFwX2IiLAogICAgInR5cGUiIDogWyAibnVsbCIsICJib29sZWFuIiBdLAogICAgImlucHV0QmluZGluZyIgOiB7CiAgICAgICJwcmVmaXgiIDogIi12IiwKICAgICAgInNiZzpjbWRJbmNsdWRlIiA6IHRydWUsCiAgICAgICJzZXBhcmF0ZSIgOiBmYWxzZQogICAgfSwKICAgICJkZXNjcmlwdGlvbiIgOiAiT25seSByZXBvcnQgdGhvc2UgZW50cmllcyBpbiBBIHRoYXQgaGF2ZSBfbm8gb3ZlcmxhcHNfIHdpdGggQi4gU2ltaWxhciB0byBcImdyZXAgLXZcIiAoYW4gaG9tYWdlKS4iLAogICAgInNiZzpjYXRlZ29yeSIgOiAiRXhlY3V0aW9uIiwKICAgICJsYWJlbCIgOiAiV3JpdGUgZW50cnkgaW4gQSBhbmQgbm8gb3ZlcmxhcHMgaW4gQiIKICB9LCB7CiAgICAiaWQiIDogIiN3cml0ZV9pbl9iIiwKICAgICJ0eXBlIiA6IFsgIm51bGwiLCAiYm9vbGVhbiIgXSwKICAgICJpbnB1dEJpbmRpbmciIDogewogICAgICAicHJlZml4IiA6ICItd2IiLAogICAgICAic2JnOmNtZEluY2x1ZGUiIDogdHJ1ZSwKICAgICAgInNlcGFyYXRlIiA6IGZhbHNlCiAgICB9LAogICAgImRlc2NyaXB0aW9uIiA6ICJXcml0ZSB0aGUgb3JpZ2luYWwgZW50cnkgaW4gQiBmb3IgZWFjaCBvdmVybGFwLiBcdFx0LSBVc2VmdWwgZm9yIGtub3dpbmcgX3doYXRfIEEgb3ZlcmxhcHMuIFJlc3RyaWN0ZWQgYnkgLWYgYW5kIC1yLiIsCiAgICAic2JnOmNhdGVnb3J5IiA6ICJFeGVjdXRpb24iLAogICAgImxhYmVsIiA6ICJXcml0ZSB0aGUgb3JpZ2luYWwgZW50cnkgaW4gQiIKICB9LCB7CiAgICAiaWQiIDogIiN3cml0ZV9pbl9hIiwKICAgICJ0eXBlIiA6IFsgIm51bGwiLCAiYm9vbGVhbiIgXSwKICAgICJpbnB1dEJpbmRpbmciIDogewogICAgICAicHJlZml4IiA6ICItd2EiLAogICAgICAic2JnOmNtZEluY2x1ZGUiIDogdHJ1ZSwKICAgICAgInNlcGFyYXRlIiA6IGZhbHNlCiAgICB9LAogICAgImRlc2NyaXB0aW9uIiA6ICJXcml0ZSB0aGUgb3JpZ2luYWwgZW50cnkgaW4gQSBmb3IgZWFjaCBvdmVybGFwLiIsCiAgICAic2JnOmNhdGVnb3J5IiA6ICJFeGVjdXRpb24iLAogICAgImxhYmVsIiA6ICJXcml0ZSB0aGUgb3JpZ2luYWwgZW50cnkgaW4gQSIKICB9LCB7CiAgICAiaWQiIDogIiN1bmNvbXByZXNzZWRfYmFtX291dHB1dCIsCiAgICAidHlwZSIgOiBbICJudWxsIiwgImJvb2xlYW4iIF0sCiAgICAiaW5wdXRCaW5kaW5nIiA6IHsKICAgICAgInByZWZpeCIgOiAiLXViYW0iLAogICAgICAic2JnOmNtZEluY2x1ZGUiIDogdHJ1ZSwKICAgICAgInNlcGFyYXRlIiA6IGZhbHNlCiAgICB9LAogICAgImRlc2NyaXB0aW9uIiA6ICJXcml0ZSB1bmNvbXByZXNzZWQgQkFNIG91dHB1dC4gRGVmYXVsdCB3cml0ZXMgY29tcHJlc3NlZCBCQU0uIiwKICAgICJzYmc6Y2F0ZWdvcnkiIDogIkV4ZWN1dGlvbiIsCiAgICAibGFiZWwiIDogIlVuY29tcHJlc3NlZCBCQU0gb3V0cHV0IgogIH0sIHsKICAgICJpZCIgOiAiI3N0cmFuZF9zYW1lIiwKICAgICJ0eXBlIiA6IFsgIm51bGwiLCAiYm9vbGVhbiIgXSwKICAgICJpbnB1dEJpbmRpbmciIDogewogICAgICAicHJlZml4IiA6ICItcyIsCiAgICAgICJzYmc6Y21kSW5jbHVkZSIgOiB0cnVlLAogICAgICAic2VwYXJhdGUiIDogZmFsc2UKICAgIH0sCiAgICAiZGVzY3JpcHRpb24iIDogIlJlcXVpcmUgc2FtZSBzdHJhbmRlZG5lc3MuIFRoYXQgaXMsIG9ubHkgcmVwb3J0IGhpdHMgaW4gQiB0aGF0IG92ZXJsYXAgQSBvbiB0aGUgX3NhbWVfIHN0cmFuZC4gQnkgZGVmYXVsdCwgb3ZlcmxhcHMgYXJlIHJlcG9ydGVkIHdpdGhvdXQgcmVzcGVjdCB0byBzdHJhbmQuIiwKICAgICJzYmc6Y2F0ZWdvcnkiIDogIkV4ZWN1dGlvbiIsCiAgICAibGFiZWwiIDogIlJlcXVpcmUgc2FtZSBzdHJhbmRlZG5lc3MiCiAgfSwgewogICAgImlkIiA6ICIjc3RyYW5kX2RpZmYiLAogICAgInR5cGUiIDogWyAibnVsbCIsICJib29sZWFuIiBdLAogICAgImlucHV0QmluZGluZyIgOiB7CiAgICAgICJwcmVmaXgiIDogIi1TIiwKICAgICAgInNiZzpjbWRJbmNsdWRlIiA6IHRydWUsCiAgICAgICJzZXBhcmF0ZSIgOiBmYWxzZQogICAgfSwKICAgICJkZXNjcmlwdGlvbiIgOiAiUmVxdWlyZSBkaWZmZXJlbnQgc3RyYW5kZWRuZXNzLiBUaGF0IGlzLCBvbmx5IHJlcG9ydCBoaXRzIGluIEIgdGhhdCBvdmVybGFwIEEgb24gdGhlIF9vcHBvc2l0ZV8gc3RyYW5kLiBCeSBkZWZhdWx0LCBvdmVybGFwcyBhcmUgcmVwb3J0ZWQgd2l0aG91dCByZXNwZWN0IHRvIHN0cmFuZC4iLAogICAgInNiZzpjYXRlZ29yeSIgOiAiRXhlY3V0aW9uIiwKICAgICJsYWJlbCIgOiAiUmVxdWlyZSBkaWZmZXJlbnQgc3RyYW5kZWRuZXNzIgogIH0sIHsKICAgICJpZCIgOiAiI3NwbGl0IiwKICAgICJ0eXBlIiA6IFsgIm51bGwiLCAic3RyaW5nIiBdLAogICAgImlucHV0QmluZGluZyIgOiB7CiAgICAgICJwcmVmaXgiIDogIi1zcGxpdCIsCiAgICAgICJzYmc6Y21kSW5jbHVkZSIgOiB0cnVlLAogICAgICAic2VwYXJhdGUiIDogZmFsc2UKICAgIH0sCiAgICAiZGVzY3JpcHRpb24iIDogIlRyZWF0IFwic3BsaXRcIiBCQU0gb3IgQkVEMTIgZW50cmllcyBhcyBkaXN0aW5jdCBCRUQgaW50ZXJ2YWxzLiIsCiAgICAic2JnOmNhdGVnb3J5IiA6ICJFeGVjdXRpb24iLAogICAgImxhYmVsIiA6ICJTcGxpdCIKICB9LCB7CiAgICAiaWQiIDogIiNzb3J0ZWQiLAogICAgInR5cGUiIDogWyAibnVsbCIsICJib29sZWFuIiBdLAogICAgImlucHV0QmluZGluZyIgOiB7CiAgICAgICJwcmVmaXgiIDogIi1zb3J0ZWQiLAogICAgICAic2JnOmNtZEluY2x1ZGUiIDogdHJ1ZSwKICAgICAgInNlcGFyYXRlIiA6IGZhbHNlCiAgICB9LAogICAgImRlc2NyaXB0aW9uIiA6ICJVc2UgdGhlIFwiY2hyb21zd2VlcFwiIGFsZ29yaXRobSBmb3Igc29ydGVkICgtazEsMSAtazIsMm4pIGlucHV0LiIsCiAgICAic2JnOmNhdGVnb3J5IiA6ICJFeGVjdXRpb24iLAogICAgImxhYmVsIiA6ICJTb3J0ZWQiCiAgfSwgewogICAgImlkIiA6ICIjc29ydF9vdXRwdXRfZGIiLAogICAgInR5cGUiIDogWyAibnVsbCIsICJib29sZWFuIiBdLAogICAgImlucHV0QmluZGluZyIgOiB7CiAgICAgICJwcmVmaXgiIDogIi1zb3J0b3V0IiwKICAgICAgInNiZzpjbWRJbmNsdWRlIiA6IHRydWUsCiAgICAgICJzZXBhcmF0ZSIgOiBmYWxzZQogICAgfSwKICAgICJkZXNjcmlwdGlvbiIgOiAiV2hlbiB1c2luZyBtdWx0aXBsZSBkYXRhYmFzZXMsIHNvcnQgdGhlIG91dHB1dCBEQiBoaXRzIGZvciBlYWNoIHJlY29yZC4iLAogICAgInNiZzpjYXRlZ29yeSIgOiAiRXhlY3V0aW9uIiwKICAgICJsYWJlbCIgOiAiU29ydCBvdXRwdXQgREIgaGl0cyBmb3IgZWFjaCByZWNvcmQiCiAgfSwgewogICAgImlkIiA6ICIjc2hvd19maWxlbmFtZXMiLAogICAgInR5cGUiIDogWyAibnVsbCIsICJzdHJpbmciIF0sCiAgICAiaW5wdXRCaW5kaW5nIiA6IHsKICAgICAgInByZWZpeCIgOiAiLWZpbGVuYW1lcyIsCiAgICAgICJzYmc6Y21kSW5jbHVkZSIgOiB0cnVlLAogICAgICAic2VwYXJhdGUiIDogdHJ1ZQogICAgfSwKICAgICJkZXNjcmlwdGlvbiIgOiAiV2hlbiB1c2luZyBtdWx0aXBsZSBkYXRhYmFzZXMsIHNob3cgZWFjaCBjb21wbGV0ZSBmaWxlbmFtZSBpbnN0ZWFkIG9mIGEgZmlsZUlkIHdoZW4gYWxzbyBwcmludGluZyB0aGUgREIgcmVjb3JkLiIsCiAgICAic2JnOmNhdGVnb3J5IiA6ICJFeGVjdXRpb24iLAogICAgImxhYmVsIiA6ICJTaG93IGNvbXBsZXRlIGZpbGVuYW1lIgogIH0sIHsKICAgICJpZCIgOiAiI3JlcV9taW5fZnJhYyIsCiAgICAidHlwZSIgOiBbICJudWxsIiwgImJvb2xlYW4iIF0sCiAgICAiaW5wdXRCaW5kaW5nIiA6IHsKICAgICAgInByZWZpeCIgOiAiLWUiLAogICAgICAic2JnOmNtZEluY2x1ZGUiIDogdHJ1ZSwKICAgICAgInNlcGFyYXRlIiA6IGZhbHNlCiAgICB9LAogICAgImRlc2NyaXB0aW9uIiA6ICJSZXF1aXJlIHRoYXQgdGhlIG1pbmltdW0gZnJhY3Rpb24gYmUgc2F0aXNmaWVkIGZvciBBIF9PUl8gQi4gSW4gb3RoZXIgd29yZHMsIGlmIC1lIGlzIHVzZWQgd2l0aCAtZiAwLjkwIGFuZCAtRiAwLjEwIHRoaXMgcmVxdWlyZXMgdGhhdCBlaXRoZXIgOTAlIG9mIEEgaXMgY292ZXJlZCBPUiAxMCUgb2YgQiBpcyBjb3ZlcmVkLiBXaXRob3V0IC1lLCBib3RoIGZyYWN0aW9ucyB3b3VsZCBoYXZlIHRvIGJlIHNhdGlzZmllZC4iLAogICAgInNiZzpjYXRlZ29yeSIgOiAiRXhlY3V0aW9uIiwKICAgICJsYWJlbCIgOiAiUmVxdWlyZSBtaW5pbXVtIGZyYWN0aW9uIgogIH0sIHsKICAgICJpZCIgOiAiI3JlcV9mcmFjX292ZXJsYXAiLAogICAgInR5cGUiIDogWyAibnVsbCIsICJib29sZWFuIiBdLAogICAgImlucHV0QmluZGluZyIgOiB7CiAgICAgICJwcmVmaXgiIDogIi1yIiwKICAgICAgInNiZzpjbWRJbmNsdWRlIiA6IHRydWUsCiAgICAgICJzZXBhcmF0ZSIgOiBmYWxzZQogICAgfSwKICAgICJkZXNjcmlwdGlvbiIgOiAiUmVxdWlyZSB0aGF0IHRoZSBmcmFjdGlvbiBvZiBvdmVybGFwIGJlIHJlY2lwcm9jYWwgZm9yIEEgYW5kIEIuIEluIG90aGVyIHdvcmRzLCBpZiAtZiBpcyAwLjkwIGFuZCAtciBpcyB1c2VkLCB0aGlzIHJlcXVpcmVzIHRoYXQgQiBvdmVybGFwIGF0IGxlYXN0IDkwJSBvZiBBIGFuZCB0aGF0IEEgYWxzbyBvdmVybGFwcyBhdCBsZWFzdCA5MCUgb2YgQi4iLAogICAgInNiZzpjYXRlZ29yeSIgOiAiRXhlY3V0aW9uIiwKICAgICJsYWJlbCIgOiAiUmVxdWlyZSBmcmFjdGlvbiBvdmVybGFwIgogIH0sIHsKICAgICJpZCIgOiAiI291dHB1dF9iZWQiLAogICAgInR5cGUiIDogWyAibnVsbCIsICJib29sZWFuIiBdLAogICAgImlucHV0QmluZGluZyIgOiB7CiAgICAgICJwcmVmaXgiIDogIi1iZWQiLAogICAgICAic2JnOmNtZEluY2x1ZGUiIDogdHJ1ZSwKICAgICAgInNlcGFyYXRlIiA6IGZhbHNlCiAgICB9LAogICAgImRlc2NyaXB0aW9uIiA6ICJJZiB1c2luZyBCQU0gaW5wdXQsIHdyaXRlIG91dHB1dCBhcyBCRUQuIiwKICAgICJzYmc6Y2F0ZWdvcnkiIDogIkV4ZWN1dGlvbiIsCiAgICAibGFiZWwiIDogIk91dHB1dCBhcyBiZWQiCiAgfSwgewogICAgImlkIiA6ICIjbm9uYW1lY2hlY2siLAogICAgInR5cGUiIDogWyAibnVsbCIsICJib29sZWFuIiBdLAogICAgImlucHV0QmluZGluZyIgOiB7CiAgICAgICJwcmVmaXgiIDogIi1ub25hbWVjaGVjayIsCiAgICAgICJzYmc6Y21kSW5jbHVkZSIgOiB0cnVlLAogICAgICAic2VwYXJhdGUiIDogZmFsc2UKICAgIH0sCiAgICAiZGVzY3JpcHRpb24iIDogIkZvciBzb3J0ZWQgZGF0YSwgZG9uJ3QgdGhyb3cgYW4gZXJyb3IgaWYgdGhlIGZpbGUgaGFzIGRpZmZlcmVudCBuYW1pbmcgY29udmVudGlvbnMgXHRcdFx0Zm9yIHRoZSBzYW1lIGNocm9tb3NvbWUuIGV4LiBcImNocjFcIiB2cyBcImNocjAxXCIuIiwKICAgICJzYmc6Y2F0ZWdvcnkiIDogIkV4ZWN1dGlvbiIsCiAgICAibGFiZWwiIDogIk5vIG5hbWUgY2hlY2siCiAgfSwgewogICAgImlkIiA6ICIjbmFtZXNfYWxpYXMiLAogICAgInR5cGUiIDogWyAibnVsbCIsICJzdHJpbmciIF0sCiAgICAiaW5wdXRCaW5kaW5nIiA6IHsKICAgICAgInByZWZpeCIgOiAiLW5hbWVzIiwKICAgICAgInNiZzpjbWRJbmNsdWRlIiA6IHRydWUsCiAgICAgICJzZXBhcmF0ZSIgOiB0cnVlCiAgICB9LAogICAgImRlc2NyaXB0aW9uIiA6ICJXaGVuIHVzaW5nIG11bHRpcGxlIGRhdGFiYXNlcywgcHJvdmlkZSBhbiBhbGlhcyBmb3IgZWFjaCB0aGF0IHdpbGwgYXBwZWFyIGluc3RlYWQgb2YgYSBmaWxlSWQgd2hlbiBhbHNvIHByaW50aW5nIHRoZSBEQiByZWNvcmQuIiwKICAgICJzYmc6Y2F0ZWdvcnkiIDogIkV4ZWN1dGlvbiIsCiAgICAibGFiZWwiIDogIk5hbWVzIGFsaWFzIgogIH0sIHsKICAgICJpZCIgOiAiI2xlZnRfb3V0ZXJfam9pbiIsCiAgICAidHlwZSIgOiBbICJudWxsIiwgImJvb2xlYW4iIF0sCiAgICAiaW5wdXRCaW5kaW5nIiA6IHsKICAgICAgInByZWZpeCIgOiAiLWxvaiIsCiAgICAgICJzYmc6Y21kSW5jbHVkZSIgOiB0cnVlLAogICAgICAic2VwYXJhdGUiIDogZmFsc2UKICAgIH0sCiAgICAiZGVzY3JpcHRpb24iIDogIlBlcmZvcm0gYSBcImxlZnQgb3V0ZXIgam9pblwiLiBUaGF0IGlzLCBmb3IgZWFjaCBmZWF0dXJlIGluIEEgcmVwb3J0IGVhY2ggb3ZlcmxhcCB3aXRoIEIuICBJZiBubyBvdmVybGFwcyBhcmUgZm91bmQsIHJlcG9ydCBhIE5VTEwgZmVhdHVyZSBmb3IgQi4iLAogICAgInNiZzpjYXRlZ29yeSIgOiAiRXhlY3V0aW9uIiwKICAgICJsYWJlbCIgOiAiUGVyZm9ybSBsZWZ0IG91dGVyIGpvaW4iCiAgfSwgewogICAgImlkIiA6ICIjaW5wdXRfZmlsZXNfYiIsCiAgICAidHlwZSIgOiBbICJudWxsIiwgIkZpbGUiIF0sCiAgICAiZGVzY3JpcHRpb24iIDogIkJBTS9CRUQvR0ZGL1ZDRiBmaWxlKHMpIOKAnELigJ0uIiwKICAgICJsYWJlbCIgOiAiYmxhY2tsaXN0IGZpbGUiLAogICAgInNiZzpmaWxlVHlwZXMiIDogIkJBTSwgQkVELCBHRkYsIFZDRiwgQkVELkdaLCBicm9hZFBlYWssIG5hcnJvd1BlYWsuZ3osIG5hcnJvd1BlYWsiLAogICAgInJlcXVpcmVkIiA6IGZhbHNlCiAgfSwgewogICAgImlkIiA6ICIjaW5wdXRfZmlsZXNfYSIsCiAgICAidHlwZSIgOiBbIHsKICAgICAgIml0ZW1zIiA6ICJGaWxlIiwKICAgICAgInR5cGUiIDogImFycmF5IgogICAgfSBdLAogICAgImRlc2NyaXB0aW9uIiA6ICJCQU0vQkVEL0dGRi9WQ0YgZmlsZSDigJxB4oCdLiBXaGVuIGEgQkFNIGZpbGUgaXMgdXNlZCBmb3IgdGhlIEEgZmlsZSwgdGhlIGFsaWdubWVudCBpcyByZXRhaW5lZCBpZiBvdmVybGFwcyBleGlzdCwgYW5kIGV4bGN1ZGVkIGlmIGFuIG92ZXJsYXAgY2Fubm90IGJlIGZvdW5kLiBJZiBtdWx0aXBsZSBvdmVybGFwcyBleGlzdCwgdGhleSBhcmUgbm90IHJlcG9ydGVkLCBhcyB3ZSBhcmUgb25seSB0ZXN0aW5nIGZvciBvbmUgb3IgbW9yZSBvdmVybGFwcy4iLAogICAgImxhYmVsIiA6ICJJbnB1dCBmaWxlIEEiLAogICAgInNiZzpmaWxlVHlwZXMiIDogIkJBTSwgQkVELCBHRkYsIFZDRiwgQkVELkdaLCBicm9hZFBlYWssIG5hcnJvd1BlYWsuZ3osIG5hcnJvd1BlYWsiLAogICAgInJlcXVpcmVkIiA6IHRydWUKICB9LCB7CiAgICAiaWQiIDogIiNpbnB1dF9idWZfc2l6ZSIsCiAgICAidHlwZSIgOiBbICJudWxsIiwgImludCIgXSwKICAgICJpbnB1dEJpbmRpbmciIDogewogICAgICAicHJlZml4IiA6ICItaW9idWYiLAogICAgICAic2JnOmNtZEluY2x1ZGUiIDogdHJ1ZSwKICAgICAgInNlcGFyYXRlIiA6IHRydWUKICAgIH0sCiAgICAiZGVzY3JpcHRpb24iIDogIlNwZWNpZnkgYW1vdW50IG9mIG1lbW9yeSB0byB1c2UgZm9yIGlucHV0IGJ1ZmZlci4gVGFrZXMgYW4gaW50ZWdlciBhcmd1bWVudC4gT3B0aW9uYWwgc3VmZml4ZXMgSy9NL0cgc3VwcG9ydGVkLiBOb3RlOiBjdXJyZW50bHkgaGFzIG5vIGVmZmVjdCB3aXRoIGNvbXByZXNzZWQgZmlsZXMuIiwKICAgICJzYmc6Y2F0ZWdvcnkiIDogIkV4ZWN1dGlvbiIsCiAgICAibGFiZWwiIDogIklucHV0IGJ1ZmZlciBzaXplIgogIH0sIHsKICAgICJpZCIgOiAiI2hlYWRlciIsCiAgICAidHlwZSIgOiBbICJudWxsIiwgImJvb2xlYW4iIF0sCiAgICAiaW5wdXRCaW5kaW5nIiA6IHsKICAgICAgInByZWZpeCIgOiAiLWhlYWRlciIsCiAgICAgICJzYmc6Y21kSW5jbHVkZSIgOiB0cnVlLAogICAgICAic2VwYXJhdGUiIDogZmFsc2UKICAgIH0sCiAgICAiZGVzY3JpcHRpb24iIDogIlByaW50IHRoZSBoZWFkZXIgZnJvbSB0aGUgQSBmaWxlIHByaW9yIHRvIHJlc3VsdHMuIiwKICAgICJzYmc6Y2F0ZWdvcnkiIDogIkV4ZWN1dGlvbiIsCiAgICAibGFiZWwiIDogIkhlYWRlciIKICB9LCB7CiAgICAiaWQiIDogIiNnZW5vbWVfZmlsZSIsCiAgICAidHlwZSIgOiBbICJudWxsIiwgIkZpbGUiIF0sCiAgICAiaW5wdXRCaW5kaW5nIiA6IHsKICAgICAgInByZWZpeCIgOiAiLWciLAogICAgICAic2JnOmNtZEluY2x1ZGUiIDogdHJ1ZSwKICAgICAgInNlcGFyYXRlIiA6IHRydWUKICAgIH0sCiAgICAiZGVzY3JpcHRpb24iIDogIlByb3ZpZGUgYSBnZW5vbWUgZmlsZSB0byBlbmZvcmNlIGNvbnNpc3RlbnQgY2hyb21vc29tZSBzb3J0IG9yZGVyIGFjcm9zcyBpbnB1dCBmaWxlcy4gT25seSBhcHBsaWVzIHdoZW4gdXNlZCB3aXRoIC1zb3J0ZWQgb3B0aW9uLiIsCiAgICAic2JnOmNhdGVnb3J5IiA6ICJFeGVjdXRpb24iLAogICAgImxhYmVsIiA6ICJHZW5vbWUgZmlsZSIsCiAgICAic2JnOmZpbGVUeXBlcyIgOiAiVFhUIiwKICAgICJyZXF1aXJlZCIgOiBmYWxzZQogIH0sIHsKICAgICJpZCIgOiAiI2ZyYWN0aW9uX2IiLAogICAgInR5cGUiIDogWyAibnVsbCIsICJmbG9hdCIgXSwKICAgICJpbnB1dEJpbmRpbmciIDogewogICAgICAicHJlZml4IiA6ICItRiIsCiAgICAgICJzYmc6Y21kSW5jbHVkZSIgOiB0cnVlLAogICAgICAic2VwYXJhdGUiIDogdHJ1ZQogICAgfSwKICAgICJkZXNjcmlwdGlvbiIgOiAiTWluaW11bSBvdmVybGFwIHJlcXVpcmVkIGFzIGEgZnJhY3Rpb24gb2YgQi4gRGVmYXVsdCBpcyAxRS05IChpLmUuLCAxYnApLiIsCiAgICAic2JnOmNhdGVnb3J5IiA6ICJFeGVjdXRpb24iLAogICAgImxhYmVsIiA6ICJGcmFjdGlvbiBvZiBCIgogIH0sIHsKICAgICJpZCIgOiAiI2ZyYWN0aW9uX2EiLAogICAgInR5cGUiIDogWyAibnVsbCIsICJmbG9hdCIgXSwKICAgICJpbnB1dEJpbmRpbmciIDogewogICAgICAicHJlZml4IiA6ICItZiIsCiAgICAgICJzYmc6Y21kSW5jbHVkZSIgOiB0cnVlLAogICAgICAic2VwYXJhdGUiIDogdHJ1ZQogICAgfSwKICAgICJkZXNjcmlwdGlvbiIgOiAiTWluaW11bSBvdmVybGFwIHJlcXVpcmVkIGFzIGEgZnJhY3Rpb24gb2YgQS4gRGVmYXVsdCBpcyAxRS05IChpLmUuIDFicCkuIiwKICAgICJzYmc6Y2F0ZWdvcnkiIDogIkV4ZWN1dGlvbiIsCiAgICAibGFiZWwiIDogIkZyYWN0aW9uIG9mIEEiCiAgfSwgewogICAgImlkIiA6ICIjZGlzYWJsZV9idWZfb3V0IiwKICAgICJ0eXBlIiA6IFsgIm51bGwiLCAiYm9vbGVhbiIgXSwKICAgICJpbnB1dEJpbmRpbmciIDogewogICAgICAicHJlZml4IiA6ICItbm9idWYiLAogICAgICAic2JnOmNtZEluY2x1ZGUiIDogdHJ1ZSwKICAgICAgInNlcGFyYXRlIiA6IGZhbHNlCiAgICB9LAogICAgImRlc2NyaXB0aW9uIiA6ICJEaXNhYmxlIGJ1ZmZlcmVkIG91dHB1dC4gVXNpbmcgdGhpcyBvcHRpb24gd2lsbCBjYXVzZSBlYWNoIGxpbmUgb2Ygb3V0cHV0IHRvIGJlIHByaW50ZWQgYXMgaXQgaXMgZ2VuZXJhdGVkLCByYXRoZXIgdGhhbiBzYXZlZCBpbiBhIGJ1ZmZlci4gVGhpcyB3aWxsIG1ha2UgcHJpbnRpbmcgbGFyZ2Ugb3V0cHV0IGZpbGVzIG5vdGljZWFibHkgc2xvd2VyLCBidXQgY2FuIGJlIHVzZWZ1bCBpbiBjb25qdW5jdGlvbiB3aXRoIG90aGVyIHNvZnR3YXJlIHRvb2xzIGFuZCBzY3JpcHRzIHRoYXQgbmVlZCB0byBwcm9jZXNzIG9uZSBsaW5lIG9mIGJlZHRvb2xzIG91dHB1dCBhdCBhIHRpbWUuIiwKICAgICJzYmc6Y2F0ZWdvcnkiIDogIkV4ZWN1dGlvbiIsCiAgICAibGFiZWwiIDogIkRpc2FibGUgYnVmZmVyZWQgb3V0cHV0IgogIH0gXSwKICAib3V0cHV0cyIgOiBbIHsKICAgICJpZCIgOiAiI291dHB1dF9maWxlIiwKICAgICJ0eXBlIiA6IFsgIkZpbGUiIF0sCiAgICAib3V0cHV0QmluZGluZyIgOiB7CiAgICAgICJnbG9iIiA6IHsKICAgICAgICAiY2xhc3MiIDogIkV4cHJlc3Npb24iLAogICAgICAgICJlbmdpbmUiIDogIiNjd2wtanMtZW5naW5lIiwKICAgICAgICAic2NyaXB0IiA6ICJ7IFxuICBpbnB1dHMgPSBbXS5jb25jYXQoJGpvYi5pbnB1dHMuaW5wdXRfZmlsZXNfYSlcbiBcbiAgXG4gIC8vZmlsZUEgPSBbXS5jb25jYXQoJGpvYi5pbnB1dHMuaW5wdXRfZmlsZXNfYSlbMF1cbiAgZmlsZUIgPSBbXS5jb25jYXQoJGpvYi5pbnB1dHMuaW5wdXRfZmlsZXNfYilbMF1cbiAgXG4gIGlmKCEkam9iLmlucHV0cy5pbnB1dF9maWxlc19iKXtcbiAgICByZXR1cm4gXCJcIlxuICB9XG4gIFxuICBmb3IgKGkgPSAwOyBpIDwgaW5wdXRzLmxlbmd0aDsgaSsrKVxuICAgIGlmKGlucHV0c1tpXSl7XG4gIFx0ZmlsZUEgPSBpbnB1dHNbaV1cbiAgICB9XG4gIFxuIFxuICBmaWxlcGF0aCA9IGZpbGVBLnBhdGhcbiAgZmlsZW5hbWUgPSBmaWxlcGF0aC5zcGxpdChcIi9cIikucG9wKClcbiAgYmFzZW5hbWUgPSBmaWxlbmFtZS5zdWJzdHIoMCxmaWxlbmFtZS5sYXN0SW5kZXhPZihcIi5cIikpXG4gIFxuICBpZihmaWxlbmFtZS5zcGxpdCgnLicpLnBvcCgpID09ICdneicpe1xuICAgIGJhc2VuYW1lID0gZmlsZW5hbWUuc3BsaXQoJy4nKS5zaGlmdCgpXG4gIH1cbiAgXG4gIFxuICBmaWxlX2RvdF9zZXAgPSBmaWxlbmFtZS5zcGxpdChcIi5cIilcbiAgZmlsZV9leHQgPSBmaWxlX2RvdF9zZXBbZmlsZV9kb3Rfc2VwLmxlbmd0aC0xXVxuICBpZihmaWxlX2V4dCA9PSAnZ3onKXtcbiAgICBmaWxlX2V4dCA9IGZpbGVfZG90X3NlcFtmaWxlX2RvdF9zZXAubGVuZ3RoLTJdXG4gIH1cbiAgXG4gIHN1Zml4X2V4dCA9IGZpbGVfZXh0XG4gIFxuICBpZiAoJGpvYi5pbnB1dHMub3V0cHV0X2JlZCAmJiAoZmlsZV9leHQgPT0gJ2JhbScpKSBzdWZpeF9leHQgPSBcImJlZFwiXG4gIFxuICBiYXNlbmFtZTEgPSBiYXNlbmFtZVxuICBmaWxlcGF0aCA9IGZpbGVBLnBhdGhcbiAgZmlsZW5hbWUgPSBmaWxlcGF0aC5zcGxpdChcIi9cIikucG9wKClcbiAgYmFzZW5hbWUyID0gZmlsZW5hbWUuc3Vic3RyKDAsZmlsZW5hbWUubGFzdEluZGV4T2YoXCIuXCIpKVxuICBcbiAgaWYgKCRqb2IuaW5wdXRzLmlucHV0X2ZpbGVzX2IubGVuZ3RoID4gMSkge1xuICAgIG5ld19maWxlbmFtZSA9IGJhc2VuYW1lMSArIFwiLm11bHRpX2ludGVyc2VjdC5cIiArIHN1Zml4X2V4dFxuICB9IGVsc2Uge1xuICAgIG5ld19maWxlbmFtZSA9IGJhc2VuYW1lMSArIFwiLmJsYWNrbGlzdGVkLlwiICsgc3VmaXhfZXh0XG4gIH1cbiAgICBcbiAgcmV0dXJuIG5ld19maWxlbmFtZTtcbn0iCiAgICAgIH0sCiAgICAgICJzYmc6aW5oZXJpdE1ldGFkYXRhRnJvbSIgOiAiI2lucHV0X2ZpbGVfYSIKICAgIH0sCiAgICAiZGVzY3JpcHRpb24iIDogIkFmdGVyIGVhY2ggZW50cnkgaW4gQSwgcmVwb3J0czogMSkgVGhlIG51bWJlciBvZiBmZWF0dXJlcyBpbiBCIHRoYXQgb3ZlcmxhcHBlZCB0aGUgQSBpbnRlcnZhbC4gMikgVGhlIG51bWJlciBvZiBiYXNlcyBpbiBBIHRoYXQgaGFkIG5vbi16ZXJvIGNvdmVyYWdlLiAzKSBUaGUgbGVuZ3RoIG9mIHRoZSBlbnRyeSBpbiBBLiA0KSBUaGUgZnJhY3Rpb24gb2YgYmFzZXMgaW4gQSB0aGF0IGhhZCBub24temVybyBjb3ZlcmFnZS4iLAogICAgImxhYmVsIiA6ICJPdXRwdXQgcmVzdWx0IGZpbGUiLAogICAgInNiZzpmaWxlVHlwZXMiIDogIkJBTSwgQkVELCBHRkYsIFZDRiIKICB9IF0sCiAgImhpbnRzIiA6IFsgewogICAgImNsYXNzIiA6ICJEb2NrZXJSZXF1aXJlbWVudCIsCiAgICAiZG9ja2VyUHVsbCIgOiAiaW1hZ2VzLnNiZ2Vub21pY3MuY29tL3RoZWR6by9iZWR0b29sczoyLjI1LjAiLAogICAgImRvY2tlckltYWdlSWQiIDogImFkMjA0M2I5MDJhMiIKICB9LCB7CiAgICAiY2xhc3MiIDogInNiZzpDUFVSZXF1aXJlbWVudCIsCiAgICAidmFsdWUiIDogMQogIH0sIHsKICAgICJjbGFzcyIgOiAic2JnOk1lbVJlcXVpcmVtZW50IiwKICAgICJ2YWx1ZSIgOiAxMDAwCiAgfSBdLAogICJyZXF1aXJlbWVudHMiIDogWyB7CiAgICAiY2xhc3MiIDogIkV4cHJlc3Npb25FbmdpbmVSZXF1aXJlbWVudCIsCiAgICAicmVxdWlyZW1lbnRzIiA6IFsgewogICAgICAiY2xhc3MiIDogIkRvY2tlclJlcXVpcmVtZW50IiwKICAgICAgImRvY2tlclB1bGwiIDogInJhYml4L2pzLWVuZ2luZSIKICAgIH0gXSwKICAgICJpZCIgOiAiI2N3bC1qcy1lbmdpbmUiCiAgfSBdLAogICJzdWNjZXNzQ29kZXMiIDogWyBdLAogICJzdGRpbiIgOiAiIiwKICAic3Rkb3V0IiA6IHsKICAgICJjbGFzcyIgOiAiRXhwcmVzc2lvbiIsCiAgICAiZW5naW5lIiA6ICIjY3dsLWpzLWVuZ2luZSIsCiAgICAic2NyaXB0IiA6ICJ7XG4gIGlmKFtdLmNvbmNhdCgkam9iLmlucHV0cy5pbnB1dF9maWxlc19iKVswXSl7XG4gICAgZmlsZUIgPSBbXS5jb25jYXQoJGpvYi5pbnB1dHMuaW5wdXRfZmlsZXNfYilbMF1cbiAgfVxuICBcbiAgaW5wdXRzID0gW10uY29uY2F0KCRqb2IuaW5wdXRzLmlucHV0X2ZpbGVzX2EpXG4gIFxuICBmb3IgKGkgPSAwOyBpIDwgaW5wdXRzLmxlbmd0aDsgaSsrKVxuICAgIGlmKGlucHV0c1tpXSl7XG4gIFx0ZmlsZUEgPSBpbnB1dHNbaV1cbiAgICB9XG4gIC8vZmlsZUEgPSBbXS5jb25jYXQoJGpvYi5pbnB1dHMuaW5wdXRfZmlsZXNfYSlbMF1cbiAgXG4gIFxuICBmaWxlcGF0aCA9IGZpbGVBLnBhdGhcbiAgZmlsZW5hbWUgPSBmaWxlcGF0aC5zcGxpdChcIi9cIikucG9wKClcbiAgYmFzZW5hbWUgPSBmaWxlbmFtZS5zdWJzdHIoMCxmaWxlbmFtZS5sYXN0SW5kZXhPZihcIi5cIikpXG4gIFxuICBpZihmaWxlbmFtZS5zcGxpdCgnLicpLnBvcCgpID09ICdneicpe1xuICAgIGJhc2VuYW1lID0gZmlsZW5hbWUuc3BsaXQoJy4nKS5zaGlmdCgpXG4gIH1cbiAgXG4gIFxuICBmaWxlX2RvdF9zZXAgPSBmaWxlbmFtZS5zcGxpdChcIi5cIilcbiAgZmlsZV9leHQgPSBmaWxlX2RvdF9zZXBbZmlsZV9kb3Rfc2VwLmxlbmd0aC0xXVxuICBpZihmaWxlX2V4dCA9PSAnZ3onKXtcbiAgICBmaWxlX2V4dCA9IGZpbGVfZG90X3NlcFtmaWxlX2RvdF9zZXAubGVuZ3RoLTJdXG4gIH1cbiAgXG4gIHN1Zml4X2V4dCA9IGZpbGVfZXh0XG4gIFxuICBpZiAoJGpvYi5pbnB1dHMub3V0cHV0X2JlZCAmJiAoZmlsZV9leHQgPT0gJ2JhbScpKSBzdWZpeF9leHQgPSBcImJlZFwiXG4gIFxuICBiYXNlbmFtZTEgPSBiYXNlbmFtZVxuICBmaWxlcGF0aCA9IGZpbGVBLnBhdGhcbiAgZmlsZW5hbWUgPSBmaWxlcGF0aC5zcGxpdChcIi9cIikucG9wKClcbiAgYmFzZW5hbWUyID0gZmlsZW5hbWUuc3Vic3RyKDAsZmlsZW5hbWUubGFzdEluZGV4T2YoXCIuXCIpKVxuICBcbiAgaWYgKCgkam9iLmlucHV0cy5pbnB1dF9maWxlc19iKSAmJiAoJGpvYi5pbnB1dHMuaW5wdXRfZmlsZXNfYi5sZW5ndGggPiAxKSkge1xuICAgIG5ld19maWxlbmFtZSA9IGJhc2VuYW1lMSArIFwiLm11bHRpX2ludGVyc2VjdC5cIiArIHN1Zml4X2V4dFxuICB9IGVsc2Uge1xuICAgIG5ld19maWxlbmFtZSA9IGJhc2VuYW1lMSArIFwiLmJsYWNrbGlzdGVkLlwiICsgc3VmaXhfZXh0XG4gIH1cbiAgXG4gIHJldHVybiBuZXdfZmlsZW5hbWU7XG59IgogIH0sCiAgImJhc2VDb21tYW5kIiA6IFsgImJlZHRvb2xzIiwgImludGVyc2VjdCIgXSwKICAiYXJndW1lbnRzIiA6IFsgewogICAgInBvc2l0aW9uIiA6IDk5LAogICAgInNlcGFyYXRlIiA6IHRydWUsCiAgICAidmFsdWVGcm9tIiA6IHsKICAgICAgImNsYXNzIiA6ICJFeHByZXNzaW9uIiwKICAgICAgImVuZ2luZSIgOiAiI2N3bC1qcy1lbmdpbmUiLAogICAgICAic2NyaXB0IiA6ICJ7XG4gIGlucHV0cyA9IFtdLmNvbmNhdCgkam9iLmlucHV0cy5pbnB1dF9maWxlc19hKVxuICBcbiAgZm9yIChpID0gMDsgaSA8IGlucHV0cy5sZW5ndGg7IGkrKylcbiAgICBpZihpbnB1dHNbaV0pe1xuICBcdGZpbGVBID0gaW5wdXRzW2ldXG4gICAgfVxuICBmaWxlcGF0aCA9IGZpbGVBLnBhdGhcbiAgZmlsZW5hbWUgPSBmaWxlcGF0aC5zcGxpdChcIi9cIikucG9wKClcbiAgYmFzZW5hbWUgPSBmaWxlbmFtZS5zdWJzdHIoMCxmaWxlbmFtZS5sYXN0SW5kZXhPZihcIi5cIikpXG4gIFxuICBmaWxlX2RvdF9zZXAgPSBmaWxlbmFtZS5zcGxpdChcIi5cIilcbiAgZmlsZV9leHQgPSBmaWxlX2RvdF9zZXBbZmlsZV9kb3Rfc2VwLmxlbmd0aC0xXVxuICBcbiAgc3VmaXhfZXh0ID0gZmlsZV9leHRcbiAgaWYgKGZpbGVfZXh0ID09IFwiYmFtXCIpIHtyZXR1cm4gXCItYWJhbSBcIiArIGZpbGVwYXRofVxuICBlbHNlIHtyZXR1cm4gXCItYSBcIiArIGZpbGVwYXRofSBcblxuICAgICB9IgogICAgfQogIH0sIHsKICAgICJwb3NpdGlvbiIgOiAxMDAsCiAgICAic2VwYXJhdGUiIDogdHJ1ZSwKICAgICJ2YWx1ZUZyb20iIDogewogICAgICAiY2xhc3MiIDogIkV4cHJlc3Npb24iLAogICAgICAiZW5naW5lIiA6ICIjY3dsLWpzLWVuZ2luZSIsCiAgICAgICJzY3JpcHQiIDogIntcbiAgaWYoW10uY29uY2F0KCRqb2IuaW5wdXRzLmlucHV0X2ZpbGVzX2IpWzBdKXtcbiAgZmlsZUIgPSBbXS5jb25jYXQoJGpvYi5pbnB1dHMuaW5wdXRfZmlsZXNfYilbMF1cbiAgXG4gIGZpbGVwYXRoID0gZmlsZUIucGF0aFxuICByZXR1cm4gXCItYiBcIiArIGZpbGVwYXRoXG4gIH1cbn0iCiAgICB9CiAgfSwgewogICAgInBvc2l0aW9uIiA6IDEwMSwKICAgICJzZXBhcmF0ZSIgOiB0cnVlLAogICAgInZhbHVlRnJvbSIgOiAiLXYiCiAgfSBdLAogICJzYmc6cmV2aXNpb24iIDogMSwKICAic2JnOmNhdGVnb3JpZXMiIDogWyAiQkVELVByb2Nlc3NpbmciIF0sCiAgImRlc2NyaXB0aW9uIiA6ICJCRURUb29scyBpbnRlcnNlY3QgcmVwb3J0cyB0aGUgb3ZlcmxhcCBiZXR3ZWVuIG11bHRpcGxlIGZlYXR1cmUgZmlsZXMuXG5cblRoZSBtb3N0IGNvbW1vbiBxdWVzdGlvbiBhc2tlZCBvZiB0d28gc2V0cyBvZiBnZW5vbWljIGZlYXR1cmVzIGlzIHdoZXRoZXIgb3Igbm90IGFueSBvZiB0aGUgZmVhdHVyZXMgaW4gdGhlIHR3byBzZXRzIOKAnG92ZXJsYXDigJ0gd2l0aCBvbmUgYW5vdGhlci4gVGhpcyBpcyBrbm93biBhcyBmZWF0dXJlIGludGVyc2VjdGlvbi4gQkVEVG9vbHMgaW50ZXJzZWN0IHNjcmVlbnMgZm9yIG92ZXJsYXBzIGJldHdlZW4gdHdvIHNldHMgb2YgZ2Vub21pYyBmZWF0dXJlcy4gTW9yZW92ZXIsIGl0IGFsbG93cyB0aGUgdXNlciB0byBoYXZlIGZpbmUgY29udHJvbCBvdmVyIGhvdyB0aGUgaW50ZXJzZWN0aW9ucyBhcmUgcmVwb3J0ZWQuIEJFRFRvb2xzIGludGVyc2VjdCBhbGxvd3MgYm90aCBCRUQvR0ZGL1ZDRiBhbmQgQkFNIGZpbGVzIGFzIGlucHV0cy5cblxuV2hlbiB5b3UgYXJlIHVzaW5nIEJlZHRvb2xzIGludGVyc2VjdCwgeW91IGNhbiBjaG9vc2UgdGhlIGNvbXByZXNzIGxldmVsIG9mIGJhbSwgb3Igb3V0cHV0IGJlZCBmaWxlcy4gVGhlIHRpbWUgYW5kIHN0b3JhZ2Ugd291bGQgYmUgcXVpdCBkaWZmZXJlbnQuIEFsbCBJbnB1dCA9IDZHQiBiYW0gZmlsZTpcblxuKiBPdXRwdXQgY29tcHJlc3NlZCBiYW0gZmlsZSAoLXViYW09ZmFsc2UsIGVxdWFsIHRvIGJ3YSdzIGNvbXByZXNzIGxldmVsPTEsIG1vc3QgY29tcHJlc3NlZCk6IG91dHB1dCBiYW09NS42R2IsIER1cmF0aW9uOiAxOCBtaW51dGVzXG4qIE91dHB1dCB1bmNvbXByZXNzZWQgYmFtIGZpbGUgKC11YmFtPXRydWUsIGVxdWFsIHRvIGJ3YSdzIGNvbXByZXNzIGxldmVsPTksIGxlYXN0IGNvbXByZXNzZWQpOiBvdXRwdXQgYmFtPTMwLjJHYiwgRHVyYXRpb246IDE3IG1pbnV0ZXNcbiogT3V0cHV0IGJlZCBmaWxlICgtYmVkPXRydWUpOiBvdXRwdXQgYmVkPTkuMkdiLCBEdXJhdGlvbjogMTAgbWludXRlcyIsCiAgInNiZzpjcmVhdGVkT24iIDogMTQ5OTg1MTA1NiwKICAic2JnOnRvb2xraXQiIDogIkJFRFRvb2xzIiwKICAic2JnOmNvbnRyaWJ1dG9ycyIgOiBbICJuZW1hbmphLnZ1Y2ljIiBdLAogICJzYmc6aWQiIDogImFkbWluL3NiZy1wdWJsaWMtZGF0YS9jaGlwLXNlcS1iZWR0b29scy1pbnRlcnNlY3QvMSIsCiAgInNiZzpqb2IiIDogewogICAgImFsbG9jYXRlZFJlc291cmNlcyIgOiB7CiAgICAgICJjcHUiIDogMSwKICAgICAgIm1lbSIgOiAxMDAwCiAgICB9LAogICAgImlucHV0cyIgOiB7CiAgICAgICJkaXNhYmxlX2J1Zl9vdXQiIDogZmFsc2UsCiAgICAgICJmcmFjdGlvbl9hIiA6IG51bGwsCiAgICAgICJmcmFjdGlvbl9iIiA6IG51bGwsCiAgICAgICJoZWFkZXIiIDogZmFsc2UsCiAgICAgICJpbnB1dF9idWZfc2l6ZSIgOiBudWxsLAogICAgICAiaW5wdXRfZmlsZV9iIiA6IHsKICAgICAgICAiY2xhc3MiIDogIkZpbGUiLAogICAgICAgICJwYXRoIiA6ICJpbnB1dF9maWxlX2IuYmVkIiwKICAgICAgICAic2Vjb25kYXJ5RmlsZXMiIDogWyBdLAogICAgICAgICJzaXplIiA6IDAKICAgICAgfSwKICAgICAgImlucHV0X2ZpbGVzX2EiIDogWyB7CiAgICAgICAgImNsYXNzIiA6ICJGaWxlIiwKICAgICAgICAicGF0aCIgOiAiL3BhdGgvdG8vaW5wdXRfZmlsZS1hLm5hcnJvd1BlYWtzIiwKICAgICAgICAic2Vjb25kYXJ5RmlsZXMiIDogWyBdLAogICAgICAgICJzaXplIiA6IDAKICAgICAgfSBdLAogICAgICAiaW5wdXRfZmlsZXNfYiIgOiB7CiAgICAgICAgImNsYXNzIiA6ICJGaWxlIiwKICAgICAgICAicGF0aCIgOiAiL3BhdGgvdG8vYmxhY2tsaXN0X2ZpbGUiLAogICAgICAgICJzZWNvbmRhcnlGaWxlcyIgOiBbIF0sCiAgICAgICAgInNpemUiIDogMAogICAgICB9LAogICAgICAibGVmdF9vdXRlcl9qb2luIiA6IGZhbHNlLAogICAgICAibmFtZXNfYWxpYXMiIDogIiIsCiAgICAgICJub25hbWVjaGVjayIgOiBmYWxzZSwKICAgICAgIm91dHB1dF9iZWQiIDogZmFsc2UsCiAgICAgICJyZXFfZnJhY19vdmVybGFwIiA6IGZhbHNlLAogICAgICAicmVxX21pbl9mcmFjIiA6IGZhbHNlLAogICAgICAic2hvd19maWxlbmFtZXMiIDogIiIsCiAgICAgICJzb3J0X291dHB1dF9kYiIgOiBmYWxzZSwKICAgICAgInNvcnRlZCIgOiBmYWxzZSwKICAgICAgInNwbGl0IiA6ICIiLAogICAgICAic3RyYW5kX2RpZmYiIDogZmFsc2UsCiAgICAgICJzdHJhbmRfc2FtZSIgOiBmYWxzZSwKICAgICAgInVuY29tcHJlc3NlZF9iYW1fb3V0cHV0IiA6IGZhbHNlLAogICAgICAid3JpdGVfaW5fYSIgOiBmYWxzZSwKICAgICAgIndyaXRlX2luX2IiIDogZmFsc2UsCiAgICAgICJ3cml0ZV9ub19vdmVybGFwX2IiIDogZmFsc2UsCiAgICAgICJ3cml0ZV9vcmlnaW5hbF9hIiA6IGZhbHNlLAogICAgICAid3JpdGVfb3ZlbGFwX2IiIDogZmFsc2UsCiAgICAgICJ3cml0ZV9vdmVybGFwIiA6IGZhbHNlLAogICAgICAid3JpdGVfb3ZlcmxhcF9hZGRpdGlvbmFsIiA6IGZhbHNlCiAgICB9CiAgfSwKICAic2JnOnNiZ01haW50YWluZWQiIDogZmFsc2UsCiAgInRlbXBvcmFyeUZhaWxDb2RlcyIgOiBbIF0sCiAgInNiZzpsaW5rcyIgOiBbIHsKICAgICJpZCIgOiAiaHR0cDovL2JlZHRvb2xzLnJlYWR0aGVkb2NzLm9yZy8iLAogICAgImxhYmVsIiA6ICJIb21lcGFnZSIKICB9LCB7CiAgICAiaWQiIDogImh0dHBzOi8vZ2l0aHViLmNvbS9hcnE1eC9iZWR0b29sczIiLAogICAgImxhYmVsIiA6ICJTb3VyY2UgY29kZSIKICB9LCB7CiAgICAiaWQiIDogImh0dHA6Ly9iaW9pbmZvcm1hdGljcy5veGZvcmRqb3VybmFscy5vcmcvY29udGVudC8yNi82Lzg0MSIsCiAgICAibGFiZWwiIDogIlB1YmxpY2F0aW9uIgogIH0sIHsKICAgICJpZCIgOiAiaHR0cHM6Ly9tZWRpYS5yZWFkdGhlZG9jcy5vcmcvcGRmL2JlZHRvb2xzL2xhdGVzdC9iZWR0b29scy5wZGYiLAogICAgImxhYmVsIiA6ICJEb2N1bWVudGF0aW9uIgogIH0sIHsKICAgICJpZCIgOiAiaHR0cHM6Ly9naXRodWIuY29tL2FycTV4L2JlZHRvb2xzMi9yZWxlYXNlcy9kb3dubG9hZC92Mi4yNS4wL2JlZHRvb2xzLTIuMjUuMC50YXIuZ3oiLAogICAgImxhYmVsIiA6ICJEb3dubG9hZCIKICB9LCB7CiAgICAiaWQiIDogImh0dHA6Ly9zZXFhbnN3ZXJzLmNvbS93aWtpL0JFRFRvb2xzIiwKICAgICJsYWJlbCIgOiAiV2lraSIKICB9IF0sCiAgInNiZzp0b29sQXV0aG9yIiA6ICJBYXJvbiBSLiBRdWlubGFuICYgTmVpbCBLaW5kbG9uIiwKICAiaWQiIDogIm5lbWFuamEudnVjaWMvY2hpcC1zZXEtYndhLWFsaWdubWVudC1hbmQtcGVhay1jYWxsaW5nLWRlbW8vY2hpcC1zZXEtYmVkdG9vbHMtaW50ZXJzZWN0LzEiLAogICJjbGFzcyIgOiAiQ29tbWFuZExpbmVUb29sIiwKICAic2JnOnByb2plY3QiIDogIm5lbWFuamEudnVjaWMvY2hpcC1zZXEtYndhLWFsaWdubWVudC1hbmQtcGVhay1jYWxsaW5nLWRlbW8iLAogICJzYmc6bW9kaWZpZWRPbiIgOiAxNDk5ODUxMDgwLAogICJzYmc6cHJvamVjdE5hbWUiIDogIkNoSVAtc2VxIEJXQSBBbGlnbm1lbnQgYW5kIFBlYWsgQ2FsbGluZyBEZW1vIiwKICAic2JnOmNtZFByZXZpZXciIDogImJlZHRvb2xzIGludGVyc2VjdCAgLWEgL3BhdGgvdG8vaW5wdXRfZmlsZS1hLm5hcnJvd1BlYWtzICAtYiAvcGF0aC90by9ibGFja2xpc3RfZmlsZSAgLXYgPiBpbnB1dF9maWxlLWEuYmxhY2tsaXN0ZWQubmFycm93UGVha3MiLAogICJzYmc6bGljZW5zZSIgOiAiR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgdjIuMCBvbmx5IiwKICAibGFiZWwiIDogIkNoSVAtc2VxIEJFRFRvb2xzIGludGVyc2VjdCIsCiAgInNiZzptb2RpZmllZEJ5IiA6ICJuZW1hbmphLnZ1Y2ljIiwKICAic2JnOmFwcFZlcnNpb24iIDogWyAic2JnOmRyYWZ0LTIiIF0sCiAgInNiZzpsYXRlc3RSZXZpc2lvbiIgOiAxLAogICJzYmc6Y3JlYXRlZEJ5IiA6ICJuZW1hbmphLnZ1Y2ljIiwKICAieCIgOiAyMjQ3LjUwMTA2NTg3MDE2NDQsCiAgInkiIDogNTczLjMzMzY0MDk0NjI5MzUsCiAgInNiZzppbWFnZV91cmwiIDogbnVsbCwKICAic2JnOnJldmlzaW9uc0luZm8iIDogWyB7CiAgICAic2JnOm1vZGlmaWVkQnkiIDogIm5lbWFuamEudnVjaWMiLAogICAgInNiZzptb2RpZmllZE9uIiA6IDE0OTk4NTEwNTYsCiAgICAic2JnOnJldmlzaW9uIiA6IDAsCiAgICAic2JnOnJldmlzaW9uTm90ZXMiIDogbnVsbAogIH0sIHsKICAgICJzYmc6bW9kaWZpZWRCeSIgOiAibmVtYW5qYS52dWNpYyIsCiAgICAic2JnOm1vZGlmaWVkT24iIDogMTQ5OTg1MTA4MCwKICAgICJzYmc6cmV2aXNpb24iIDogMSwKICAgICJzYmc6cmV2aXNpb25Ob3RlcyIgOiBudWxsCiAgfSBdLAogICJzYmc6dG9vbGtpdFZlcnNpb24iIDogIjIuMjUuMCIsCiAgInNiZzp2YWxpZGF0aW9uRXJyb3JzIiA6IFsgXQp9",
  "status" : "COMPLETED",
  "inputs" : {
    "input_files_a" : [ {
      "size" : 2039719,
      "path" : "/media/storage2/workdir/LocalRerun20170816123552/app-2017-08-16-130232.236/root/MACS2/NRSF_K562_benchmark_rep1_peaks.narrowPeak",
      "location" : "/media/storage2/workdir/LocalRerun20170816123552/app-2017-08-16-130232.236/root/MACS2/NRSF_K562_benchmark_rep1_peaks.narrowPeak",
      "name" : "NRSF_K562_benchmark_rep1_peaks.narrowPeak",
      "checksum" : "sha1$9a2b75fa64186867854ee88dd47ad531d3900e37",
      "secondaryFiles" : [ ],
      "properties" : {
        "sbg:metadata" : null
      },
      "$type" : "File"
    } ],
    "input_files_b" : [ {
      "size" : 310,
      "path" : "/media/storage2/workdir/LocalRerun20170816123552/files/hg38.blacklist.bed.gz",
      "location" : "/media/storage2/workdir/LocalRerun20170816123552/files/hg38.blacklist.bed.gz",
      "name" : "hg38.blacklist.bed.gz",
      "checksum" : "sha1$bb2e3144e042e485326742607ba57e818546a81a",
      "secondaryFiles" : [ ],
      "properties" : {
        "sbg:metadata" : {
          "reference_genome" : "hg38",
          "species" : "Homo sapiens"
        }
      },
      "$type" : "File"
    } ]
  },
  "outputs" : {
    "output_file" : {
      "size" : 2039719,
      "path" : "/media/storage2/workdir/LocalRerun20170816123552/app-2017-08-16-130232.236/root/ChIP_seq_BEDTools_intersect_1/NRSF_K562_benchmark_rep1_peaks.blacklisted.narrowPeak",
      "location" : "/media/storage2/workdir/LocalRerun20170816123552/app-2017-08-16-130232.236/root/ChIP_seq_BEDTools_intersect_1/NRSF_K562_benchmark_rep1_peaks.blacklisted.narrowPeak",
      "name" : "NRSF_K562_benchmark_rep1_peaks.blacklisted.narrowPeak",
      "checksum" : "sha1$9a2b75fa64186867854ee88dd47ad531d3900e37",
      "secondaryFiles" : [ ],
      "properties" : {
        "sbg:metadata" : null
      },
      "$type" : "File"
    }
  },
  "resources" : {
    "cpu" : 32,
    "memMB" : 46967,
    "diskSpaceMB" : null,
    "networkAccess" : true,
    "workingDir" : null,
    "tmpDir" : null,
    "outDirSize" : null,
    "tmpDirSize" : null
  },
  "visiblePorts" : [ "output_file" ]
}