{
  "id" : "4ccd674c-70df-4eab-bcdd-fddfea7ef70c",
  "parentId" : "348d55b7-8cd7-4053-809f-d425cbcb0e25",
  "rootId" : "348d55b7-8cd7-4053-809f-d425cbcb0e25",
  "name" : "root.MACS2",
  "app" : "data:text/plain;base64,",
  "status" : "COMPLETED",
  "inputs" : {
    "EXTSIZE" : 100,
    "KEEP_DUPS" : "all",
    "NOMODEL" : true,
    "Organism" : "hs",
    "QVALUE" : "0.05",
    "analysis_type" : "narrow peaks",
    "format" : "AUTO",
    "input_bams" : [ {
      "size" : 336857173,
      "path" : "/media/storage2/workdir/LocalRerun20170816123552/app-2017-08-16-130232.236/root/SBG_Filter_ChIP_seq_BAM_1/1/NRSF_K562_control_rep1.deduped.filter.srt.bam",
      "location" : "/media/storage2/workdir/LocalRerun20170816123552/app-2017-08-16-130232.236/root/SBG_Filter_ChIP_seq_BAM_1/1/NRSF_K562_control_rep1.deduped.filter.srt.bam",
      "name" : "NRSF_K562_control_rep1.deduped.filter.srt.bam",
      "checksum" : "sha1$5a9f8ea67f6c06ce150386b1a4e98210e9333e26",
      "secondaryFiles" : [ ],
      "properties" : {
        "sbg:metadata" : {
          "__inherit__" : "input_bam",
          "case_id" : "1",
          "chip-seq" : "control",
          "sample_id" : "NRSF_K562_control_rep1"
        }
      },
      "$type" : "File"
    }, {
      "size" : 586250713,
      "path" : "/media/storage2/workdir/LocalRerun20170816123552/app-2017-08-16-130232.236/root/SBG_Filter_ChIP_seq_BAM_1/2/NRSF_K562_benchmark_rep1.deduped.filter.srt.bam",
      "location" : "/media/storage2/workdir/LocalRerun20170816123552/app-2017-08-16-130232.236/root/SBG_Filter_ChIP_seq_BAM_1/2/NRSF_K562_benchmark_rep1.deduped.filter.srt.bam",
      "name" : "NRSF_K562_benchmark_rep1.deduped.filter.srt.bam",
      "checksum" : "sha1$80ee1aba49713931335118e52622f6320357ff9d",
      "secondaryFiles" : [ ],
      "properties" : {
        "sbg:metadata" : {
          "__inherit__" : "input_bam",
          "case_id" : "1",
          "chip-seq" : "sample",
          "sample_id" : "NRSF_K562_benchmark_rep1"
        }
      },
      "$type" : "File"
    } ]
  },
  "outputs" : {
    "EXCEL_FILE" : {
      "size" : 2263660,
      "path" : "/media/storage2/workdir/LocalRerun20170816123552/app-2017-08-16-130232.236/root/MACS2/NRSF_K562_benchmark_rep1_peaks.xls",
      "location" : "/media/storage2/workdir/LocalRerun20170816123552/app-2017-08-16-130232.236/root/MACS2/NRSF_K562_benchmark_rep1_peaks.xls",
      "name" : "NRSF_K562_benchmark_rep1_peaks.xls",
      "checksum" : "sha1$43152fc06d7eef38565a8631d04567466ef4467b",
      "secondaryFiles" : [ ],
      "properties" : {
        "sbg:metadata" : null
      },
      "$type" : "File"
    },
    "NARROW_PEAK" : {
      "size" : 2039719,
      "path" : "/media/storage2/workdir/LocalRerun20170816123552/app-2017-08-16-130232.236/root/MACS2/NRSF_K562_benchmark_rep1_peaks.narrowPeak",
      "location" : "/media/storage2/workdir/LocalRerun20170816123552/app-2017-08-16-130232.236/root/MACS2/NRSF_K562_benchmark_rep1_peaks.narrowPeak",
      "name" : "NRSF_K562_benchmark_rep1_peaks.narrowPeak",
      "checksum" : "sha1$9a2b75fa64186867854ee88dd47ad531d3900e37",
      "secondaryFiles" : [ ],
      "properties" : {
        "sbg:metadata" : null
      },
      "$type" : "File"
    },
    "SUMMIT_BED_FILE" : {
      "size" : 1477246,
      "path" : "/media/storage2/workdir/LocalRerun20170816123552/app-2017-08-16-130232.236/root/MACS2/NRSF_K562_benchmark_rep1_summits.bed",
      "location" : "/media/storage2/workdir/LocalRerun20170816123552/app-2017-08-16-130232.236/root/MACS2/NRSF_K562_benchmark_rep1_summits.bed",
      "name" : "NRSF_K562_benchmark_rep1_summits.bed",
      "checksum" : "sha1$c5b02cf10f9281cac1694b5a00b13ca6b98ff2b1",
      "secondaryFiles" : [ ],
      "properties" : {
        "sbg:metadata" : null
      },
      "$type" : "File"
    }
  },
  "resources" : {
    "cpu" : 32,
    "memMB" : 46967,
    "diskSpaceMB" : null,
    "networkAccess" : true,
    "workingDir" : null,
    "tmpDir" : null,
    "outDirSize" : null,
    "tmpDirSize" : null
  },
  "visiblePorts" : [ "NARROW_PEAK", "BROAD_PEAK", "Rmodel", "EXCEL_FILE" ]
}