{
  "id" : "0c4501fd-0c17-44a9-81a8-c27f6f77ff96",
  "parentId" : "a5671f19-34f6-4297-9fef-dd4e9f670423",
  "rootId" : "a5671f19-34f6-4297-9fef-dd4e9f670423",
  "name" : "root.STAR_1",
  "app" : "data:text/plain;base64,ewogICJjb250cmlidXRvciIgOiBbIF0sCiAgIm93bmVyIiA6IFsgXSwKICAiY3dsVmVyc2lvbiIgOiAic2JnOmRyYWZ0LTIiLAogICJpbnB1dHMiIDogWyB7CiAgICAiaWQiIDogIiN3aW5GbGFua05iaW5zIiwKICAgICJ0eXBlIiA6IFsgIm51bGwiLCAiaW50IiBdLAogICAgImlucHV0QmluZGluZyIgOiB7CiAgICAgICJwcmVmaXgiIDogIi0td2luRmxhbmtOYmlucyIsCiAgICAgICJzYmc6Y21kSW5jbHVkZSIgOiB0cnVlLAogICAgICAic2VwYXJhdGUiIDogdHJ1ZQogICAgfSwKICAgICJkZXNjcmlwdGlvbiIgOiAiPWxvZzIod2luRmxhbmspLCB3aGVyZSB3aW4gRmxhbmsgaXMgdGhlIHNpemUgb2YgdGhlIGxlZnQgYW5kIHJpZ2h0IGZsYW5raW5nIHJlZ2lvbnMgZm9yIGVhY2ggd2luZG93IChpbnQ+MCkuIiwKICAgICJzYmc6dG9vbERlZmF1bHRWYWx1ZSIgOiAiNCIsCiAgICAic2JnOmNhdGVnb3J5IiA6ICJXaW5kb3dzLCBBbmNob3JzLCBCaW5uaW5nIiwKICAgICJsYWJlbCIgOiAiRmxhbmtpbmcgcmVnaW9ucyBzaXplIgogIH0sIHsKICAgICJpZCIgOiAiI3dpbkJpbk5iaXRzIiwKICAgICJ0eXBlIiA6IFsgIm51bGwiLCAiaW50IiBdLAogICAgImlucHV0QmluZGluZyIgOiB7CiAgICAgICJwcmVmaXgiIDogIi0td2luQmluTmJpdHMiLAogICAgICAic2JnOmNtZEluY2x1ZGUiIDogdHJ1ZSwKICAgICAgInNlcGFyYXRlIiA6IHRydWUKICAgIH0sCiAgICAiZGVzY3JpcHRpb24iIDogIj1sb2cyKHdpbkJpbiksIHdoZXJlIHdpbkJpbiBpcyB0aGUgc2l6ZSBvZiB0aGUgYmluIGZvciB0aGUgd2luZG93cy9jbHVzdGVyaW5nLCBlYWNoIHdpbmRvdyB3aWxsIG9jY3VweSBhbiBpbnRlZ2VyIG51bWJlciBvZiBiaW5zIChpbnQ+MCkuIiwKICAgICJzYmc6dG9vbERlZmF1bHRWYWx1ZSIgOiAiMTYiLAogICAgInNiZzpjYXRlZ29yeSIgOiAiV2luZG93cywgQW5jaG9ycywgQmlubmluZyIsCiAgICAibGFiZWwiIDogIkJpbiBzaXplIgogIH0sIHsKICAgICJpZCIgOiAiI3dpbkFuY2hvck11bHRpbWFwTm1heCIsCiAgICAidHlwZSIgOiBbICJudWxsIiwgImludCIgXSwKICAgICJpbnB1dEJpbmRpbmciIDogewogICAgICAicHJlZml4IiA6ICItLXdpbkFuY2hvck11bHRpbWFwTm1heCIsCiAgICAgICJzYmc6Y21kSW5jbHVkZSIgOiB0cnVlLAogICAgICAic2VwYXJhdGUiIDogdHJ1ZQogICAgfSwKICAgICJkZXNjcmlwdGlvbiIgOiAiTWF4IG51bWJlciBvZiBsb2NpIGFuY2hvcnMgYXJlIGFsbG93ZWQgdG8gbWFwIHRvIChpbnQ+MCkuIiwKICAgICJzYmc6dG9vbERlZmF1bHRWYWx1ZSIgOiAiNTAiLAogICAgInNiZzpjYXRlZ29yeSIgOiAiV2luZG93cywgQW5jaG9ycywgQmlubmluZyIsCiAgICAibGFiZWwiIDogIk1heCBsb2NpIGFuY2hvcnMiCiAgfSwgewogICAgImlkIiA6ICIjd2luQW5jaG9yRGlzdE5iaW5zIiwKICAgICJ0eXBlIiA6IFsgIm51bGwiLCAiaW50IiBdLAogICAgImlucHV0QmluZGluZyIgOiB7CiAgICAgICJwcmVmaXgiIDogIi0td2luQW5jaG9yRGlzdE5iaW5zIiwKICAgICAgInNiZzpjbWRJbmNsdWRlIiA6IHRydWUsCiAgICAgICJzZXBhcmF0ZSIgOiB0cnVlCiAgICB9LAogICAgImRlc2NyaXB0aW9uIiA6ICJNYXggbnVtYmVyIG9mIGJpbnMgYmV0d2VlbiB0d28gYW5jaG9ycyB0aGF0IGFsbG93cyBhZ2dyZWdhdGlvbiBvZiBhbmNob3JzIGludG8gb25lIHdpbmRvdyAoaW50PjApLiIsCiAgICAic2JnOnRvb2xEZWZhdWx0VmFsdWUiIDogIjkiLAogICAgInNiZzpjYXRlZ29yeSIgOiAiV2luZG93cywgQW5jaG9ycywgQmlubmluZyIsCiAgICAibGFiZWwiIDogIk1heCBiaW5zIGJldHdlZW4gYW5jaG9ycyIKICB9LCB7CiAgICAiaWQiIDogIiN1bm1hcHBlZE91dHB1dE5hbWUiLAogICAgInR5cGUiIDogWyAibnVsbCIsICJzdHJpbmciIF0sCiAgICAiZGVzY3JpcHRpb24iIDogIk5hbWVzIG9mIHRoZSB1bm1hcHBlZCBvdXRwdXQgZmlsZXMuIiwKICAgICJzYmc6dG9vbERlZmF1bHRWYWx1ZSIgOiAiXCJVbm1hcHBlZC5vdXRcIiIsCiAgICAic2JnOmNhdGVnb3J5IiA6ICJPdXRwdXQiLAogICAgImxhYmVsIiA6ICJVbm1hcHBlZCBvdXRwdXQgZmlsZSBuYW1lcyIKICB9LCB7CiAgICAiaWQiIDogIiN0d29wYXNzTW9kZSIsCiAgICAidHlwZSIgOiBbICJudWxsIiwgewogICAgICAibmFtZSIgOiAidHdvcGFzc01vZGUiLAogICAgICAic3ltYm9scyIgOiBbICJOb25lIiwgIkJhc2ljIiBdLAogICAgICAidHlwZSIgOiAiZW51bSIKICAgIH0gXSwKICAgICJpbnB1dEJpbmRpbmciIDogewogICAgICAicHJlZml4IiA6ICItLXR3b3Bhc3NNb2RlIiwKICAgICAgInNiZzpjbWRJbmNsdWRlIiA6IHRydWUsCiAgICAgICJzZXBhcmF0ZSIgOiB0cnVlCiAgICB9LAogICAgImRlc2NyaXB0aW9uIiA6ICIyLXBhc3MgbWFwcGluZyBtb2RlLiBOb25lOiAxLXBhc3MgbWFwcGluZzsgQmFzaWM6IGJhc2ljIDItcGFzcyBtYXBwaW5nLCB3aXRoIGFsbCAxc3QgcGFzcyBqdW5jdGlvbnMgaW5zZXJ0ZWQgaW50byB0aGUgZ2Vub21lIGluZGljZXMgb24gdGhlIGZseS4iLAogICAgInNiZzp0b29sRGVmYXVsdFZhbHVlIiA6ICJOb25lIiwKICAgICJzYmc6Y2F0ZWdvcnkiIDogIjItcGFzcyBtYXBwaW5nIiwKICAgICJsYWJlbCIgOiAiVHdvLXBhc3MgbW9kZSIKICB9LCB7CiAgICAiaWQiIDogIiN0d29wYXNzMXJlYWRzTiIsCiAgICAidHlwZSIgOiBbICJudWxsIiwgImludCIgXSwKICAgICJkZXNjcmlwdGlvbiIgOiAiTnVtYmVyIG9mIHJlYWRzIHRvIHByb2Nlc3MgZm9yIHRoZSAxc3Qgc3RlcC4gMDogMS1zdGVwIG9ubHksIG5vIDJuZCBwYXNzOyB1c2UgdmVyeSBsYXJnZSBudW1iZXIgKG9yIGRlZmF1bHQgLTEpIHRvIG1hcCBhbGwgcmVhZHMgaW4gdGhlIGZpcnN0IHN0ZXAgKGludD4wKS4iLAogICAgInNiZzp0b29sRGVmYXVsdFZhbHVlIiA6ICItMSIsCiAgICAic2JnOmNhdGVnb3J5IiA6ICIyLXBhc3MgbWFwcGluZyIsCiAgICAibGFiZWwiIDogIlJlYWRzIHRvIHByb2Nlc3MgaW4gMXN0IHN0ZXAiCiAgfSwgewogICAgImlkIiA6ICIjc29ydFVubWFwcGVkUmVhZHMiLAogICAgInR5cGUiIDogWyAibnVsbCIsICJib29sZWFuIiBdLAogICAgImRlc2NyaXB0aW9uIiA6ICJVbm1hcHBlZCByZWFkcyBhcmUsIGJ5IGRlZmF1bHQsIHVuc29ydGVkLiBJZiB5b3Ugd2FudCB0byBzb3J0IHRoZW0gYnkgcmVhZCBJRCwgcGxlYXNlIHNwZWNpZnkgdGhpcyBvcHRpb24sIHRob3VnaCBrZWVwIGluIG1pbmQgdGhhdCB0aGlzIGNhbiBpbmNyZWFzZSBTVEFSIHJ1biB0aW1lLiIsCiAgICAic2JnOnRvb2xEZWZhdWx0VmFsdWUiIDogIk9mZiIsCiAgICAic2JnOmNhdGVnb3J5IiA6ICJPdXRwdXQiLAogICAgImxhYmVsIiA6ICJTb3J0IHVubWFwcGVkIHJlYWRzIgogIH0sIHsKICAgICJpZCIgOiAiI3NqZGJTY29yZSIsCiAgICAidHlwZSIgOiBbICJudWxsIiwgImludCIgXSwKICAgICJkZXNjcmlwdGlvbiIgOiAiRXh0cmEgYWxpZ25tZW50IHNjb3JlIGZvciBhbGlnbm1lbnRzIHRoYXQgY3Jvc3MgZGF0YWJhc2UganVuY3Rpb25zLiIsCiAgICAic2JnOnRvb2xEZWZhdWx0VmFsdWUiIDogIjIiLAogICAgInNiZzpjYXRlZ29yeSIgOiAiU3BsaWNlIGp1bmN0aW9ucyBkYXRhYmFzZSIsCiAgICAibGFiZWwiIDogIkV4dHJhIGFsaWdubWVudCBzY29yZSIKICB9LCB7CiAgICAiaWQiIDogIiNzamRiT3ZlcmhhbmciLAogICAgInR5cGUiIDogWyAibnVsbCIsICJpbnQiIF0sCiAgICAiZGVzY3JpcHRpb24iIDogIkxlbmd0aCBvZiB0aGUgZG9ub3IvYWNjZXB0b3Igc2VxdWVuY2Ugb24gZWFjaCBzaWRlIG9mIHRoZSBqdW5jdGlvbnMsIGlkZWFsbHkgPSAobWF0ZV9sZW5ndGggLSAxKSAoaW50ID49IDApLCBpZiBpbnQgPSAwLCBzcGxpY2UganVuY3Rpb24gZGF0YWJhc2UgaXMgbm90IHVzZWQuIiwKICAgICJzYmc6dG9vbERlZmF1bHRWYWx1ZSIgOiAiMTAwIiwKICAgICJzYmc6Y2F0ZWdvcnkiIDogIlNwbGljZSBqdW5jdGlvbnMgZGF0YWJhc2UiLAogICAgImxhYmVsIiA6ICJcIk92ZXJoYW5nXCIgbGVuZ3RoIgogIH0sIHsKICAgICJpZCIgOiAiI3NqZGJJbnNlcnRTYXZlIiwKICAgICJ0eXBlIiA6IFsgIm51bGwiLCB7CiAgICAgICJuYW1lIiA6ICJzamRiSW5zZXJ0U2F2ZSIsCiAgICAgICJzeW1ib2xzIiA6IFsgIkJhc2ljIiwgIkFsbCIsICJOb25lIiBdLAogICAgICAidHlwZSIgOiAiZW51bSIKICAgIH0gXSwKICAgICJkZXNjcmlwdGlvbiIgOiAiV2hpY2ggZmlsZXMgdG8gc2F2ZSB3aGVuIHNqZGIganVuY3Rpb25zIGFyZSBpbnNlcnRlZCBvbiB0aGUgZmx5IGF0IHRoZSBtYXBwaW5nIHN0ZXAuIE5vbmU6IG5vdCBzYXZpbmcgZmlsZXMgYXQgYWxsOyBCYXNpYzogb25seSBzbWFsbCBqdW5jdGlvbi90cmFuc2NyaXB0IGZpbGVzOyBBbGw6IGFsbCBmaWxlcyBpbmNsdWRpbmcgYmlnIEdlbm9tZSwgU0EgYW5kIFNBaW5kZXguIFRoZXNlIGZpbGVzIGFyZSBvdXRwdXQgYXMgYXJjaGl2ZS4iLAogICAgInNiZzp0b29sRGVmYXVsdFZhbHVlIiA6ICJOb25lIiwKICAgICJzYmc6Y2F0ZWdvcnkiIDogIlNwbGljZSBqdW5jdGlvbnMgZGF0YWJhc2UiLAogICAgImxhYmVsIiA6ICJTYXZlIGp1bmN0aW9uIGZpbGVzIgogIH0sIHsKICAgICJpZCIgOiAiI3NqZGJHVEZ0YWdFeG9uUGFyZW50VHJhbnNjcmlwdCIsCiAgICAidHlwZSIgOiBbICJudWxsIiwgInN0cmluZyIgXSwKICAgICJkZXNjcmlwdGlvbiIgOiAiVGFnIG5hbWUgdG8gYmUgdXNlZCBhcyBleG9ucyB0cmFuc2NyaXB0LXBhcmVudHMuIiwKICAgICJzYmc6dG9vbERlZmF1bHRWYWx1ZSIgOiAidHJhbnNjcmlwdF9pZCIsCiAgICAic2JnOmNhdGVnb3J5IiA6ICJTcGxpY2UganVuY3Rpb25zIGRhdGFiYXNlIiwKICAgICJsYWJlbCIgOiAiRXhvbnMnIHBhcmVudHMgbmFtZSIKICB9LCB7CiAgICAiaWQiIDogIiNzamRiR1RGdGFnRXhvblBhcmVudEdlbmUiLAogICAgInR5cGUiIDogWyAibnVsbCIsICJzdHJpbmciIF0sCiAgICAiZGVzY3JpcHRpb24iIDogIlRhZyBuYW1lIHRvIGJlIHVzZWQgYXMgZXhvbnMgZ2VuZS1wYXJlbnRzLiIsCiAgICAic2JnOnRvb2xEZWZhdWx0VmFsdWUiIDogImdlbmVfaWQiLAogICAgInNiZzpjYXRlZ29yeSIgOiAiU3BsaWNlIGp1bmN0aW9ucyBkYXRhYmFzZSIsCiAgICAibGFiZWwiIDogIkdlbmUgbmFtZSIKICB9LCB7CiAgICAiaWQiIDogIiNzamRiR1RGZmlsZSIsCiAgICAidHlwZSIgOiBbICJudWxsIiwgewogICAgICAiaXRlbXMiIDogIkZpbGUiLAogICAgICAibmFtZSIgOiAic2pkYkdURmZpbGUiLAogICAgICAidHlwZSIgOiAiYXJyYXkiCiAgICB9IF0sCiAgICAiZGVzY3JpcHRpb24iIDogIkdlbmUgbW9kZWwgYW5ub3RhdGlvbnMgYW5kL29yIGtub3duIHRyYW5zY3JpcHRzLiBObyBuZWVkIHRvIGluY2x1ZGUgdGhpcyBpbnB1dCwgZXhjZXB0IGluIGNhc2Ugb2YgdXNpbmcgXCJvbiB0aGUgZmx5XCIgYW5ub3RhdGlvbnMuIElmIHlvdSBhcmUgcHJvdmlkaW5nIGEgR0ZGMyBmaWxlIGFuZCB3aXNoIHRvIHVzZSBTVEFSIHJlc3VsdHMgZm9yIGZ1cnRoZXIgZG93bnN0cmVhbSBhbmFseXNpcywgYSBnb29kIGlkZWEgd291bGQgYmUgdG8gc2V0IHRoZSBcIkV4b25zJyBwYXJlbnRzIG5hbWVcIiAoaWQ6IHNqZGJHVEZ0YWdFeG9uUGFyZW50VHJhbnNjcmlwdCkgb3B0aW9uIHRvIFwiUGFyZW50XCIuIiwKICAgICJzYmc6Y2F0ZWdvcnkiIDogIkJhc2ljIiwKICAgICJsYWJlbCIgOiAiU3BsaWNlIGp1bmN0aW9uIGZpbGUiLAogICAgInNiZzpmaWxlVHlwZXMiIDogIkdURiwgR0ZGLCBHRkYyLCBHRkYzLCBUWFQiLAogICAgInJlcXVpcmVkIiA6IGZhbHNlCiAgfSwgewogICAgImlkIiA6ICIjc2pkYkdURmZlYXR1cmVFeG9uIiwKICAgICJ0eXBlIiA6IFsgIm51bGwiLCAic3RyaW5nIiBdLAogICAgImRlc2NyaXB0aW9uIiA6ICJGZWF0dXJlIHR5cGUgaW4gR1RGIGZpbGUgdG8gYmUgdXNlZCBhcyBleG9ucyBmb3IgYnVpbGRpbmcgdHJhbnNjcmlwdHMuIiwKICAgICJzYmc6dG9vbERlZmF1bHRWYWx1ZSIgOiAiZXhvbiIsCiAgICAic2JnOmNhdGVnb3J5IiA6ICJTcGxpY2UganVuY3Rpb25zIGRhdGFiYXNlIiwKICAgICJsYWJlbCIgOiAiU2V0IGV4b25zIGZlYXR1cmUiCiAgfSwgewogICAgImlkIiA6ICIjc2pkYkdURmNoclByZWZpeCIsCiAgICAidHlwZSIgOiBbICJudWxsIiwgInN0cmluZyIgXSwKICAgICJkZXNjcmlwdGlvbiIgOiAiUHJlZml4IGZvciBjaHJvbW9zb21lIG5hbWVzIGluIGEgR1RGIGZpbGUgKGUuZy4gJ2NocicgZm9yIHVzaW5nIEVOU01FQkwgYW5ub3RhdGlvbnMgd2l0aCBVQ1NDIGdlbmVvbWVzKS4iLAogICAgInNiZzp0b29sRGVmYXVsdFZhbHVlIiA6ICItIiwKICAgICJzYmc6Y2F0ZWdvcnkiIDogIlNwbGljZSBqdW5jdGlvbnMgZGF0YWJhc2UiLAogICAgImxhYmVsIiA6ICJDaHJvbW9zb21lIG5hbWVzIgogIH0sIHsKICAgICJpZCIgOiAiI3NlZWRTZWFyY2hTdGFydExtYXhPdmVyTHJlYWQiLAogICAgInR5cGUiIDogWyAibnVsbCIsICJmbG9hdCIgXSwKICAgICJpbnB1dEJpbmRpbmciIDogewogICAgICAicHJlZml4IiA6ICItLXNlZWRTZWFyY2hTdGFydExtYXhPdmVyTHJlYWQiLAogICAgICAic2JnOmNtZEluY2x1ZGUiIDogdHJ1ZSwKICAgICAgInNlcGFyYXRlIiA6IHRydWUKICAgIH0sCiAgICAiZGVzY3JpcHRpb24iIDogIlNlZWRTZWFyY2hTdGFydExtYXggbm9ybWFsaXplZCB0byByZWFkIGxlbmd0aCAoc3VtIG9mIG1hdGVzJyBsZW5ndGhzIGZvciBwYWlyZWQtZW5kIHJlYWRzKS4iLAogICAgInNiZzp0b29sRGVmYXVsdFZhbHVlIiA6ICIxLjAiLAogICAgInNiZzpjYXRlZ29yeSIgOiAiQWxpZ25tZW50cyBhbmQgU2VlZGluZyIsCiAgICAibGFiZWwiIDogIlNlYXJjaCBzdGFydCBwb2ludCBub3JtYWxpemVkIgogIH0sIHsKICAgICJpZCIgOiAiI3NlZWRTZWFyY2hTdGFydExtYXgiLAogICAgInR5cGUiIDogWyAibnVsbCIsICJpbnQiIF0sCiAgICAiaW5wdXRCaW5kaW5nIiA6IHsKICAgICAgInByZWZpeCIgOiAiLS1zZWVkU2VhcmNoU3RhcnRMbWF4IiwKICAgICAgInNiZzpjbWRJbmNsdWRlIiA6IHRydWUsCiAgICAgICJzZXBhcmF0ZSIgOiB0cnVlCiAgICB9LAogICAgImRlc2NyaXB0aW9uIiA6ICJEZWZpbmVzIHRoZSBzZWFyY2ggc3RhcnQgcG9pbnQgdGhyb3VnaCB0aGUgcmVhZCAtIHRoZSByZWFkIGlzIHNwbGl0IGludG8gcGllY2VzIG5vIGxvbmdlciB0aGFuIHRoaXMgdmFsdWUgKGludD4wKS4iLAogICAgInNiZzp0b29sRGVmYXVsdFZhbHVlIiA6ICI1MCIsCiAgICAic2JnOmNhdGVnb3J5IiA6ICJBbGlnbm1lbnRzIGFuZCBTZWVkaW5nIiwKICAgICJsYWJlbCIgOiAiU2VhcmNoIHN0YXJ0IHBvaW50IgogIH0sIHsKICAgICJpZCIgOiAiI3NlZWRTZWFyY2hMbWF4IiwKICAgICJ0eXBlIiA6IFsgIm51bGwiLCAiaW50IiBdLAogICAgImlucHV0QmluZGluZyIgOiB7CiAgICAgICJwcmVmaXgiIDogIi0tc2VlZFNlYXJjaExtYXgiLAogICAgICAic2JnOmNtZEluY2x1ZGUiIDogdHJ1ZSwKICAgICAgInNlcGFyYXRlIiA6IHRydWUKICAgIH0sCiAgICAiZGVzY3JpcHRpb24iIDogIkRlZmluZXMgdGhlIG1heGltdW0gbGVuZ3RoIG9mIHRoZSBzZWVkcywgaWYgPTAgbWF4IHNlZWQgbGVuZ3RoIGlzIGluZmluaXRlIChpbnQ+PTApLiIsCiAgICAic2JnOnRvb2xEZWZhdWx0VmFsdWUiIDogIjAiLAogICAgInNiZzpjYXRlZ29yeSIgOiAiQWxpZ25tZW50cyBhbmQgU2VlZGluZyIsCiAgICAibGFiZWwiIDogIk1heCBzZWVkIGxlbmd0aCIKICB9LCB7CiAgICAiaWQiIDogIiNzZWVkUGVyV2luZG93Tm1heCIsCiAgICAidHlwZSIgOiBbICJudWxsIiwgImludCIgXSwKICAgICJpbnB1dEJpbmRpbmciIDogewogICAgICAicHJlZml4IiA6ICItLXNlZWRQZXJXaW5kb3dObWF4IiwKICAgICAgInNiZzpjbWRJbmNsdWRlIiA6IHRydWUsCiAgICAgICJzZXBhcmF0ZSIgOiB0cnVlCiAgICB9LAogICAgImRlc2NyaXB0aW9uIiA6ICJNYXggbnVtYmVyIG9mIHNlZWRzIHBlciB3aW5kb3cgKGludD49MCkuIiwKICAgICJzYmc6dG9vbERlZmF1bHRWYWx1ZSIgOiAiNTAiLAogICAgInNiZzpjYXRlZ29yeSIgOiAiQWxpZ25tZW50cyBhbmQgU2VlZGluZyIsCiAgICAibGFiZWwiIDogIk1heCBzZWVkcyBwZXIgd2luZG93IgogIH0sIHsKICAgICJpZCIgOiAiI3NlZWRQZXJSZWFkTm1heCIsCiAgICAidHlwZSIgOiBbICJudWxsIiwgImludCIgXSwKICAgICJpbnB1dEJpbmRpbmciIDogewogICAgICAicHJlZml4IiA6ICItLXNlZWRQZXJSZWFkTm1heCIsCiAgICAgICJzYmc6Y21kSW5jbHVkZSIgOiB0cnVlLAogICAgICAic2VwYXJhdGUiIDogdHJ1ZQogICAgfSwKICAgICJkZXNjcmlwdGlvbiIgOiAiTWF4IG51bWJlciBvZiBzZWVkcyBwZXIgcmVhZCAoaW50Pj0wKS4iLAogICAgInNiZzp0b29sRGVmYXVsdFZhbHVlIiA6ICIxMDAwIiwKICAgICJzYmc6Y2F0ZWdvcnkiIDogIkFsaWdubWVudHMgYW5kIFNlZWRpbmciLAogICAgImxhYmVsIiA6ICJNYXggc2VlZHMgcGVyIHJlYWQiCiAgfSwgewogICAgImlkIiA6ICIjc2VlZE5vbmVMb2NpUGVyV2luZG93IiwKICAgICJ0eXBlIiA6IFsgIm51bGwiLCAiaW50IiBdLAogICAgImlucHV0QmluZGluZyIgOiB7CiAgICAgICJwcmVmaXgiIDogIi0tc2VlZE5vbmVMb2NpUGVyV2luZG93IiwKICAgICAgInNiZzpjbWRJbmNsdWRlIiA6IHRydWUsCiAgICAgICJzZXBhcmF0ZSIgOiB0cnVlCiAgICB9LAogICAgImRlc2NyaXB0aW9uIiA6ICJNYXggbnVtYmVyIG9mIG9uZSBzZWVkIGxvY2kgcGVyIHdpbmRvdyAoaW50Pj0wKS4iLAogICAgInNiZzp0b29sRGVmYXVsdFZhbHVlIiA6ICIxMCIsCiAgICAic2JnOmNhdGVnb3J5IiA6ICJBbGlnbm1lbnRzIGFuZCBTZWVkaW5nIiwKICAgICJsYWJlbCIgOiAiTWF4IG9uZS1zZWVkIGxvY2kgcGVyIHdpbmRvdyIKICB9LCB7CiAgICAiaWQiIDogIiNzZWVkTXVsdGltYXBObWF4IiwKICAgICJ0eXBlIiA6IFsgIm51bGwiLCAiaW50IiBdLAogICAgImlucHV0QmluZGluZyIgOiB7CiAgICAgICJwcmVmaXgiIDogIi0tc2VlZE11bHRpbWFwTm1heCIsCiAgICAgICJzYmc6Y21kSW5jbHVkZSIgOiB0cnVlLAogICAgICAic2VwYXJhdGUiIDogdHJ1ZQogICAgfSwKICAgICJkZXNjcmlwdGlvbiIgOiAiT25seSBwaWVjZXMgdGhhdCBtYXAgZmV3ZXIgdGhhbiB0aGlzIHZhbHVlIGFyZSB1dGlsaXplZCBpbiB0aGUgc3RpdGNoaW5nIHByb2NlZHVyZSAoaW50Pj0wKS4iLAogICAgInNiZzp0b29sRGVmYXVsdFZhbHVlIiA6ICIxMDAwMCIsCiAgICAic2JnOmNhdGVnb3J5IiA6ICJBbGlnbm1lbnRzIGFuZCBTZWVkaW5nIiwKICAgICJsYWJlbCIgOiAiRmlsdGVyIHBpZWNlcyBmb3Igc3RpdGNoaW5nIgogIH0sIHsKICAgICJpZCIgOiAiI3Njb3JlU3RpdGNoU0pzaGlmdCIsCiAgICAidHlwZSIgOiBbICJudWxsIiwgImludCIgXSwKICAgICJpbnB1dEJpbmRpbmciIDogewogICAgICAicHJlZml4IiA6ICItLXNjb3JlU3RpdGNoU0pzaGlmdCIsCiAgICAgICJzYmc6Y21kSW5jbHVkZSIgOiB0cnVlLAogICAgICAic2VwYXJhdGUiIDogdHJ1ZQogICAgfSwKICAgICJkZXNjcmlwdGlvbiIgOiAiTWF4aW11bSBzY29yZSByZWR1Y3Rpb24gd2hpbGUgc2VhcmNoaW5nIGZvciBTSiBib3VuZGFyaWVzIGluIHRoZSBzdGl0Y2hpbmcgc3RlcC4iLAogICAgInNiZzp0b29sRGVmYXVsdFZhbHVlIiA6ICIxIiwKICAgICJzYmc6Y2F0ZWdvcnkiIDogIlNjb3JpbmciLAogICAgImxhYmVsIiA6ICJNYXggc2NvcmUgcmVkdWN0aW9uIgogIH0sIHsKICAgICJpZCIgOiAiI3Njb3JlSW5zT3BlbiIsCiAgICAidHlwZSIgOiBbICJudWxsIiwgImludCIgXSwKICAgICJpbnB1dEJpbmRpbmciIDogewogICAgICAicHJlZml4IiA6ICItLXNjb3JlSW5zT3BlbiIsCiAgICAgICJzYmc6Y21kSW5jbHVkZSIgOiB0cnVlLAogICAgICAic2VwYXJhdGUiIDogdHJ1ZQogICAgfSwKICAgICJkZXNjcmlwdGlvbiIgOiAiSW5zZXJ0aW9uIG9wZW4gcGVuYWx0eS4iLAogICAgInNiZzp0b29sRGVmYXVsdFZhbHVlIiA6ICItMiIsCiAgICAic2JnOmNhdGVnb3J5IiA6ICJTY29yaW5nIiwKICAgICJsYWJlbCIgOiAiSW5zZXJ0aW9uIE9wZW4gUGVuYWx0eSIKICB9LCB7CiAgICAiaWQiIDogIiNzY29yZUluc0Jhc2UiLAogICAgInR5cGUiIDogWyAibnVsbCIsICJpbnQiIF0sCiAgICAiaW5wdXRCaW5kaW5nIiA6IHsKICAgICAgInByZWZpeCIgOiAiLS1zY29yZUluc0Jhc2UiLAogICAgICAic2JnOmNtZEluY2x1ZGUiIDogdHJ1ZSwKICAgICAgInNlcGFyYXRlIiA6IHRydWUKICAgIH0sCiAgICAiZGVzY3JpcHRpb24iIDogIkluc2VydGlvbiBleHRlbnNpb24gcGVuYWx0eSBwZXIgYmFzZSAoaW4gYWRkaXRpb24gdG8gLS1zY29yZUluc09wZW4pLiIsCiAgICAic2JnOnRvb2xEZWZhdWx0VmFsdWUiIDogIi0yIiwKICAgICJzYmc6Y2F0ZWdvcnkiIDogIlNjb3JpbmciLAogICAgImxhYmVsIiA6ICJJbnNlcnRpb24gZXh0ZW5zaW9uIHBlbmFsdHkiCiAgfSwgewogICAgImlkIiA6ICIjc2NvcmVHZW5vbWljTGVuZ3RoTG9nMnNjYWxlIiwKICAgICJ0eXBlIiA6IFsgIm51bGwiLCAiZmxvYXQiIF0sCiAgICAiaW5wdXRCaW5kaW5nIiA6IHsKICAgICAgInByZWZpeCIgOiAiLS1zY29yZUdlbm9taWNMZW5ndGhMb2cyc2NhbGUiLAogICAgICAic2JnOmNtZEluY2x1ZGUiIDogdHJ1ZSwKICAgICAgInNlcGFyYXRlIiA6IHRydWUKICAgIH0sCiAgICAiZGVzY3JpcHRpb24iIDogIkV4dHJhIHNjb3JlIGxvZ2FyaXRobWljYWxseSBzY2FsZWQgd2l0aCBnZW5vbWljIGxlbmd0aCBvZiB0aGUgYWxpZ25tZW50OiA8aW50Pipsb2cyKGdlbm9taWNMZW5ndGgpLiIsCiAgICAic2JnOnRvb2xEZWZhdWx0VmFsdWUiIDogIi0wLjI1IiwKICAgICJzYmc6Y2F0ZWdvcnkiIDogIlNjb3JpbmciLAogICAgImxhYmVsIiA6ICJMb2cgc2NhbGVkIHNjb3JlIgogIH0sIHsKICAgICJpZCIgOiAiI3Njb3JlR2FwTm9uY2FuIiwKICAgICJ0eXBlIiA6IFsgIm51bGwiLCAiaW50IiBdLAogICAgImlucHV0QmluZGluZyIgOiB7CiAgICAgICJwcmVmaXgiIDogIi0tc2NvcmVHYXBOb25jYW4iLAogICAgICAic2JnOmNtZEluY2x1ZGUiIDogdHJ1ZSwKICAgICAgInNlcGFyYXRlIiA6IHRydWUKICAgIH0sCiAgICAiZGVzY3JpcHRpb24iIDogIk5vbi1jYW5vbmljYWwgZ2FwIG9wZW4gcGVuYWx0eSAoaW4gYWRkaXRpb24gdG8gLS1zY29yZUdhcCkuIiwKICAgICJzYmc6dG9vbERlZmF1bHRWYWx1ZSIgOiAiLTgiLAogICAgInNiZzpjYXRlZ29yeSIgOiAiU2NvcmluZyIsCiAgICAibGFiZWwiIDogIk5vbi1jYW5vbmljYWwgZ2FwIG9wZW4iCiAgfSwgewogICAgImlkIiA6ICIjc2NvcmVHYXBHQ0FHIiwKICAgICJ0eXBlIiA6IFsgIm51bGwiLCAiaW50IiBdLAogICAgImlucHV0QmluZGluZyIgOiB7CiAgICAgICJwcmVmaXgiIDogIi0tc2NvcmVHYXBHQ0FHIiwKICAgICAgInNiZzpjbWRJbmNsdWRlIiA6IHRydWUsCiAgICAgICJzZXBhcmF0ZSIgOiB0cnVlCiAgICB9LAogICAgImRlc2NyaXB0aW9uIiA6ICJHQy9BRyBhbmQgQ1QvR0MgZ2FwIG9wZW4gcGVuYWx0eSAoaW4gYWRkaXRpb24gdG8gLS1zY29yZUdhcCkuIiwKICAgICJzYmc6dG9vbERlZmF1bHRWYWx1ZSIgOiAiLTQiLAogICAgInNiZzpjYXRlZ29yeSIgOiAiU2NvcmluZyIsCiAgICAibGFiZWwiIDogIkdDL0FHIGFuZCBDVC9HQyBnYXAgb3BlbiIKICB9LCB7CiAgICAiaWQiIDogIiNzY29yZUdhcEFUQUMiLAogICAgInR5cGUiIDogWyAibnVsbCIsICJpbnQiIF0sCiAgICAiaW5wdXRCaW5kaW5nIiA6IHsKICAgICAgInByZWZpeCIgOiAiLS1zY29yZUdhcEFUQUMiLAogICAgICAic2JnOmNtZEluY2x1ZGUiIDogdHJ1ZSwKICAgICAgInNlcGFyYXRlIiA6IHRydWUKICAgIH0sCiAgICAiZGVzY3JpcHRpb24iIDogIkFUL0FDIGFuZCBHVC9BVCBnYXAgb3BlbiBwZW5hbHR5IChpbiBhZGRpdGlvbiB0byAtLXNjb3JlR2FwKS4iLAogICAgInNiZzp0b29sRGVmYXVsdFZhbHVlIiA6ICItOCIsCiAgICAic2JnOmNhdGVnb3J5IiA6ICJTY29yaW5nIiwKICAgICJsYWJlbCIgOiAiQVQvQUMgYW5kIEdUL0FUIGdhcCBvcGVuIgogIH0sIHsKICAgICJpZCIgOiAiI3Njb3JlR2FwIiwKICAgICJ0eXBlIiA6IFsgIm51bGwiLCAiaW50IiBdLAogICAgImlucHV0QmluZGluZyIgOiB7CiAgICAgICJwcmVmaXgiIDogIi0tc2NvcmVHYXAiLAogICAgICAic2JnOmNtZEluY2x1ZGUiIDogdHJ1ZSwKICAgICAgInNlcGFyYXRlIiA6IHRydWUKICAgIH0sCiAgICAiZGVzY3JpcHRpb24iIDogIkdhcCBvcGVuIHBlbmFsdHkuIiwKICAgICJzYmc6dG9vbERlZmF1bHRWYWx1ZSIgOiAiMCIsCiAgICAic2JnOmNhdGVnb3J5IiA6ICJTY29yaW5nIiwKICAgICJsYWJlbCIgOiAiR2FwIG9wZW4gcGVuYWx0eSIKICB9LCB7CiAgICAiaWQiIDogIiNzY29yZURlbE9wZW4iLAogICAgInR5cGUiIDogWyAibnVsbCIsICJpbnQiIF0sCiAgICAiaW5wdXRCaW5kaW5nIiA6IHsKICAgICAgInByZWZpeCIgOiAiLS1zY29yZURlbE9wZW4iLAogICAgICAic2JnOmNtZEluY2x1ZGUiIDogdHJ1ZSwKICAgICAgInNlcGFyYXRlIiA6IHRydWUKICAgIH0sCiAgICAiZGVzY3JpcHRpb24iIDogIkRlbGV0aW9uIG9wZW4gcGVuYWx0eS4iLAogICAgInNiZzp0b29sRGVmYXVsdFZhbHVlIiA6ICItMiIsCiAgICAic2JnOmNhdGVnb3J5IiA6ICJTY29yaW5nIiwKICAgICJsYWJlbCIgOiAiRGVsZXRpb24gb3BlbiBwZW5hbHR5IgogIH0sIHsKICAgICJpZCIgOiAiI3Njb3JlRGVsQmFzZSIsCiAgICAidHlwZSIgOiBbICJudWxsIiwgImludCIgXSwKICAgICJpbnB1dEJpbmRpbmciIDogewogICAgICAicHJlZml4IiA6ICItLXNjb3JlRGVsQmFzZSIsCiAgICAgICJzYmc6Y21kSW5jbHVkZSIgOiB0cnVlLAogICAgICAic2VwYXJhdGUiIDogdHJ1ZQogICAgfSwKICAgICJkZXNjcmlwdGlvbiIgOiAiRGVsZXRpb24gZXh0ZW5zaW9uIHBlbmFsdHkgcGVyIGJhc2UgKGluIGFkZGl0aW9uIHRvIC0tc2NvcmVEZWxPcGVuKS4iLAogICAgInNiZzp0b29sRGVmYXVsdFZhbHVlIiA6ICItMiIsCiAgICAic2JnOmNhdGVnb3J5IiA6ICJTY29yaW5nIiwKICAgICJsYWJlbCIgOiAiRGVsZXRpb24gZXh0ZW5zaW9uIHBlbmFsdHkiCiAgfSwgewogICAgImlkIiA6ICIjcmdfc2VxX2NlbnRlciIsCiAgICAidHlwZSIgOiBbICJudWxsIiwgInN0cmluZyIgXSwKICAgICJkZXNjcmlwdGlvbiIgOiAiU3BlY2lmeSB0aGUgc2VxdWVuY2luZyBjZW50ZXIgZm9yIFJHIGxpbmUuIiwKICAgICJzYmc6dG9vbERlZmF1bHRWYWx1ZSIgOiAiSW5mZXJyZWQgZnJvbSBtZXRhZGF0YSIsCiAgICAic2JnOmNhdGVnb3J5IiA6ICJSZWFkIGdyb3VwIiwKICAgICJsYWJlbCIgOiAiU2VxdWVuY2luZyBjZW50ZXIiCiAgfSwgewogICAgImlkIiA6ICIjcmdfc2FtcGxlX2lkIiwKICAgICJ0eXBlIiA6IFsgIm51bGwiLCAic3RyaW5nIiBdLAogICAgImRlc2NyaXB0aW9uIiA6ICJTcGVjaWZ5IHRoZSBzYW1wbGUgSUQgZm9yIFJHIGxpbmUuIiwKICAgICJzYmc6dG9vbERlZmF1bHRWYWx1ZSIgOiAiSW5mZXJyZWQgZnJvbSBtZXRhZGF0YSIsCiAgICAic2JnOmNhdGVnb3J5IiA6ICJSZWFkIGdyb3VwIiwKICAgICJsYWJlbCIgOiAiU2FtcGxlIElEIgogIH0sIHsKICAgICJpZCIgOiAiI3JnX3BsYXRmb3JtX3VuaXRfaWQiLAogICAgInR5cGUiIDogWyAibnVsbCIsICJzdHJpbmciIF0sCiAgICAiZGVzY3JpcHRpb24iIDogIlNwZWNpZnkgdGhlIHBsYXRmb3JtIHVuaXQgSUQgZm9yIFJHIGxpbmUuIiwKICAgICJzYmc6dG9vbERlZmF1bHRWYWx1ZSIgOiAiSW5mZXJyZWQgZnJvbSBtZXRhZGF0YSIsCiAgICAic2JnOmNhdGVnb3J5IiA6ICJSZWFkIGdyb3VwIiwKICAgICJsYWJlbCIgOiAiUGxhdGZvcm0gdW5pdCBJRCIKICB9LCB7CiAgICAiaWQiIDogIiNyZ19wbGF0Zm9ybSIsCiAgICAidHlwZSIgOiBbICJudWxsIiwgewogICAgICAibmFtZSIgOiAicmdfcGxhdGZvcm0iLAogICAgICAic3ltYm9scyIgOiBbICJMUyA0NTQiLCAiSGVsaWNvcyIsICJJbGx1bWluYSIsICJBQkkgU09MaUQiLCAiSW9uIFRvcnJlbnQgUEdNIiwgIlBhY0JpbyIgXSwKICAgICAgInR5cGUiIDogImVudW0iCiAgICB9IF0sCiAgICAiZGVzY3JpcHRpb24iIDogIlNwZWNpZnkgdGhlIHZlcnNpb24gb2YgdGhlIHRlY2hub2xvZ3kgdGhhdCB3YXMgdXNlZCBmb3Igc2VxdWVuY2luZyBvciBhc3NheWluZy4iLAogICAgInNiZzp0b29sRGVmYXVsdFZhbHVlIiA6ICJJbmZlcnJlZCBmcm9tIG1ldGFkYXRhIiwKICAgICJzYmc6Y2F0ZWdvcnkiIDogIlJlYWQgZ3JvdXAiLAogICAgImxhYmVsIiA6ICJQbGF0Zm9ybSIKICB9LCB7CiAgICAiaWQiIDogIiNyZ19tZmwiLAogICAgInR5cGUiIDogWyAibnVsbCIsICJzdHJpbmciIF0sCiAgICAiZGVzY3JpcHRpb24iIDogIlNwZWNpZnkgdGhlIG1lZGlhbiBmcmFnbWVudCBsZW5ndGggZm9yIFJHIGxpbmUuIiwKICAgICJzYmc6dG9vbERlZmF1bHRWYWx1ZSIgOiAiSW5mZXJyZWQgZnJvbSBtZXRhZGF0YSIsCiAgICAic2JnOmNhdGVnb3J5IiA6ICJSZWFkIGdyb3VwIiwKICAgICJsYWJlbCIgOiAiTWVkaWFuIGZyYWdtZW50IGxlbmd0aCIKICB9LCB7CiAgICAiaWQiIDogIiNyZ19saWJyYXJ5X2lkIiwKICAgICJ0eXBlIiA6IFsgIm51bGwiLCAic3RyaW5nIiBdLAogICAgImRlc2NyaXB0aW9uIiA6ICJTcGVjaWZ5IHRoZSBsaWJyYXJ5IElEIGZvciBSRyBsaW5lLiIsCiAgICAic2JnOnRvb2xEZWZhdWx0VmFsdWUiIDogIkluZmVycmVkIGZyb20gbWV0YWRhdGEiLAogICAgInNiZzpjYXRlZ29yeSIgOiAiUmVhZCBncm91cCIsCiAgICAibGFiZWwiIDogIkxpYnJhcnkgSUQiCiAgfSwgewogICAgImlkIiA6ICIjcmVhZHMiLAogICAgInR5cGUiIDogWyB7CiAgICAgICJpdGVtcyIgOiAiRmlsZSIsCiAgICAgICJuYW1lIiA6ICJyZWFkcyIsCiAgICAgICJ0eXBlIiA6ICJhcnJheSIKICAgIH0gXSwKICAgICJpbnB1dEJpbmRpbmciIDogewogICAgICAiaXRlbVNlcGFyYXRvciIgOiAiICIsCiAgICAgICJwb3NpdGlvbiIgOiAxMCwKICAgICAgInNiZzpjbWRJbmNsdWRlIiA6IHRydWUsCiAgICAgICJzZXBhcmF0ZSIgOiB0cnVlLAogICAgICAidmFsdWVGcm9tIiA6IHsKICAgICAgICAiY2xhc3MiIDogIkV4cHJlc3Npb24iLAogICAgICAgICJlbmdpbmUiIDogIiNjd2wtanMtZW5naW5lIiwKICAgICAgICAic2NyaXB0IiA6ICJ7XG4gIHZhciBsaXN0ID0gW10uY29uY2F0KCRqb2IuaW5wdXRzLnJlYWRzKVxuICB2YXIgYWxsX3NhbXBsZXMgPSBbXVxuICBcbiAgZ2V0VW5pcXVlID0gZnVuY3Rpb24oYXJyKXtcbiAgICB2YXIgdSA9IHt9LCBhID0gW107XG4gICAgZm9yKHZhciBpID0gMCwgbCA9IGFyci5sZW5ndGg7IGkgPCBsOyArK2kpe1xuICAgICAgaWYodS5oYXNPd25Qcm9wZXJ0eShhcnJbaV0pKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgYS5wdXNoKGFycltpXSk7XG4gICAgICB1W2FycltpXV0gPSAxO1xuICAgIH1cbiAgICByZXR1cm4gYTtcbiAgfVxuICAgIFxuICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCBsaXN0Lmxlbmd0aDsgKytpbmRleCkge1xuICAgIGlmIChsaXN0W2luZGV4XS5tZXRhZGF0YSAhPSBudWxsKXtcbiAgICAgIGFsbF9zYW1wbGVzLnB1c2gobGlzdFtpbmRleF0ubWV0YWRhdGEuc2FtcGxlX2lkKVxuICAgIH1cbiAgfVxuICBzYW1wbGVzID0gZ2V0VW5pcXVlKGFsbF9zYW1wbGVzKVxuICBcbiAgdmFyIHNhbXBsZXNfZ2l2ZW4gPSBhbGxfc2FtcGxlcy5sZW5ndGggPT0gbGlzdC5sZW5ndGhcbiAgXG4gIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IGxpc3QubGVuZ3RoOyArK2luZGV4KSB7XG4gICAgaWYgKGxpc3RbaW5kZXhdLm1ldGFkYXRhICE9IG51bGwpe1xuICAgICAgYWxsX3NhbXBsZXMucHVzaChsaXN0W2luZGV4XS5tZXRhZGF0YS5zYW1wbGVfaWQpXG4gICAgfVxuICB9XG4gIHNhbXBsZXMgPSBnZXRVbmlxdWUoYWxsX3NhbXBsZXMpXG4gIHZhciByZXNwID0gW11cbiAgXG4gIGlmIChsaXN0Lmxlbmd0aCA9PSAxKXtcbiAgICByZXNwLnB1c2gobGlzdFswXS5wYXRoKVxuICAgIFxuICB9ZWxzZSBpZiAobGlzdC5sZW5ndGggPT0gMil7ICAgIFxuICAgIFxuICAgIGxlZnQgPSBcIlwiXG4gICAgcmlnaHQgPSBcIlwiXG4gICAgICBcbiAgICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCBsaXN0Lmxlbmd0aDsgKytpbmRleCkge1xuICAgICAgXG4gICAgICBpZiAobGlzdFtpbmRleF0ubWV0YWRhdGEgIT0gbnVsbCl7XG4gICAgICAgIGlmIChsaXN0W2luZGV4XS5tZXRhZGF0YS5wYWlyZWRfZW5kID09IDEpe1xuICAgICAgICAgIGxlZnQgPSBsaXN0W2luZGV4XS5wYXRoXG4gICAgICAgIH1lbHNlIGlmIChsaXN0W2luZGV4XS5tZXRhZGF0YS5wYWlyZWRfZW5kID09IDIpe1xuICAgICAgICAgIHJpZ2h0ID0gbGlzdFtpbmRleF0ucGF0aFxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIFxuICAgIGlmIChsZWZ0ICE9IFwiXCIgJiYgcmlnaHQgIT0gXCJcIil7ICAgICAgXG4gICAgICByZXNwLnB1c2gobGVmdClcbiAgICAgIHJlc3AucHVzaChyaWdodClcbiAgICB9XG4gIH1cbiAgZWxzZSBpZiAobGlzdC5sZW5ndGggPiAyKXtcbiAgICBsZWZ0ID0gW11cbiAgICByaWdodCA9IFtdXG4gICAgaWYgKHNhbXBsZXNfZ2l2ZW4pe1xuICAgICAgZm9yIChzYW1wbGVfaW5kID0gMDsgc2FtcGxlX2luZCA8IHNhbXBsZXMubGVuZ3RoOyArK3NhbXBsZV9pbmQpe1xuICAgICAgICBmb3IgKHJlYWRfaW5kID0gMDsgcmVhZF9pbmQgPCBsaXN0Lmxlbmd0aDsgKytyZWFkX2luZCl7XG4gICAgICAgICAgaWYgKGxpc3RbcmVhZF9pbmRdLm1ldGFkYXRhICE9IG51bGwpe1xuICAgICAgICAgICAgaWYgKGxpc3RbcmVhZF9pbmRdLm1ldGFkYXRhLnBhaXJlZF9lbmQgPT0gMSAmJiBsaXN0W3JlYWRfaW5kXS5tZXRhZGF0YS5zYW1wbGVfaWQgPT0gc2FtcGxlc1tzYW1wbGVfaW5kXSl7XG4gICAgICAgICAgICAgIGxlZnQucHVzaChsaXN0W3JlYWRfaW5kXS5wYXRoKVxuICAgICAgICAgICAgfWVsc2UgaWYgKGxpc3RbcmVhZF9pbmRdLm1ldGFkYXRhLnBhaXJlZF9lbmQgPT0gMiAmJiBsaXN0W3JlYWRfaW5kXS5tZXRhZGF0YS5zYW1wbGVfaWQgPT0gc2FtcGxlc1tzYW1wbGVfaW5kXSl7XG4gICAgICAgICAgICAgIHJpZ2h0LnB1c2gobGlzdFtyZWFkX2luZF0ucGF0aCl9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgbGlzdC5sZW5ndGg7ICsraW5kZXgpIHtcblxuICAgICAgICAgIGlmIChsaXN0W2luZGV4XS5tZXRhZGF0YSAhPSBudWxsKXtcbiAgICAgICAgICAgIGlmIChsaXN0W2luZGV4XS5tZXRhZGF0YS5wYWlyZWRfZW5kID09IDEpe1xuICAgICAgICAgICAgICBsZWZ0LnB1c2gobGlzdFtpbmRleF0ucGF0aClcbiAgICAgICAgICAgIH1lbHNlIGlmIChsaXN0W2luZGV4XS5tZXRhZGF0YS5wYWlyZWRfZW5kID09IDIpe1xuICAgICAgICAgICAgICByaWdodC5wdXNoKGxpc3RbaW5kZXhdLnBhdGgpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICBsZWZ0X2pvaW4gPSBsZWZ0LmpvaW4oKVxuICAgIHJpZ2h0X2pvaW4gPSByaWdodC5qb2luKClcbiAgICBpZiAobGVmdCAhPSBbXSAmJiByaWdodCAhPSBbXSl7ICAgICAgXG4gICAgICByZXNwLnB1c2gobGVmdF9qb2luKVxuICAgICAgcmVzcC5wdXNoKHJpZ2h0X2pvaW4pXG4gICAgfVxuICAgIH1cbiAgXG4gIGlmKHJlc3AubGVuZ3RoID4gMCl7ICAgIFxuICAgIHJldHVybiBcIi0tcmVhZEZpbGVzSW4gXCIuY29uY2F0KHJlc3Auam9pbihcIiBcIikpXG4gIH1cbn0iCiAgICAgIH0KICAgIH0sCiAgICAiZGVzY3JpcHRpb24iIDogIlJlYWQgc2VxdWVuY2UuIiwKICAgICJzYmc6Y2F0ZWdvcnkiIDogIkJhc2ljIiwKICAgICJsYWJlbCIgOiAiUmVhZCBzZXF1ZW5jZSIsCiAgICAic2JnOmZpbGVUeXBlcyIgOiAiRkFTVEEsIEZBU1RRLCBGQSwgRlEsIEZBU1RRLkdaLCBGUS5HWiwgRkFTVFEuQloyLCBGUS5CWjIiLAogICAgInJlcXVpcmVkIiA6IHRydWUKICB9LCB7CiAgICAiaWQiIDogIiNyZWFkTWF0ZXNMZW5ndGhzSW4iLAogICAgInR5cGUiIDogWyAibnVsbCIsIHsKICAgICAgIm5hbWUiIDogInJlYWRNYXRlc0xlbmd0aHNJbiIsCiAgICAgICJzeW1ib2xzIiA6IFsgIk5vdEVxdWFsIiwgIkVxdWFsIiBdLAogICAgICAidHlwZSIgOiAiZW51bSIKICAgIH0gXSwKICAgICJpbnB1dEJpbmRpbmciIDogewogICAgICAicHJlZml4IiA6ICItLXJlYWRNYXRlc0xlbmd0aHNJbiIsCiAgICAgICJzYmc6Y21kSW5jbHVkZSIgOiB0cnVlLAogICAgICAic2VwYXJhdGUiIDogdHJ1ZQogICAgfSwKICAgICJkZXNjcmlwdGlvbiIgOiAiRXF1YWwvTm90IGVxdWFsIC0gbGVuZ3RocyBvZiBuYW1lcywgc2VxdWVuY2VzLCBxdWFsaXRpZXMgZm9yIGJvdGggbWF0ZXMgYXJlIHRoZSBzYW1lL25vdCB0aGUgc2FtZS4gXCJOb3QgZXF1YWxcIiBpcyBzYWZlIGluIGFsbCBzaXR1YXRpb25zLiIsCiAgICAic2JnOnRvb2xEZWZhdWx0VmFsdWUiIDogIk5vdEVxdWFsIiwKICAgICJzYmc6Y2F0ZWdvcnkiIDogIlJlYWQgcGFyYW1ldGVycyIsCiAgICAibGFiZWwiIDogIlJlYWRzIGxlbmd0aHMiCiAgfSwgewogICAgImlkIiA6ICIjcmVhZE1hcE51bWJlciIsCiAgICAidHlwZSIgOiBbICJudWxsIiwgImludCIgXSwKICAgICJpbnB1dEJpbmRpbmciIDogewogICAgICAicHJlZml4IiA6ICItLXJlYWRNYXBOdW1iZXIiLAogICAgICAic2JnOmNtZEluY2x1ZGUiIDogdHJ1ZSwKICAgICAgInNlcGFyYXRlIiA6IHRydWUKICAgIH0sCiAgICAiZGVzY3JpcHRpb24iIDogIk51bWJlciBvZiByZWFkcyB0byBtYXAgZnJvbSB0aGUgYmVnaW5uaW5nIG9mIHRoZSBmaWxlLiIsCiAgICAic2JnOnRvb2xEZWZhdWx0VmFsdWUiIDogIi0xIiwKICAgICJzYmc6Y2F0ZWdvcnkiIDogIlJlYWQgcGFyYW1ldGVycyIsCiAgICAibGFiZWwiIDogIlJlYWRzIHRvIG1hcCIKICB9LCB7CiAgICAiaWQiIDogIiNxdWFudFRyYW5zY3JpcHRvbWVCYW4iLAogICAgInR5cGUiIDogWyAibnVsbCIsIHsKICAgICAgIm5hbWUiIDogInF1YW50VHJhbnNjcmlwdG9tZUJhbiIsCiAgICAgICJzeW1ib2xzIiA6IFsgIkluZGVsU29mdGNsaXBTaW5nbGVlbmQiLCAiU2luZ2xlZW5kIiBdLAogICAgICAidHlwZSIgOiAiZW51bSIKICAgIH0gXSwKICAgICJpbnB1dEJpbmRpbmciIDogewogICAgICAicHJlZml4IiA6ICItLXF1YW50VHJhbnNjcmlwdG9tZUJhbiIsCiAgICAgICJzYmc6Y21kSW5jbHVkZSIgOiB0cnVlLAogICAgICAic2VwYXJhdGUiIDogdHJ1ZQogICAgfSwKICAgICJkZXNjcmlwdGlvbiIgOiAiUHJvaGliaXQgdmFyaW91cyBhbGlnbm1lbnQgdHlwZS4gSW5kZWxTb2Z0Y2xpcFNpbmdsZWVuZDogcHJvaGliaXQgaW5kZWxzLCBzb2Z0IGNsaXBwaW5nIGFuZCBzaW5nbGUtZW5kIGFsaWdubWVudHMgLSBjb21wYXRpYmxlIHdpdGggUlNFTTsgU2luZ2xlZW5kOiBwcm9oaWJpdCBzaW5nbGUtZW5kIGFsaWdubWVudHMuIiwKICAgICJzYmc6dG9vbERlZmF1bHRWYWx1ZSIgOiAiSW5kZWxTb2Z0Y2xpcFNpbmdsZWVuZCIsCiAgICAic2JnOmNhdGVnb3J5IiA6ICJRdWFudGlmaWNhdGlvbiBvZiBBbm5vdGF0aW9ucyIsCiAgICAibGFiZWwiIDogIlByb2hpYml0IGFsaWdubWVudCB0eXBlIgogIH0sIHsKICAgICJpZCIgOiAiI3F1YW50TW9kZSIsCiAgICAidHlwZSIgOiBbICJudWxsIiwgewogICAgICAibmFtZSIgOiAicXVhbnRNb2RlIiwKICAgICAgInN5bWJvbHMiIDogWyAiVHJhbnNjcmlwdG9tZVNBTSIsICJHZW5lQ291bnRzIiwgIlRyYW5zY3JpcHRvbWVTQU0gR2VuZUNvdW50cyIgXSwKICAgICAgInR5cGUiIDogImVudW0iCiAgICB9IF0sCiAgICAiZGVzY3JpcHRpb24iIDogIlR5cGVzIG9mIHF1YW50aWZpY2F0aW9uIHJlcXVlc3RlZC4gJ1RyYW5zY3JpcHRvbWVTQU0nIG9wdGlvbiBvdXRwdXRzIFNBTS9CQU0gYWxpZ25tZW50cyB0byB0cmFuc2NyaXB0b21lIGludG8gYSBzZXBhcmF0ZSBmaWxlLiBXaXRoICdHZW5lQ291bnRzJyBvcHRpb24sIFNUQVIgd2lsbCBjb3VudCBudW1iZXIgb2YgcmVhZHMgcGVyIGdlbmUgd2hpbGUgbWFwcGluZy4iLAogICAgInNiZzp0b29sRGVmYXVsdFZhbHVlIiA6ICItIiwKICAgICJzYmc6Y2F0ZWdvcnkiIDogIlF1YW50aWZpY2F0aW9uIG9mIEFubm90YXRpb25zIiwKICAgICJsYWJlbCIgOiAiUXVhbnRpZmljYXRpb24gbW9kZSIKICB9LCB7CiAgICAiaWQiIDogIiNvdXRTb3J0aW5nVHlwZSIsCiAgICAidHlwZSIgOiBbICJudWxsIiwgewogICAgICAibmFtZSIgOiAib3V0U29ydGluZ1R5cGUiLAogICAgICAic3ltYm9scyIgOiBbICJVbnNvcnRlZCIsICJTb3J0ZWRCeUNvb3JkaW5hdGUiIF0sCiAgICAgICJ0eXBlIiA6ICJlbnVtIgogICAgfSBdLAogICAgImRlc2NyaXB0aW9uIiA6ICJUeXBlIG9mIG91dHB1dCBzb3J0aW5nLiIsCiAgICAic2JnOnRvb2xEZWZhdWx0VmFsdWUiIDogIlVuc29ydGVkIiwKICAgICJzYmc6Y2F0ZWdvcnkiIDogIk91dHB1dCIsCiAgICAibGFiZWwiIDogIk91dHB1dCBzb3J0aW5nIHR5cGUiCiAgfSwgewogICAgImlkIiA6ICIjb3V0U0pmaWx0ZXJSZWFkcyIsCiAgICAidHlwZSIgOiBbICJudWxsIiwgewogICAgICAibmFtZSIgOiAib3V0U0pmaWx0ZXJSZWFkcyIsCiAgICAgICJzeW1ib2xzIiA6IFsgIkFsbCIsICJVbmlxdWUiIF0sCiAgICAgICJ0eXBlIiA6ICJlbnVtIgogICAgfSBdLAogICAgImlucHV0QmluZGluZyIgOiB7CiAgICAgICJwcmVmaXgiIDogIi0tb3V0U0pmaWx0ZXJSZWFkcyIsCiAgICAgICJzYmc6Y21kSW5jbHVkZSIgOiB0cnVlLAogICAgICAic2VwYXJhdGUiIDogdHJ1ZQogICAgfSwKICAgICJkZXNjcmlwdGlvbiIgOiAiV2hpY2ggcmVhZHMgdG8gY29uc2lkZXIgZm9yIGNvbGxhcHNlZCBzcGxpY2UganVuY3Rpb25zIG91dHB1dC4gQWxsOiBhbGwgcmVhZHMsIHVuaXF1ZS0gYW5kIG11bHRpLW1hcHBlcnM7IFVuaXF1ZTogdW5pcXVlbHkgbWFwcGluZyByZWFkcyBvbmx5LiIsCiAgICAic2JnOnRvb2xEZWZhdWx0VmFsdWUiIDogIkFsbCIsCiAgICAic2JnOmNhdGVnb3J5IiA6ICJPdXRwdXQgZmlsdGVyaW5nOiBzcGxpY2UganVuY3Rpb25zIiwKICAgICJsYWJlbCIgOiAiQ29sbGFwc2VkIGp1bmN0aW9ucyByZWFkcyIKICB9LCB7CiAgICAiaWQiIDogIiNvdXRTSmZpbHRlck92ZXJoYW5nTWluIiwKICAgICJ0eXBlIiA6IFsgIm51bGwiLCB7CiAgICAgICJpdGVtcyIgOiAiaW50IiwKICAgICAgInR5cGUiIDogImFycmF5IgogICAgfSBdLAogICAgImlucHV0QmluZGluZyIgOiB7CiAgICAgICJpdGVtU2VwYXJhdG9yIiA6ICIgIiwKICAgICAgInByZWZpeCIgOiAiLS1vdXRTSmZpbHRlck92ZXJoYW5nTWluIiwKICAgICAgInNiZzpjbWRJbmNsdWRlIiA6IHRydWUsCiAgICAgICJzZXBhcmF0ZSIgOiB0cnVlCiAgICB9LAogICAgImRlc2NyaXB0aW9uIiA6ICJNaW5pbXVtIG92ZXJoYW5nIGxlbmd0aCBmb3Igc3BsaWNlIGp1bmN0aW9ucyBvbiBib3RoIHNpZGVzIGZvciBlYWNoIG9mIHRoZSBtb3RpZnMuIFRvIHNldCBubyBvdXRwdXQgZm9yIGRlc2lyZWQgbW90aWYsIGFzc2lnbiAtMSB0byB0aGUgY29ycmVzcG9uZGluZyBmaWVsZC4gRG9lcyBub3QgYXBwbHkgdG8gYW5ub3RhdGVkIGp1bmN0aW9ucy4iLAogICAgInNiZzp0b29sRGVmYXVsdFZhbHVlIiA6ICIzMCAxMiAxMiAxMiIsCiAgICAic2JnOmNhdGVnb3J5IiA6ICJPdXRwdXQgZmlsdGVyaW5nOiBzcGxpY2UganVuY3Rpb25zIiwKICAgICJsYWJlbCIgOiAiTWluIG92ZXJoYW5nIFNKIgogIH0sIHsKICAgICJpZCIgOiAiI291dFNKZmlsdGVySW50cm9uTWF4VnNSZWFkTiIsCiAgICAidHlwZSIgOiBbICJudWxsIiwgewogICAgICAiaXRlbXMiIDogImludCIsCiAgICAgICJ0eXBlIiA6ICJhcnJheSIKICAgIH0gXSwKICAgICJpbnB1dEJpbmRpbmciIDogewogICAgICAiaXRlbVNlcGFyYXRvciIgOiAiICIsCiAgICAgICJwcmVmaXgiIDogIi0tb3V0U0pmaWx0ZXJJbnRyb25NYXhWc1JlYWROIiwKICAgICAgInNiZzpjbWRJbmNsdWRlIiA6IHRydWUsCiAgICAgICJzZXBhcmF0ZSIgOiB0cnVlCiAgICB9LAogICAgImRlc2NyaXB0aW9uIiA6ICJNYXhpbXVtIGdhcCBhbGxvd2VkIGZvciBqdW5jdGlvbnMgc3VwcG9ydGVkIGJ5IDEsMiwzLi4uTiByZWFkcyAoaW50ID49IDApIGkuZS4gYnkgZGVmYXVsdCBqdW5jdGlvbnMgc3VwcG9ydGVkIGJ5IDEgcmVhZCBjYW4gaGF2ZSBnYXBzIDw9NTAwMDBiLCBieSAyIHJlYWRzOiA8PTEwMDAwMGIsIGJ5IDMgcmVhZHM6IDw9MjAwMDAwLiBCeSA0IG9yIG1vcmUgcmVhZHM6IGFueSBnYXAgPD1hbGlnbkludHJvbk1heC4gRG9lcyBub3QgYXBwbHkgdG8gYW5ub3RhdGVkIGp1bmN0aW9ucy4iLAogICAgInNiZzp0b29sRGVmYXVsdFZhbHVlIiA6ICI1MDAwMCAxMDAwMDAgMjAwMDAwIiwKICAgICJzYmc6Y2F0ZWdvcnkiIDogIk91dHB1dCBmaWx0ZXJpbmc6IHNwbGljZSBqdW5jdGlvbnMiLAogICAgImxhYmVsIiA6ICJNYXggZ2FwIGFsbG93ZWQiCiAgfSwgewogICAgImlkIiA6ICIjb3V0U0pmaWx0ZXJEaXN0VG9PdGhlclNKbWluIiwKICAgICJ0eXBlIiA6IFsgIm51bGwiLCB7CiAgICAgICJpdGVtcyIgOiAiaW50IiwKICAgICAgInR5cGUiIDogImFycmF5IgogICAgfSBdLAogICAgImlucHV0QmluZGluZyIgOiB7CiAgICAgICJpdGVtU2VwYXJhdG9yIiA6ICIgIiwKICAgICAgInByZWZpeCIgOiAiLS1vdXRTSmZpbHRlckRpc3RUb090aGVyU0ptaW4iLAogICAgICAic2JnOmNtZEluY2x1ZGUiIDogdHJ1ZSwKICAgICAgInNlcGFyYXRlIiA6IHRydWUKICAgIH0sCiAgICAiZGVzY3JpcHRpb24iIDogIk1pbmltdW0gYWxsb3dlZCBkaXN0YW5jZSB0byBvdGhlciBqdW5jdGlvbnMnIGRvbm9yL2FjY2VwdG9yIGZvciBlYWNoIG9mIHRoZSBtb3RpZnMgKGludCA+PSAwKS4gRG9lcyBub3QgYXBwbHkgdG8gYW5ub3RhdGVkIGp1bmN0aW9ucy4iLAogICAgInNiZzp0b29sRGVmYXVsdFZhbHVlIiA6ICIxMCAwIDUgMTAiLAogICAgInNiZzpjYXRlZ29yeSIgOiAiT3V0cHV0IGZpbHRlcmluZzogc3BsaWNlIGp1bmN0aW9ucyIsCiAgICAibGFiZWwiIDogIk1pbiBkaXN0YW5jZSB0byBvdGhlciBkb25vci9hY2NlcHRvciIKICB9LCB7CiAgICAiaWQiIDogIiNvdXRTSmZpbHRlckNvdW50VW5pcXVlTWluIiwKICAgICJ0eXBlIiA6IFsgIm51bGwiLCB7CiAgICAgICJpdGVtcyIgOiAiaW50IiwKICAgICAgInR5cGUiIDogImFycmF5IgogICAgfSBdLAogICAgImlucHV0QmluZGluZyIgOiB7CiAgICAgICJpdGVtU2VwYXJhdG9yIiA6ICIgIiwKICAgICAgInByZWZpeCIgOiAiLS1vdXRTSmZpbHRlckNvdW50VW5pcXVlTWluIiwKICAgICAgInNiZzpjbWRJbmNsdWRlIiA6IHRydWUsCiAgICAgICJzZXBhcmF0ZSIgOiB0cnVlCiAgICB9LAogICAgImRlc2NyaXB0aW9uIiA6ICJNaW5pbXVtIHVuaXF1ZWx5IG1hcHBpbmcgcmVhZCBjb3VudCBwZXIganVuY3Rpb24gZm9yIGVhY2ggb2YgdGhlIG1vdGlmcy4gVG8gc2V0IG5vIG91dHB1dCBmb3IgZGVzaXJlZCBtb3RpZiwgYXNzaWduIC0xIHRvIHRoZSBjb3JyZXNwb25kaW5nIGZpZWxkLiBKdW5jdGlvbnMgYXJlIG91dHB1dCBpZiBvbmUgb2YgLS1vdXRTSmZpbHRlckNvdW50VW5pcXVlTWluIE9SIC0tb3V0U0pmaWx0ZXJDb3VudFRvdGFsTWluIGNvbmRpdGlvbnMgYXJlIHNhdGlzZmllZC4gRG9lcyBub3QgYXBwbHkgdG8gYW5ub3RhdGVkIGp1bmN0aW9ucy4iLAogICAgInNiZzp0b29sRGVmYXVsdFZhbHVlIiA6ICIzIDEgMSAxIiwKICAgICJzYmc6Y2F0ZWdvcnkiIDogIk91dHB1dCBmaWx0ZXJpbmc6IHNwbGljZSBqdW5jdGlvbnMiLAogICAgImxhYmVsIiA6ICJNaW4gdW5pcXVlIGNvdW50IgogIH0sIHsKICAgICJpZCIgOiAiI291dFNKZmlsdGVyQ291bnRUb3RhbE1pbiIsCiAgICAidHlwZSIgOiBbICJudWxsIiwgewogICAgICAiaXRlbXMiIDogImludCIsCiAgICAgICJ0eXBlIiA6ICJhcnJheSIKICAgIH0gXSwKICAgICJpbnB1dEJpbmRpbmciIDogewogICAgICAiaXRlbVNlcGFyYXRvciIgOiAiICIsCiAgICAgICJwcmVmaXgiIDogIi0tb3V0U0pmaWx0ZXJDb3VudFRvdGFsTWluIiwKICAgICAgInNiZzpjbWRJbmNsdWRlIiA6IHRydWUsCiAgICAgICJzZXBhcmF0ZSIgOiB0cnVlCiAgICB9LAogICAgImRlc2NyaXB0aW9uIiA6ICJNaW5pbXVtIHRvdGFsIChtdWx0aS1tYXBwaW5nK3VuaXF1ZSkgcmVhZCBjb3VudCBwZXIganVuY3Rpb24gZm9yIGVhY2ggb2YgdGhlIG1vdGlmcy4gVG8gc2V0IG5vIG91dHB1dCBmb3IgZGVzaXJlZCBtb3RpZiwgYXNzaWduIC0xIHRvIHRoZSBjb3JyZXNwb25kaW5nIGZpZWxkLiBKdW5jdGlvbnMgYXJlIG91dHB1dCBpZiBvbmUgb2YgLS1vdXRTSmZpbHRlckNvdW50VW5pcXVlTWluIE9SIC0tb3V0U0pmaWx0ZXJDb3VudFRvdGFsTWluIGNvbmRpdGlvbnMgYXJlIHNhdGlzZmllZC4gRG9lcyBub3QgYXBwbHkgdG8gYW5ub3RhdGVkIGp1bmN0aW9ucy4iLAogICAgInNiZzp0b29sRGVmYXVsdFZhbHVlIiA6ICIzIDEgMSAxIiwKICAgICJzYmc6Y2F0ZWdvcnkiIDogIk91dHB1dCBmaWx0ZXJpbmc6IHNwbGljZSBqdW5jdGlvbnMiLAogICAgImxhYmVsIiA6ICJNaW4gdG90YWwgY291bnQiCiAgfSwgewogICAgImlkIiA6ICIjb3V0U0FNdW5tYXBwZWQiLAogICAgInR5cGUiIDogWyAibnVsbCIsIHsKICAgICAgIm5hbWUiIDogIm91dFNBTXVubWFwcGVkIiwKICAgICAgInN5bWJvbHMiIDogWyAiTm9uZSIsICJXaXRoaW4iLCAiV2l0aGluIEtlZXBQYWlycyIgXSwKICAgICAgInR5cGUiIDogImVudW0iCiAgICB9IF0sCiAgICAiaW5wdXRCaW5kaW5nIiA6IHsKICAgICAgInByZWZpeCIgOiAiLS1vdXRTQU11bm1hcHBlZCIsCiAgICAgICJzYmc6Y21kSW5jbHVkZSIgOiB0cnVlLAogICAgICAic2VwYXJhdGUiIDogdHJ1ZQogICAgfSwKICAgICJkZXNjcmlwdGlvbiIgOiAiT3V0cHV0IG9mIHVubWFwcGVkIHJlYWRzIGluIHRoZSBTQU0gZm9ybWF0LiBOb25lOiBubyBvdXRwdXQgV2l0aGluOiBvdXRwdXQgdW5tYXBwZWQgcmVhZHMgd2l0aGluIHRoZSBtYWluIFNBTSBmaWxlIChpLmUuIEFsaWduZWQub3V0LnNhbSkuIiwKICAgICJzYmc6dG9vbERlZmF1bHRWYWx1ZSIgOiAiTm9uZSIsCiAgICAic2JnOmNhdGVnb3J5IiA6ICJPdXRwdXQiLAogICAgImxhYmVsIiA6ICJXcml0ZSB1bm1hcHBlZCBpbiBTQU0iCiAgfSwgewogICAgImlkIiA6ICIjb3V0U0FNdHlwZSIsCiAgICAidHlwZSIgOiBbICJudWxsIiwgewogICAgICAibmFtZSIgOiAib3V0U0FNdHlwZSIsCiAgICAgICJzeW1ib2xzIiA6IFsgIlNBTSIsICJCQU0iIF0sCiAgICAgICJ0eXBlIiA6ICJlbnVtIgogICAgfSBdLAogICAgImlucHV0QmluZGluZyIgOiB7CiAgICAgICJzYmc6Y21kSW5jbHVkZSIgOiB0cnVlLAogICAgICAic2VwYXJhdGUiIDogdHJ1ZSwKICAgICAgInZhbHVlRnJvbSIgOiB7CiAgICAgICAgImNsYXNzIiA6ICJFeHByZXNzaW9uIiwKICAgICAgICAiZW5naW5lIiA6ICIjY3dsLWpzLWVuZ2luZSIsCiAgICAgICAgInNjcmlwdCIgOiAie1xuICBTQU1fdHlwZSA9ICRqb2IuaW5wdXRzLm91dFNBTXR5cGVcbiAgU09SVF90eXBlID0gJGpvYi5pbnB1dHMub3V0U29ydGluZ1R5cGVcbiAgaWYgKFNBTV90eXBlICYmIFNPUlRfdHlwZSkge1xuICAgIGlmIChTQU1fdHlwZT09XCJTQU1cIikge1xuICAgICAgcmV0dXJuIFwiLS1vdXRTQU10eXBlIFNBTVwiXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBcIi0tb3V0U0FNdHlwZSBcIi5jb25jYXQoU0FNX3R5cGUsIFwiIFwiLCBTT1JUX3R5cGUpXG4gICAgfVxuICB9IGVsc2UgaWYgKFNBTV90eXBlICYmIFNPUlRfdHlwZT09bnVsbCkge1xuICAgIGlmIChTQU1fdHlwZT09XCJTQU1cIikge1xuICAgICAgcmV0dXJuIFwiLS1vdXRTQU10eXBlIFNBTVwiXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBcIi0tb3V0U0FNdHlwZSBcIi5jb25jYXQoU0FNX3R5cGUsIFwiIFVuc29ydGVkXCIpXG4gICAgfVxuICB9XG59IgogICAgICB9CiAgICB9LAogICAgImRlc2NyaXB0aW9uIiA6ICJGb3JtYXQgb2Ygb3V0cHV0IGFsaWdubWVudHMuIiwKICAgICJzYmc6dG9vbERlZmF1bHRWYWx1ZSIgOiAiU0FNIiwKICAgICJzYmc6Y2F0ZWdvcnkiIDogIk91dHB1dCIsCiAgICAibGFiZWwiIDogIk91dHB1dCBmb3JtYXQiCiAgfSwgewogICAgImlkIiA6ICIjb3V0U0FNc3RyYW5kRmllbGQiLAogICAgInR5cGUiIDogWyAibnVsbCIsIHsKICAgICAgIm5hbWUiIDogIm91dFNBTXN0cmFuZEZpZWxkIiwKICAgICAgInN5bWJvbHMiIDogWyAiTm9uZSIsICJpbnRyb25Nb3RpZiIgXSwKICAgICAgInR5cGUiIDogImVudW0iCiAgICB9IF0sCiAgICAiaW5wdXRCaW5kaW5nIiA6IHsKICAgICAgInByZWZpeCIgOiAiLS1vdXRTQU1zdHJhbmRGaWVsZCIsCiAgICAgICJzYmc6Y21kSW5jbHVkZSIgOiB0cnVlLAogICAgICAic2VwYXJhdGUiIDogdHJ1ZQogICAgfSwKICAgICJkZXNjcmlwdGlvbiIgOiAiQ3VmZmxpbmtzLWxpa2Ugc3RyYW5kIGZpZWxkIGZsYWcuIE5vbmU6IG5vdCB1c2VkOyBpbnRyb25Nb3RpZjogc3RyYW5kIGRlcml2ZWQgZnJvbSB0aGUgaW50cm9uIG1vdGlmLiBSZWFkcyB3aXRoIGluY29uc2lzdGVudCBhbmQvb3Igbm9uLWNhbm9uaWNhbCBpbnRyb25zIGFyZSBmaWx0ZXJlZCBvdXQuIiwKICAgICJzYmc6dG9vbERlZmF1bHRWYWx1ZSIgOiAiTm9uZSIsCiAgICAic2JnOmNhdGVnb3J5IiA6ICJPdXRwdXQiLAogICAgImxhYmVsIiA6ICJTdHJhbmQgZmllbGQgZmxhZyIKICB9LCB7CiAgICAiaWQiIDogIiNvdXRTQU1yZWFkSUQiLAogICAgInR5cGUiIDogWyAibnVsbCIsIHsKICAgICAgIm5hbWUiIDogIm91dFNBTXJlYWRJRCIsCiAgICAgICJzeW1ib2xzIiA6IFsgIlN0YW5kYXJkIiwgIk51bWJlciIgXSwKICAgICAgInR5cGUiIDogImVudW0iCiAgICB9IF0sCiAgICAiaW5wdXRCaW5kaW5nIiA6IHsKICAgICAgInByZWZpeCIgOiAiLS1vdXRTQU1yZWFkSUQiLAogICAgICAic2JnOmNtZEluY2x1ZGUiIDogdHJ1ZSwKICAgICAgInNlcGFyYXRlIiA6IHRydWUKICAgIH0sCiAgICAiZGVzY3JpcHRpb24iIDogIlJlYWQgSUQgcmVjb3JkIHR5cGUuIFN0YW5kYXJkOiBmaXJzdCB3b3JkICh1bnRpbCBzcGFjZSkgZnJvbSB0aGUgRkFTVHggcmVhZCBJRCBsaW5lLCByZW1vdmluZyAvMSwvMiBmcm9tIHRoZSBlbmQ7IE51bWJlcjogcmVhZCBudW1iZXIgKGluZGV4KSBpbiB0aGUgRkFTVHggZmlsZS4iLAogICAgInNiZzp0b29sRGVmYXVsdFZhbHVlIiA6ICJTdGFuZGFyZCIsCiAgICAic2JnOmNhdGVnb3J5IiA6ICJPdXRwdXQiLAogICAgImxhYmVsIiA6ICJSZWFkIElEIgogIH0sIHsKICAgICJpZCIgOiAiI291dFNBTXByaW1hcnlGbGFnIiwKICAgICJ0eXBlIiA6IFsgIm51bGwiLCB7CiAgICAgICJuYW1lIiA6ICJvdXRTQU1wcmltYXJ5RmxhZyIsCiAgICAgICJzeW1ib2xzIiA6IFsgIk9uZUJlc3RTY29yZSIsICJBbGxCZXN0U2NvcmUiIF0sCiAgICAgICJ0eXBlIiA6ICJlbnVtIgogICAgfSBdLAogICAgImlucHV0QmluZGluZyIgOiB7CiAgICAgICJwcmVmaXgiIDogIi0tb3V0U0FNcHJpbWFyeUZsYWciLAogICAgICAic2JnOmNtZEluY2x1ZGUiIDogdHJ1ZSwKICAgICAgInNlcGFyYXRlIiA6IHRydWUKICAgIH0sCiAgICAiZGVzY3JpcHRpb24iIDogIldoaWNoIGFsaWdubWVudHMgYXJlIGNvbnNpZGVyZWQgcHJpbWFyeSAtIGFsbCBvdGhlcnMgd2lsbCBiZSBtYXJrZWQgd2l0aCAweDEwMCBiaXQgaW4gdGhlIEZMQUcuIE9uZUJlc3RTY29yZTogb25seSBvbmUgYWxpZ25tZW50IHdpdGggdGhlIGJlc3Qgc2NvcmUgaXMgcHJpbWFyeTsgQWxsQmVzdFNjb3JlOiBhbGwgYWxpZ25tZW50cyB3aXRoIHRoZSBiZXN0IHNjb3JlIGFyZSBwcmltYXJ5LiIsCiAgICAic2JnOnRvb2xEZWZhdWx0VmFsdWUiIDogIk9uZUJlc3RTY29yZSIsCiAgICAic2JnOmNhdGVnb3J5IiA6ICJPdXRwdXQiLAogICAgImxhYmVsIiA6ICJQcmltYXJ5IGFsaWdubWVudHMiCiAgfSwgewogICAgImlkIiA6ICIjb3V0U0FNb3JkZXIiLAogICAgInR5cGUiIDogWyAibnVsbCIsIHsKICAgICAgIm5hbWUiIDogIm91dFNBTW9yZGVyIiwKICAgICAgInN5bWJvbHMiIDogWyAiUGFpcmVkIiwgIlBhaXJlZEtlZXBJbnB1dE9yZGVyIiBdLAogICAgICAidHlwZSIgOiAiZW51bSIKICAgIH0gXSwKICAgICJpbnB1dEJpbmRpbmciIDogewogICAgICAicHJlZml4IiA6ICItLW91dFNBTW9yZGVyIiwKICAgICAgInNiZzpjbWRJbmNsdWRlIiA6IHRydWUsCiAgICAgICJzZXBhcmF0ZSIgOiB0cnVlCiAgICB9LAogICAgImRlc2NyaXB0aW9uIiA6ICJUeXBlIG9mIHNvcnRpbmcgZm9yIHRoZSBTQU0gb3V0cHV0LiBQYWlyZWQ6IG9uZSBtYXRlIGFmdGVyIHRoZSBvdGhlciBmb3IgYWxsIHBhaXJlZCBhbGlnbm1lbnRzOyBQYWlyZWRLZWVwSW5wdXRPcmRlcjogb25lIG1hdGUgYWZ0ZXIgdGhlIG90aGVyIGZvciBhbGwgcGFpcmVkIGFsaWdubWVudHMsIHRoZSBvcmRlciBpcyBrZXB0IHRoZSBzYW1lIGFzIGluIHRoZSBpbnB1dCBGQVNUUSBmaWxlcy4iLAogICAgInNiZzp0b29sRGVmYXVsdFZhbHVlIiA6ICJQYWlyZWQiLAogICAgInNiZzpjYXRlZ29yeSIgOiAiT3V0cHV0IiwKICAgICJsYWJlbCIgOiAiU29ydGluZyBpbiBTQU0iCiAgfSwgewogICAgImlkIiA6ICIjb3V0U0FNbXVsdE5tYXgiLAogICAgInR5cGUiIDogWyAibnVsbCIsICJpbnQiIF0sCiAgICAiaW5wdXRCaW5kaW5nIiA6IHsKICAgICAgInByZWZpeCIgOiAiLS1vdXRTQU1tdWx0Tm1heCIsCiAgICAgICJzYmc6Y21kSW5jbHVkZSIgOiB0cnVlLAogICAgICAic2VwYXJhdGUiIDogdHJ1ZQogICAgfSwKICAgICJkZXNjcmlwdGlvbiIgOiAiTWF4IG51bWJlciBvZiBtdWx0aXBsZSBhbGlnbm1lbnRzIGZvciBhIHJlYWQgdGhhdCB3aWxsIGJlIG91dHB1dCB0byB0aGUgU0FNL0JBTSBmaWxlcy4iLAogICAgInNiZzp0b29sRGVmYXVsdFZhbHVlIiA6ICItMSIsCiAgICAic2JnOmNhdGVnb3J5IiA6ICJPdXRwdXQiLAogICAgImxhYmVsIiA6ICJNYXggbnVtYmVyIG9mIG11bHRpcGxlIGFsaWdubWVudCIKICB9LCB7CiAgICAiaWQiIDogIiNvdXRTQU1tb2RlIiwKICAgICJ0eXBlIiA6IFsgIm51bGwiLCB7CiAgICAgICJuYW1lIiA6ICJvdXRTQU1tb2RlIiwKICAgICAgInN5bWJvbHMiIDogWyAiRnVsbCIsICJOb1FTIiwgIk5vbmUiIF0sCiAgICAgICJ0eXBlIiA6ICJlbnVtIgogICAgfSBdLAogICAgImlucHV0QmluZGluZyIgOiB7CiAgICAgICJwcmVmaXgiIDogIi0tb3V0U0FNbW9kZSIsCiAgICAgICJzYmc6Y21kSW5jbHVkZSIgOiB0cnVlLAogICAgICAic2VwYXJhdGUiIDogdHJ1ZQogICAgfSwKICAgICJkZXNjcmlwdGlvbiIgOiAiTW9kZSBvZiBTQU0gb3V0cHV0LiBGdWxsOiBmdWxsIFNBTSBvdXRwdXQ7IE5vUVM6IGZ1bGwgU0FNIGJ1dCB3aXRob3V0IHF1YWxpdHkgc2NvcmVzLiIsCiAgICAic2JnOnRvb2xEZWZhdWx0VmFsdWUiIDogIkZ1bGwiLAogICAgInNiZzpjYXRlZ29yeSIgOiAiT3V0cHV0IiwKICAgICJsYWJlbCIgOiAiU0FNIG1vZGUiCiAgfSwgewogICAgImlkIiA6ICIjb3V0U0FNbWFwcVVuaXF1ZSIsCiAgICAidHlwZSIgOiBbICJudWxsIiwgImludCIgXSwKICAgICJpbnB1dEJpbmRpbmciIDogewogICAgICAicHJlZml4IiA6ICItLW91dFNBTW1hcHFVbmlxdWUiLAogICAgICAic2JnOmNtZEluY2x1ZGUiIDogdHJ1ZSwKICAgICAgInNlcGFyYXRlIiA6IHRydWUKICAgIH0sCiAgICAiZGVzY3JpcHRpb24iIDogIk1BUFEgdmFsdWUgZm9yIHVuaXF1ZSBtYXBwZXJzICgwIHRvIDI1NSkuIiwKICAgICJzYmc6dG9vbERlZmF1bHRWYWx1ZSIgOiAiMjU1IiwKICAgICJzYmc6Y2F0ZWdvcnkiIDogIk91dHB1dCIsCiAgICAibGFiZWwiIDogIk1BUFEgdmFsdWUiCiAgfSwgewogICAgImlkIiA6ICIjb3V0U0FNaGVhZGVyUEciLAogICAgInR5cGUiIDogWyAibnVsbCIsICJzdHJpbmciIF0sCiAgICAiaW5wdXRCaW5kaW5nIiA6IHsKICAgICAgInByZWZpeCIgOiAiLS1vdXRTQU1oZWFkZXJQRyIsCiAgICAgICJzYmc6Y21kSW5jbHVkZSIgOiB0cnVlLAogICAgICAic2VwYXJhdGUiIDogdHJ1ZQogICAgfSwKICAgICJkZXNjcmlwdGlvbiIgOiAiRXh0cmEgQFBHIChzb2Z0d2FyZSkgbGluZSBvZiB0aGUgU0FNIGhlYWRlciAoaW4gYWRkaXRpb24gdG8gU1RBUikuIiwKICAgICJzYmc6dG9vbERlZmF1bHRWYWx1ZSIgOiAiLSIsCiAgICAic2JnOmNhdGVnb3J5IiA6ICJPdXRwdXQiLAogICAgImxhYmVsIiA6ICJTQU0gaGVhZGVyIEBQRyIKICB9LCB7CiAgICAiaWQiIDogIiNvdXRTQU1oZWFkZXJIRCIsCiAgICAidHlwZSIgOiBbICJudWxsIiwgInN0cmluZyIgXSwKICAgICJpbnB1dEJpbmRpbmciIDogewogICAgICAicHJlZml4IiA6ICItLW91dFNBTWhlYWRlckhEIiwKICAgICAgInNiZzpjbWRJbmNsdWRlIiA6IHRydWUsCiAgICAgICJzZXBhcmF0ZSIgOiB0cnVlCiAgICB9LAogICAgImRlc2NyaXB0aW9uIiA6ICJASEQgKGhlYWRlcikgbGluZSBvZiB0aGUgU0FNIGhlYWRlci4iLAogICAgInNiZzp0b29sRGVmYXVsdFZhbHVlIiA6ICItIiwKICAgICJzYmc6Y2F0ZWdvcnkiIDogIk91dHB1dCIsCiAgICAibGFiZWwiIDogIlNBTSBoZWFkZXIgQEhEIgogIH0sIHsKICAgICJpZCIgOiAiI291dFNBTWZsYWdPUiIsCiAgICAidHlwZSIgOiBbICJudWxsIiwgImludCIgXSwKICAgICJpbnB1dEJpbmRpbmciIDogewogICAgICAicHJlZml4IiA6ICItLW91dFNBTWZsYWdPUiIsCiAgICAgICJzYmc6Y21kSW5jbHVkZSIgOiB0cnVlLAogICAgICAic2VwYXJhdGUiIDogdHJ1ZQogICAgfSwKICAgICJkZXNjcmlwdGlvbiIgOiAiU2V0IHNwZWNpZmljIGJpdHMgb2YgdGhlIFNBTSBGTEFHLiIsCiAgICAic2JnOnRvb2xEZWZhdWx0VmFsdWUiIDogIjAiLAogICAgInNiZzpjYXRlZ29yeSIgOiAiT3V0cHV0IiwKICAgICJsYWJlbCIgOiAiT1IgU0FNIGZsYWciCiAgfSwgewogICAgImlkIiA6ICIjb3V0U0FNZmxhZ0FORCIsCiAgICAidHlwZSIgOiBbICJudWxsIiwgImludCIgXSwKICAgICJpbnB1dEJpbmRpbmciIDogewogICAgICAicHJlZml4IiA6ICItLW91dFNBTWZsYWdBTkQiLAogICAgICAic2JnOmNtZEluY2x1ZGUiIDogdHJ1ZSwKICAgICAgInNlcGFyYXRlIiA6IHRydWUKICAgIH0sCiAgICAiZGVzY3JpcHRpb24iIDogIlNldCBzcGVjaWZpYyBiaXRzIG9mIHRoZSBTQU0gRkxBRy4iLAogICAgInNiZzp0b29sRGVmYXVsdFZhbHVlIiA6ICI2NTUzNSIsCiAgICAic2JnOmNhdGVnb3J5IiA6ICJPdXRwdXQiLAogICAgImxhYmVsIiA6ICJBTkQgU0FNIGZsYWciCiAgfSwgewogICAgImlkIiA6ICIjb3V0U0FNZmlsdGVyIiwKICAgICJ0eXBlIiA6IFsgIm51bGwiLCB7CiAgICAgICJuYW1lIiA6ICJvdXRTQU1maWx0ZXIiLAogICAgICAic3ltYm9scyIgOiBbICJLZWVwT25seUFkZGVkUmVmZXJlbmNlcyIsICJOb25lIiBdLAogICAgICAidHlwZSIgOiAiZW51bSIKICAgIH0gXSwKICAgICJpbnB1dEJpbmRpbmciIDogewogICAgICAicHJlZml4IiA6ICItLW91dFNBTWZpbHRlciIsCiAgICAgICJzYmc6Y21kSW5jbHVkZSIgOiB0cnVlLAogICAgICAic2VwYXJhdGUiIDogdHJ1ZQogICAgfSwKICAgICJkZXNjcmlwdGlvbiIgOiAiRmlsdGVyIHRoZSBvdXRwdXQgaW50byBtYWluIFNBTS9CQU0gZmlsZXMuIiwKICAgICJzYmc6dG9vbERlZmF1bHRWYWx1ZSIgOiAiTm9uZSIsCiAgICAic2JnOmNhdGVnb3J5IiA6ICJPdXRwdXQiLAogICAgImxhYmVsIiA6ICJPdXRwdXQgZmlsdGVyIgogIH0sIHsKICAgICJpZCIgOiAiI291dFNBTWF0dHJpYnV0ZXMiLAogICAgInR5cGUiIDogWyAibnVsbCIsIHsKICAgICAgIm5hbWUiIDogIm91dFNBTWF0dHJpYnV0ZXMiLAogICAgICAic3ltYm9scyIgOiBbICJTdGFuZGFyZCIsICJOSCIsICJBbGwiLCAiTm9uZSIgXSwKICAgICAgInR5cGUiIDogImVudW0iCiAgICB9IF0sCiAgICAiaW5wdXRCaW5kaW5nIiA6IHsKICAgICAgInByZWZpeCIgOiAiLS1vdXRTQU1hdHRyaWJ1dGVzIiwKICAgICAgInNiZzpjbWRJbmNsdWRlIiA6IHRydWUsCiAgICAgICJzZXBhcmF0ZSIgOiB0cnVlCiAgICB9LAogICAgImRlc2NyaXB0aW9uIiA6ICJEZXNpcmVkIFNBTSBhdHRyaWJ1dGVzLCBpbiB0aGUgb3JkZXIgZGVzaXJlZCBmb3IgdGhlIG91dHB1dCBTQU0uIE5IOiBhbnkgY29tYmluYXRpb24gaW4gYW55IG9yZGVyOyBTdGFuZGFyZDogTkggSEkgQVMgbk07IEFsbDogTkggSEkgQVMgbk0gTk0gTUQgak0gakk7IE5vbmU6IG5vIGF0dHJpYnV0ZXMuIiwKICAgICJzYmc6dG9vbERlZmF1bHRWYWx1ZSIgOiAiU3RhbmRhcmQiLAogICAgInNiZzpjYXRlZ29yeSIgOiAiT3V0cHV0IiwKICAgICJsYWJlbCIgOiAiU0FNIGF0dHJpYnV0ZXMiCiAgfSwgewogICAgImlkIiA6ICIjb3V0U0FNYXR0cklIc3RhcnQiLAogICAgInR5cGUiIDogWyAibnVsbCIsICJpbnQiIF0sCiAgICAiaW5wdXRCaW5kaW5nIiA6IHsKICAgICAgInByZWZpeCIgOiAiLS1vdXRTQU1hdHRySUhzdGFydCIsCiAgICAgICJzYmc6Y21kSW5jbHVkZSIgOiB0cnVlLAogICAgICAic2VwYXJhdGUiIDogdHJ1ZQogICAgfSwKICAgICJkZXNjcmlwdGlvbiIgOiAiU3RhcnQgdmFsdWUgZm9yIHRoZSBJSCBhdHRyaWJ1dGUuIDAgbWF5IGJlIHJlcXVpcmVkIGJ5IHNvbWUgZG93bnN0cmVhbSBzb2Z0d2FyZSwgc3VjaCBhcyBDdWZmbGlua3Mgb3IgU3RyaW5nVGllLiIsCiAgICAic2JnOnRvb2xEZWZhdWx0VmFsdWUiIDogIjEiLAogICAgInNiZzpjYXRlZ29yeSIgOiAiT3V0cHV0IiwKICAgICJsYWJlbCIgOiAiSUggYXR0cmlidXRlIHN0YXJ0IHZhbHVlIgogIH0sIHsKICAgICJpZCIgOiAiI291dFJlYWRzVW5tYXBwZWQiLAogICAgInR5cGUiIDogWyAibnVsbCIsIHsKICAgICAgIm5hbWUiIDogIm91dFJlYWRzVW5tYXBwZWQiLAogICAgICAic3ltYm9scyIgOiBbICJOb25lIiwgIkZhc3R4IiBdLAogICAgICAidHlwZSIgOiAiZW51bSIKICAgIH0gXSwKICAgICJpbnB1dEJpbmRpbmciIDogewogICAgICAicHJlZml4IiA6ICItLW91dFJlYWRzVW5tYXBwZWQiLAogICAgICAic2JnOmNtZEluY2x1ZGUiIDogdHJ1ZSwKICAgICAgInNlcGFyYXRlIiA6IHRydWUKICAgIH0sCiAgICAiZGVzY3JpcHRpb24iIDogIk91dHB1dCBvZiB1bm1hcHBlZCByZWFkcyAoYmVzaWRlcyBTQU0pLiBOb25lOiBubyBvdXRwdXQ7IEZhc3R4OiBvdXRwdXQgaW4gc2VwYXJhdGUgZmFzdGEvZmFzdHEgZmlsZXMsIFVubWFwcGVkLm91dC5tYXRlMS8yLiIsCiAgICAic2JnOnRvb2xEZWZhdWx0VmFsdWUiIDogIk5vbmUiLAogICAgInNiZzpjYXRlZ29yeSIgOiAiT3V0cHV0IiwKICAgICJsYWJlbCIgOiAiT3V0cHV0IHVubWFwcGVkIHJlYWRzIgogIH0sIHsKICAgICJpZCIgOiAiI291dFFTY29udmVyc2lvbkFkZCIsCiAgICAidHlwZSIgOiBbICJudWxsIiwgImludCIgXSwKICAgICJpbnB1dEJpbmRpbmciIDogewogICAgICAicHJlZml4IiA6ICItLW91dFFTY29udmVyc2lvbkFkZCIsCiAgICAgICJzYmc6Y21kSW5jbHVkZSIgOiB0cnVlLAogICAgICAic2VwYXJhdGUiIDogdHJ1ZQogICAgfSwKICAgICJkZXNjcmlwdGlvbiIgOiAiQWRkIHRoaXMgbnVtYmVyIHRvIHRoZSBxdWFsaXR5IHNjb3JlIChlLmcuIHRvIGNvbnZlcnQgZnJvbSBJbGx1bWluYSB0byBTYW5nZXIsIHVzZSAtMzEpLiIsCiAgICAic2JnOnRvb2xEZWZhdWx0VmFsdWUiIDogIjAiLAogICAgInNiZzpjYXRlZ29yeSIgOiAiT3V0cHV0IiwKICAgICJsYWJlbCIgOiAiUXVhbGl0eSBjb252ZXJzaW9uIgogIH0sIHsKICAgICJpZCIgOiAiI291dE11bHRpbWFwcGVyT3JkZXIiLAogICAgInR5cGUiIDogWyAibnVsbCIsIHsKICAgICAgIm5hbWUiIDogIm91dE11bHRpbWFwcGVyT3JkZXIiLAogICAgICAic3ltYm9scyIgOiBbICJSYW5kb20iLCAiT2xkXzIuNCIgXSwKICAgICAgInR5cGUiIDogImVudW0iCiAgICB9IF0sCiAgICAiaW5wdXRCaW5kaW5nIiA6IHsKICAgICAgInByZWZpeCIgOiAiLS1vdXRNdWx0aW1hcHBlck9yZGVyIiwKICAgICAgInNiZzpjbWRJbmNsdWRlIiA6IHRydWUsCiAgICAgICJzZXBhcmF0ZSIgOiB0cnVlCiAgICB9LAogICAgImRlc2NyaXB0aW9uIiA6ICJSYW5kb20gb3B0aW9uIG91dHB1dHMgbXVsdGlwbGUgYWxpZ25tZW50cyBmb3IgZWFjaCByZWFkIGluIHJhbmRvbSBvcmRlciwgYW5kIGFsc28gYWxzbyByYW5kb21pemVzIHRoZSBjaG9pY2Ugb2YgdGhlIHByaW1hcnkgYWxpZ25tZW50IGZyb20gdGhlIGhpZ2hlc3Qgc2NvcmluZyBhbGlnbm1lbnRzLiIsCiAgICAic2JnOnRvb2xEZWZhdWx0VmFsdWUiIDogIk9sZF8yLjQiLAogICAgInNiZzpjYXRlZ29yeSIgOiAiT3V0cHV0IiwKICAgICJsYWJlbCIgOiAiT3JkZXIgb2YgbXVsdGltYXBwaW5nIGFsaWdubWVudCIKICB9LCB7CiAgICAiaWQiIDogIiNvdXRGaWx0ZXJUeXBlIiwKICAgICJ0eXBlIiA6IFsgIm51bGwiLCB7CiAgICAgICJuYW1lIiA6ICJvdXRGaWx0ZXJUeXBlIiwKICAgICAgInN5bWJvbHMiIDogWyAiTm9ybWFsIiwgIkJ5U0pvdXQiIF0sCiAgICAgICJ0eXBlIiA6ICJlbnVtIgogICAgfSBdLAogICAgImlucHV0QmluZGluZyIgOiB7CiAgICAgICJwcmVmaXgiIDogIi0tb3V0RmlsdGVyVHlwZSIsCiAgICAgICJzYmc6Y21kSW5jbHVkZSIgOiB0cnVlLAogICAgICAic2VwYXJhdGUiIDogdHJ1ZQogICAgfSwKICAgICJkZXNjcmlwdGlvbiIgOiAiVHlwZSBvZiBmaWx0ZXJpbmcuIE5vcm1hbDogc3RhbmRhcmQgZmlsdGVyaW5nIHVzaW5nIG9ubHkgY3VycmVudCBhbGlnbm1lbnQ7IEJ5U0pvdXQ6IGtlZXAgb25seSB0aG9zZSByZWFkcyB0aGF0IGNvbnRhaW4ganVuY3Rpb25zIHRoYXQgcGFzc2VkIGZpbHRlcmluZyBpbnRvIFNKLm91dC50YWIuIiwKICAgICJzYmc6dG9vbERlZmF1bHRWYWx1ZSIgOiAiTm9ybWFsIiwKICAgICJzYmc6Y2F0ZWdvcnkiIDogIk91dHB1dCBmaWx0ZXJpbmciLAogICAgImxhYmVsIiA6ICJGaWx0ZXJpbmcgdHlwZSIKICB9LCB7CiAgICAiaWQiIDogIiNvdXRGaWx0ZXJTY29yZU1pbk92ZXJMcmVhZCIsCiAgICAidHlwZSIgOiBbICJudWxsIiwgImZsb2F0IiBdLAogICAgImlucHV0QmluZGluZyIgOiB7CiAgICAgICJwcmVmaXgiIDogIi0tb3V0RmlsdGVyU2NvcmVNaW5PdmVyTHJlYWQiLAogICAgICAic2JnOmNtZEluY2x1ZGUiIDogdHJ1ZSwKICAgICAgInNlcGFyYXRlIiA6IHRydWUKICAgIH0sCiAgICAiZGVzY3JpcHRpb24iIDogIidNaW5pbXVtIHNjb3JlJyBub3JtYWxpemVkIHRvIHJlYWQgbGVuZ3RoIChzdW0gb2YgbWF0ZXMnIGxlbmd0aHMgZm9yIHBhaXJlZC1lbmQgcmVhZHMpLiIsCiAgICAic2JnOnRvb2xEZWZhdWx0VmFsdWUiIDogIjAuNjYiLAogICAgInNiZzpjYXRlZ29yeSIgOiAiT3V0cHV0IGZpbHRlcmluZyIsCiAgICAibGFiZWwiIDogIk1pbiBzY29yZSBub3JtYWxpemVkIgogIH0sIHsKICAgICJpZCIgOiAiI291dEZpbHRlclNjb3JlTWluIiwKICAgICJ0eXBlIiA6IFsgIm51bGwiLCAiaW50IiBdLAogICAgImlucHV0QmluZGluZyIgOiB7CiAgICAgICJwcmVmaXgiIDogIi0tb3V0RmlsdGVyU2NvcmVNaW4iLAogICAgICAic2JnOmNtZEluY2x1ZGUiIDogdHJ1ZSwKICAgICAgInNlcGFyYXRlIiA6IHRydWUKICAgIH0sCiAgICAiZGVzY3JpcHRpb24iIDogIkFsaWdubWVudCB3aWxsIGJlIG91dHB1dCBvbmx5IGlmIGl0cyBzY29yZSBpcyBoaWdoZXIgdGhhbiB0aGlzIHZhbHVlLiIsCiAgICAic2JnOnRvb2xEZWZhdWx0VmFsdWUiIDogIjAiLAogICAgInNiZzpjYXRlZ29yeSIgOiAiT3V0cHV0IGZpbHRlcmluZyIsCiAgICAibGFiZWwiIDogIk1pbiBzY29yZSIKICB9LCB7CiAgICAiaWQiIDogIiNvdXRGaWx0ZXJNdWx0aW1hcFNjb3JlUmFuZ2UiLAogICAgInR5cGUiIDogWyAibnVsbCIsICJpbnQiIF0sCiAgICAiaW5wdXRCaW5kaW5nIiA6IHsKICAgICAgInByZWZpeCIgOiAiLS1vdXRGaWx0ZXJNdWx0aW1hcFNjb3JlUmFuZ2UiLAogICAgICAic2JnOmNtZEluY2x1ZGUiIDogdHJ1ZSwKICAgICAgInNlcGFyYXRlIiA6IHRydWUKICAgIH0sCiAgICAiZGVzY3JpcHRpb24iIDogIlRoZSBzY29yZSByYW5nZSBiZWxvdyB0aGUgbWF4aW11bSBzY29yZSBmb3IgbXVsdGltYXBwaW5nIGFsaWdubWVudHMuIiwKICAgICJzYmc6dG9vbERlZmF1bHRWYWx1ZSIgOiAiMSIsCiAgICAic2JnOmNhdGVnb3J5IiA6ICJPdXRwdXQgZmlsdGVyaW5nIiwKICAgICJsYWJlbCIgOiAiTXVsdGltYXBwaW5nIHNjb3JlIHJhbmdlIgogIH0sIHsKICAgICJpZCIgOiAiI291dEZpbHRlck11bHRpbWFwTm1heCIsCiAgICAidHlwZSIgOiBbICJudWxsIiwgImludCIgXSwKICAgICJpbnB1dEJpbmRpbmciIDogewogICAgICAicHJlZml4IiA6ICItLW91dEZpbHRlck11bHRpbWFwTm1heCIsCiAgICAgICJzYmc6Y21kSW5jbHVkZSIgOiB0cnVlLAogICAgICAic2VwYXJhdGUiIDogdHJ1ZQogICAgfSwKICAgICJkZXNjcmlwdGlvbiIgOiAiUmVhZCBhbGlnbm1lbnRzIHdpbGwgYmUgb3V0cHV0IG9ubHkgaWYgdGhlIHJlYWQgbWFwcyBmZXdlciB0aGFuIHRoaXMgdmFsdWUsIG90aGVyd2lzZSBubyBhbGlnbm1lbnRzIHdpbGwgYmUgb3V0cHV0LiIsCiAgICAic2JnOnRvb2xEZWZhdWx0VmFsdWUiIDogIjEwIiwKICAgICJzYmc6Y2F0ZWdvcnkiIDogIk91dHB1dCBmaWx0ZXJpbmciLAogICAgImxhYmVsIiA6ICJNYXggbnVtYmVyIG9mIG1hcHBpbmdzIgogIH0sIHsKICAgICJpZCIgOiAiI291dEZpbHRlck1pc21hdGNoTm92ZXJSZWFkTG1heCIsCiAgICAidHlwZSIgOiBbICJudWxsIiwgImZsb2F0IiBdLAogICAgImlucHV0QmluZGluZyIgOiB7CiAgICAgICJwcmVmaXgiIDogIi0tb3V0RmlsdGVyTWlzbWF0Y2hOb3ZlclJlYWRMbWF4IiwKICAgICAgInNiZzpjbWRJbmNsdWRlIiA6IHRydWUsCiAgICAgICJzZXBhcmF0ZSIgOiB0cnVlCiAgICB9LAogICAgImRlc2NyaXB0aW9uIiA6ICJBbGlnbm1lbnQgd2lsbCBiZSBvdXRwdXQgb25seSBpZiBpdHMgcmF0aW8gb2YgbWlzbWF0Y2hlcyB0byAqcmVhZCogbGVuZ3RoIGlzIGxlc3MgdGhhbiB0aGlzIHZhbHVlLiIsCiAgICAic2JnOnRvb2xEZWZhdWx0VmFsdWUiIDogIjEiLAogICAgInNiZzpjYXRlZ29yeSIgOiAiT3V0cHV0IGZpbHRlcmluZyIsCiAgICAibGFiZWwiIDogIk1pc21hdGNoZXMgdG8gKnJlYWQqIGxlbmd0aCIKICB9LCB7CiAgICAiaWQiIDogIiNvdXRGaWx0ZXJNaXNtYXRjaE5vdmVyTG1heCIsCiAgICAidHlwZSIgOiBbICJudWxsIiwgImZsb2F0IiBdLAogICAgImlucHV0QmluZGluZyIgOiB7CiAgICAgICJwcmVmaXgiIDogIi0tb3V0RmlsdGVyTWlzbWF0Y2hOb3ZlckxtYXgiLAogICAgICAic2JnOmNtZEluY2x1ZGUiIDogdHJ1ZSwKICAgICAgInNlcGFyYXRlIiA6IHRydWUKICAgIH0sCiAgICAiZGVzY3JpcHRpb24iIDogIkFsaWdubWVudCB3aWxsIGJlIG91dHB1dCBvbmx5IGlmIGl0cyByYXRpbyBvZiBtaXNtYXRjaGVzIHRvICptYXBwZWQqIGxlbmd0aCBpcyBsZXNzIHRoYW4gdGhpcyB2YWx1ZS4iLAogICAgInNiZzp0b29sRGVmYXVsdFZhbHVlIiA6ICIwLjMiLAogICAgInNiZzpjYXRlZ29yeSIgOiAiT3V0cHV0IGZpbHRlcmluZyIsCiAgICAibGFiZWwiIDogIk1pc21hdGNoZXMgdG8gKm1hcHBlZCogbGVuZ3RoIgogIH0sIHsKICAgICJpZCIgOiAiI291dEZpbHRlck1pc21hdGNoTm1heCIsCiAgICAidHlwZSIgOiBbICJudWxsIiwgImludCIgXSwKICAgICJpbnB1dEJpbmRpbmciIDogewogICAgICAicHJlZml4IiA6ICItLW91dEZpbHRlck1pc21hdGNoTm1heCIsCiAgICAgICJzYmc6Y21kSW5jbHVkZSIgOiB0cnVlLAogICAgICAic2VwYXJhdGUiIDogdHJ1ZQogICAgfSwKICAgICJkZXNjcmlwdGlvbiIgOiAiQWxpZ25tZW50IHdpbGwgYmUgb3V0cHV0IG9ubHkgaWYgaXQgaGFzIGZld2VyIG1pc21hdGNoZXMgdGhhbiB0aGlzIHZhbHVlLiIsCiAgICAic2JnOnRvb2xEZWZhdWx0VmFsdWUiIDogIjEwIiwKICAgICJzYmc6Y2F0ZWdvcnkiIDogIk91dHB1dCBmaWx0ZXJpbmciLAogICAgImxhYmVsIiA6ICJNYXggbnVtYmVyIG9mIG1pc21hdGNoZXMiCiAgfSwgewogICAgImlkIiA6ICIjb3V0RmlsdGVyTWF0Y2hObWluT3ZlckxyZWFkIiwKICAgICJ0eXBlIiA6IFsgIm51bGwiLCAiZmxvYXQiIF0sCiAgICAiaW5wdXRCaW5kaW5nIiA6IHsKICAgICAgInByZWZpeCIgOiAiLS1vdXRGaWx0ZXJNYXRjaE5taW5PdmVyTHJlYWQiLAogICAgICAic2JnOmNtZEluY2x1ZGUiIDogdHJ1ZSwKICAgICAgInNlcGFyYXRlIiA6IHRydWUKICAgIH0sCiAgICAiZGVzY3JpcHRpb24iIDogIidNaW5pbXVtIG1hdGNoZWQgYmFzZXMnIG5vcm1hbGl6ZWQgdG8gcmVhZCBsZW5ndGggKHN1bSBvZiBtYXRlcyBsZW5ndGhzIGZvciBwYWlyZWQtZW5kIHJlYWRzKS4iLAogICAgInNiZzp0b29sRGVmYXVsdFZhbHVlIiA6ICIwLjY2IiwKICAgICJzYmc6Y2F0ZWdvcnkiIDogIk91dHB1dCBmaWx0ZXJpbmciLAogICAgImxhYmVsIiA6ICJNaW4gbWF0Y2hlZCBiYXNlcyBub3JtYWxpemVkIgogIH0sIHsKICAgICJpZCIgOiAiI291dEZpbHRlck1hdGNoTm1pbiIsCiAgICAidHlwZSIgOiBbICJudWxsIiwgImludCIgXSwKICAgICJpbnB1dEJpbmRpbmciIDogewogICAgICAicHJlZml4IiA6ICItLW91dEZpbHRlck1hdGNoTm1pbiIsCiAgICAgICJzYmc6Y21kSW5jbHVkZSIgOiB0cnVlLAogICAgICAic2VwYXJhdGUiIDogdHJ1ZQogICAgfSwKICAgICJkZXNjcmlwdGlvbiIgOiAiQWxpZ25tZW50IHdpbGwgYmUgb3V0cHV0IG9ubHkgaWYgdGhlIG51bWJlciBvZiBtYXRjaGVkIGJhc2VzIGlzIGhpZ2hlciB0aGFuIHRoaXMgdmFsdWUuIiwKICAgICJzYmc6dG9vbERlZmF1bHRWYWx1ZSIgOiAiMCIsCiAgICAic2JnOmNhdGVnb3J5IiA6ICJPdXRwdXQgZmlsdGVyaW5nIiwKICAgICJsYWJlbCIgOiAiTWluIG1hdGNoZWQgYmFzZXMiCiAgfSwgewogICAgImlkIiA6ICIjb3V0RmlsdGVySW50cm9uTW90aWZzIiwKICAgICJ0eXBlIiA6IFsgIm51bGwiLCB7CiAgICAgICJuYW1lIiA6ICJvdXRGaWx0ZXJJbnRyb25Nb3RpZnMiLAogICAgICAic3ltYm9scyIgOiBbICJOb25lIiwgIlJlbW92ZU5vbmNhbm9uaWNhbCIsICJSZW1vdmVOb25jYW5vbmljYWxVbmFubm90YXRlZCIgXSwKICAgICAgInR5cGUiIDogImVudW0iCiAgICB9IF0sCiAgICAiaW5wdXRCaW5kaW5nIiA6IHsKICAgICAgInByZWZpeCIgOiAiLS1vdXRGaWx0ZXJJbnRyb25Nb3RpZnMiLAogICAgICAic2JnOmNtZEluY2x1ZGUiIDogdHJ1ZSwKICAgICAgInNlcGFyYXRlIiA6IHRydWUKICAgIH0sCiAgICAiZGVzY3JpcHRpb24iIDogIkZpbHRlciBhbGlnbm1lbnQgdXNpbmcgdGhlaXIgbW90aWZzLiBOb25lOiBubyBmaWx0ZXJpbmc7IFJlbW92ZU5vbmNhbm9uaWNhbDogZmlsdGVyIG91dCBhbGlnbm1lbnRzIHRoYXQgY29udGFpbiBub24tY2Fub25pY2FsIGp1bmN0aW9uczsgUmVtb3ZlTm9uY2Fub25pY2FsVW5hbm5vdGF0ZWQ6IGZpbHRlciBvdXQgYWxpZ25tZW50cyB0aGF0IGNvbnRhaW4gbm9uLWNhbm9uaWNhbCB1bmFubm90YXRlZCBqdW5jdGlvbnMgd2hlbiB1c2luZyBhbm5vdGF0ZWQgc3BsaWNlIGp1bmN0aW9ucyBkYXRhYmFzZS4gVGhlIGFubm90YXRlZCBub24tY2Fub25pY2FsIGp1bmN0aW9ucyB3aWxsIGJlIGtlcHQuIiwKICAgICJzYmc6dG9vbERlZmF1bHRWYWx1ZSIgOiAiTm9uZSIsCiAgICAic2JnOmNhdGVnb3J5IiA6ICJPdXRwdXQgZmlsdGVyaW5nIiwKICAgICJsYWJlbCIgOiAiTW90aWZzIGZpbHRlcmluZyIKICB9LCB7CiAgICAiaWQiIDogIiNub19yZWFkX2dyb3VwcyIsCiAgICAidHlwZSIgOiBbICJudWxsIiwgImJvb2xlYW4iIF0sCiAgICAiZGVzY3JpcHRpb24iIDogIklmIHRoaXMgYm9vbGVhbiBhcmd1bWVudCBpcyBzcGVjaWZpZWQsIG5vIHJlYWQgZ3JvdXBzIHdpbGwgYmUgc2V0IGluIHRoZSByZXN1bHRpbmcgQkFNIGhlYWRlci4iLAogICAgInNiZzp0b29sRGVmYXVsdFZhbHVlIiA6ICJPZmYiLAogICAgInNiZzpjYXRlZ29yeSIgOiAiUmVhZCBncm91cCIsCiAgICAibGFiZWwiIDogIk5vIHJlYWQgZ3JvdXBzIgogIH0sIHsKICAgICJpZCIgOiAiI2xpbWl0U2pkYkluc2VydE5zaiIsCiAgICAidHlwZSIgOiBbICJudWxsIiwgImludCIgXSwKICAgICJpbnB1dEJpbmRpbmciIDogewogICAgICAicHJlZml4IiA6ICItLWxpbWl0U2pkYkluc2VydE5zaiIsCiAgICAgICJzYmc6Y21kSW5jbHVkZSIgOiB0cnVlLAogICAgICAic2VwYXJhdGUiIDogdHJ1ZQogICAgfSwKICAgICJkZXNjcmlwdGlvbiIgOiAiTWF4aW11bSBudW1iZXIgb2YganVuY3Rpb24gdG8gYmUgaW5zZXJ0ZWQgdG8gdGhlIGdlbm9tZSBvbiB0aGUgZmx5IGF0IHRoZSBtYXBwaW5nIHN0YWdlLCBpbmNsdWRpbmcgdGhvc2UgZnJvbSBhbm5vdGF0aW9ucyBhbmQgdGhvc2UgZGV0ZWN0ZWQgaW4gdGhlIDFzdCBzdGVwIG9mIHRoZSAyLXBhc3MgcnVuLiIsCiAgICAic2JnOnRvb2xEZWZhdWx0VmFsdWUiIDogIjEwMDAwMDAiLAogICAgInNiZzpjYXRlZ29yeSIgOiAiTGltaXRzIiwKICAgICJsYWJlbCIgOiAiTWF4IGluc2VydCBqdW5jdGlvbnMiCiAgfSwgewogICAgImlkIiA6ICIjbGltaXRPdXRTSm9uZVJlYWQiLAogICAgInR5cGUiIDogWyAibnVsbCIsICJpbnQiIF0sCiAgICAiaW5wdXRCaW5kaW5nIiA6IHsKICAgICAgInByZWZpeCIgOiAiLS1saW1pdE91dFNKb25lUmVhZCIsCiAgICAgICJzYmc6Y21kSW5jbHVkZSIgOiB0cnVlLAogICAgICAic2VwYXJhdGUiIDogdHJ1ZQogICAgfSwKICAgICJkZXNjcmlwdGlvbiIgOiAiTWF4IG51bWJlciBvZiBqdW5jdGlvbnMgZm9yIG9uZSByZWFkIChpbmNsdWRpbmcgYWxsIG11bHRpLW1hcHBlcnMpLiIsCiAgICAic2JnOnRvb2xEZWZhdWx0VmFsdWUiIDogIjEwMDAiLAogICAgInNiZzpjYXRlZ29yeSIgOiAiTGltaXRzIiwKICAgICJsYWJlbCIgOiAiSnVuY3Rpb25zIG1heCBudW1iZXIiCiAgfSwgewogICAgImlkIiA6ICIjbGltaXRPdXRTSmNvbGxhcHNlZCIsCiAgICAidHlwZSIgOiBbICJudWxsIiwgImludCIgXSwKICAgICJpbnB1dEJpbmRpbmciIDogewogICAgICAicHJlZml4IiA6ICItLWxpbWl0T3V0U0pjb2xsYXBzZWQiLAogICAgICAic2JnOmNtZEluY2x1ZGUiIDogdHJ1ZSwKICAgICAgInNlcGFyYXRlIiA6IHRydWUKICAgIH0sCiAgICAiZGVzY3JpcHRpb24iIDogIk1heCBudW1iZXIgb2YgY29sbGFwc2VkIGp1bmN0aW9ucy4iLAogICAgInNiZzp0b29sRGVmYXVsdFZhbHVlIiA6ICIxMDAwMDAwIiwKICAgICJzYmc6Y2F0ZWdvcnkiIDogIkxpbWl0cyIsCiAgICAibGFiZWwiIDogIkNvbGxhcHNlZCBqdW5jdGlvbnMgbWF4IG51bWJlciIKICB9LCB7CiAgICAiaWQiIDogIiNsaW1pdEJBTXNvcnRSQU0iLAogICAgInR5cGUiIDogWyAibnVsbCIsICJpbnQiIF0sCiAgICAiaW5wdXRCaW5kaW5nIiA6IHsKICAgICAgInByZWZpeCIgOiAiLS1saW1pdEJBTXNvcnRSQU0iLAogICAgICAic2JnOmNtZEluY2x1ZGUiIDogdHJ1ZSwKICAgICAgInNlcGFyYXRlIiA6IHRydWUKICAgIH0sCiAgICAiZGVzY3JpcHRpb24iIDogIk1heGltdW0gYXZhaWxhYmxlIFJBTSBmb3Igc29ydGluZyBCQU0uIElmIHNldCB0byAwLCBpdCB3aWxsIGJlIHNldCB0byB0aGUgZ2Vub21lIGluZGV4IHNpemUuIiwKICAgICJzYmc6dG9vbERlZmF1bHRWYWx1ZSIgOiAiMCIsCiAgICAic2JnOmNhdGVnb3J5IiA6ICJMaW1pdHMiLAogICAgImxhYmVsIiA6ICJMaW1pdCBCQU0gc29ydGluZyBtZW1vcnkiCiAgfSwgewogICAgImlkIiA6ICIjZ2Vub21lRGlyTmFtZSIsCiAgICAidHlwZSIgOiBbICJudWxsIiwgInN0cmluZyIgXSwKICAgICJpbnB1dEJpbmRpbmciIDogewogICAgICAicG9zaXRpb24iIDogMCwKICAgICAgInByZWZpeCIgOiAiLS1nZW5vbWVEaXIiLAogICAgICAic2JnOmNtZEluY2x1ZGUiIDogdHJ1ZSwKICAgICAgInNlcGFyYXRlIiA6IHRydWUsCiAgICAgICJ2YWx1ZUZyb20iIDogewogICAgICAgICJjbGFzcyIgOiAiRXhwcmVzc2lvbiIsCiAgICAgICAgImVuZ2luZSIgOiAiI2N3bC1qcy1lbmdpbmUiLAogICAgICAgICJzY3JpcHQiIDogIiRqb2IuaW5wdXRzLmdlbm9tZURpck5hbWUgfHwgXCJnZW5vbWVEaXJcIiIKICAgICAgfQogICAgfSwKICAgICJkZXNjcmlwdGlvbiIgOiAiTmFtZSBvZiB0aGUgZGlyZWN0b3J5IHdoaWNoIGNvbnRhaW5zIGdlbm9tZSBmaWxlcyAod2hlbiBnZW5vbWUudGFyIGlzIHVuY29tcHJlc3NlZCkuIiwKICAgICJzYmc6dG9vbERlZmF1bHRWYWx1ZSIgOiAiZ2Vub21lRGlyIiwKICAgICJzYmc6Y2F0ZWdvcnkiIDogIkJhc2ljIiwKICAgICJsYWJlbCIgOiAiR2Vub21lIGRpciBuYW1lIgogIH0sIHsKICAgICJpZCIgOiAiI2dlbm9tZSIsCiAgICAidHlwZSIgOiBbICJGaWxlIiBdLAogICAgImRlc2NyaXB0aW9uIiA6ICJHZW5vbWUgZmlsZXMgY3JlYXRlZCB1c2luZyBTVEFSIEdlbm9tZSBHZW5lcmF0ZS4iLAogICAgInNiZzpjYXRlZ29yeSIgOiAiQmFzaWMiLAogICAgImxhYmVsIiA6ICJHZW5vbWUgZmlsZXMiLAogICAgInNiZzpmaWxlVHlwZXMiIDogIlRBUiIsCiAgICAicmVxdWlyZWQiIDogdHJ1ZQogIH0sIHsKICAgICJpZCIgOiAiI2NsaXA1cE5iYXNlcyIsCiAgICAidHlwZSIgOiBbICJudWxsIiwgewogICAgICAiaXRlbXMiIDogImludCIsCiAgICAgICJ0eXBlIiA6ICJhcnJheSIKICAgIH0gXSwKICAgICJpbnB1dEJpbmRpbmciIDogewogICAgICAiaXRlbVNlcGFyYXRvciIgOiAiICIsCiAgICAgICJwcmVmaXgiIDogIi0tY2xpcDVwTmJhc2VzIiwKICAgICAgInNiZzpjbWRJbmNsdWRlIiA6IHRydWUsCiAgICAgICJzZXBhcmF0ZSIgOiB0cnVlCiAgICB9LAogICAgImRlc2NyaXB0aW9uIiA6ICJOdW1iZXIgb2YgYmFzZXMgdG8gY2xpcCBmcm9tIDVwIG9mIGVhY2ggbWF0ZS4gSW4gY2FzZSBvbmx5IG9uZSB2YWx1ZSBpcyBnaXZlbiwgaXQgd2lsbCBiZSBhc3N1bWVkIHRoZSBzYW1lIGZvciBib3RoIG1hdGVzLiIsCiAgICAic2JnOnRvb2xEZWZhdWx0VmFsdWUiIDogIjAiLAogICAgInNiZzpjYXRlZ29yeSIgOiAiUmVhZCBwYXJhbWV0ZXJzIiwKICAgICJsYWJlbCIgOiAiQ2xpcCA1cCBiYXNlcyIKICB9LCB7CiAgICAiaWQiIDogIiNjbGlwM3BOYmFzZXMiLAogICAgInR5cGUiIDogWyAibnVsbCIsIHsKICAgICAgIml0ZW1zIiA6ICJpbnQiLAogICAgICAidHlwZSIgOiAiYXJyYXkiCiAgICB9IF0sCiAgICAiaW5wdXRCaW5kaW5nIiA6IHsKICAgICAgIml0ZW1TZXBhcmF0b3IiIDogIiAiLAogICAgICAicHJlZml4IiA6ICItLWNsaXAzcE5iYXNlcyIsCiAgICAgICJzYmc6Y21kSW5jbHVkZSIgOiB0cnVlLAogICAgICAic2VwYXJhdGUiIDogdHJ1ZQogICAgfSwKICAgICJkZXNjcmlwdGlvbiIgOiAiTnVtYmVyIG9mIGJhc2VzIHRvIGNsaXAgZnJvbSAzcCBvZiBlYWNoIG1hdGUuIEluIGNhc2Ugb25seSBvbmUgdmFsdWUgaXMgZ2l2ZW4sIGl0IHdpbGwgYmUgYXNzdW1lZCB0aGUgc2FtZSBmb3IgYm90aCBtYXRlcy4iLAogICAgInNiZzp0b29sRGVmYXVsdFZhbHVlIiA6ICIwIiwKICAgICJzYmc6Y2F0ZWdvcnkiIDogIlJlYWQgcGFyYW1ldGVycyIsCiAgICAibGFiZWwiIDogIkNsaXAgM3AgYmFzZXMiCiAgfSwgewogICAgImlkIiA6ICIjY2xpcDNwQWZ0ZXJBZGFwdGVyTmJhc2VzIiwKICAgICJ0eXBlIiA6IFsgIm51bGwiLCB7CiAgICAgICJpdGVtcyIgOiAiaW50IiwKICAgICAgIm5hbWUiIDogImNsaXAzcEFmdGVyQWRhcHRlck5iYXNlcyIsCiAgICAgICJ0eXBlIiA6ICJhcnJheSIKICAgIH0gXSwKICAgICJpbnB1dEJpbmRpbmciIDogewogICAgICAiaXRlbVNlcGFyYXRvciIgOiAiICIsCiAgICAgICJwcmVmaXgiIDogIi0tY2xpcDNwQWZ0ZXJBZGFwdGVyTmJhc2VzIiwKICAgICAgInNiZzpjbWRJbmNsdWRlIiA6IHRydWUsCiAgICAgICJzZXBhcmF0ZSIgOiB0cnVlCiAgICB9LAogICAgImRlc2NyaXB0aW9uIiA6ICJOdW1iZXIgb2YgYmFzZXMgdG8gY2xpcCBmcm9tIDNwIG9mIGVhY2ggbWF0ZSBhZnRlciB0aGUgYWRhcHRlciBjbGlwcGluZy4gSW4gY2FzZSBvbmx5IG9uZSB2YWx1ZSBpcyBnaXZlbiwgaXQgd2lsbCBiZSBhc3N1bWVkIHRoZSBzYW1lIGZvciBib3RoIG1hdGVzLiIsCiAgICAic2JnOnRvb2xEZWZhdWx0VmFsdWUiIDogIjAiLAogICAgInNiZzpjYXRlZ29yeSIgOiAiUmVhZCBwYXJhbWV0ZXJzIiwKICAgICJsYWJlbCIgOiAiQ2xpcCAzcCBhZnRlciBhZGFwdGVyIHNlcSIKICB9LCB7CiAgICAiaWQiIDogIiNjbGlwM3BBZGFwdGVyU2VxIiwKICAgICJ0eXBlIiA6IFsgIm51bGwiLCB7CiAgICAgICJpdGVtcyIgOiAic3RyaW5nIiwKICAgICAgInR5cGUiIDogImFycmF5IgogICAgfSBdLAogICAgImlucHV0QmluZGluZyIgOiB7CiAgICAgICJpdGVtU2VwYXJhdG9yIiA6ICIgIiwKICAgICAgInByZWZpeCIgOiAiLS1jbGlwM3BBZGFwdGVyU2VxIiwKICAgICAgInNiZzpjbWRJbmNsdWRlIiA6IHRydWUsCiAgICAgICJzZXBhcmF0ZSIgOiB0cnVlCiAgICB9LAogICAgImRlc2NyaXB0aW9uIiA6ICJBZGFwdGVyIHNlcXVlbmNlIHRvIGNsaXAgZnJvbSAzcCBvZiBlYWNoIG1hdGUuIEluIGNhc2Ugb25seSBvbmUgdmFsdWUgaXMgZ2l2ZW4sIGl0IHdpbGwgYmUgYXNzdW1lZCB0aGUgc2FtZSBmb3IgYm90aCBtYXRlcy4iLAogICAgInNiZzp0b29sRGVmYXVsdFZhbHVlIiA6ICItIiwKICAgICJzYmc6Y2F0ZWdvcnkiIDogIlJlYWQgcGFyYW1ldGVycyIsCiAgICAibGFiZWwiIDogIkNsaXAgM3AgYWRhcHRlciBzZXF1ZW5jZSIKICB9LCB7CiAgICAiaWQiIDogIiNjbGlwM3BBZGFwdGVyTU1wIiwKICAgICJ0eXBlIiA6IFsgIm51bGwiLCB7CiAgICAgICJpdGVtcyIgOiAiZmxvYXQiLAogICAgICAidHlwZSIgOiAiYXJyYXkiCiAgICB9IF0sCiAgICAiaW5wdXRCaW5kaW5nIiA6IHsKICAgICAgIml0ZW1TZXBhcmF0b3IiIDogIiAiLAogICAgICAicHJlZml4IiA6ICItLWNsaXAzcEFkYXB0ZXJNTXAiLAogICAgICAic2JnOmNtZEluY2x1ZGUiIDogdHJ1ZSwKICAgICAgInNlcGFyYXRlIiA6IHRydWUKICAgIH0sCiAgICAiZGVzY3JpcHRpb24iIDogIk1heCBwcm9wb3J0aW9uIG9mIG1pc21hdGNoZXMgZm9yIDNwIGFkYXB0ZXIgY2xpcHBpbmcgZm9yIGVhY2ggbWF0ZS4gSW4gY2FzZSBvbmx5IG9uZSB2YWx1ZSBpcyBnaXZlbiwgaXQgd2lsbCBiZSBhc3N1bWVkIHRoZSBzYW1lIGZvciBib3RoIG1hdGVzLiIsCiAgICAic2JnOnRvb2xEZWZhdWx0VmFsdWUiIDogIjAuMSIsCiAgICAic2JnOmNhdGVnb3J5IiA6ICJSZWFkIHBhcmFtZXRlcnMiLAogICAgImxhYmVsIiA6ICJNYXggbWlzbWF0Y2hlcyBwcm9wb3J0aW9ucyIKICB9LCB7CiAgICAiaWQiIDogIiNjaGltU2VnbWVudFJlYWRHYXBNYXgiLAogICAgInR5cGUiIDogWyAibnVsbCIsICJpbnQiIF0sCiAgICAiaW5wdXRCaW5kaW5nIiA6IHsKICAgICAgInByZWZpeCIgOiAiLS1jaGltU2VnbWVudFJlYWRHYXBNYXgiLAogICAgICAic2JnOmNtZEluY2x1ZGUiIDogdHJ1ZSwKICAgICAgInNlcGFyYXRlIiA6IHRydWUKICAgIH0sCiAgICAiZGVzY3JpcHRpb24iIDogIk1heGltdW0gZ2FwIGluIHRoZSByZWFkIHNlcXVlbmNlIGJldHdlZW4gY2hpbWVyaWMgc2VnbWVudHMgKGludD49MCkuIiwKICAgICJzYmc6dG9vbERlZmF1bHRWYWx1ZSIgOiAiMCIsCiAgICAic2JnOmNhdGVnb3J5IiA6ICJDaGltZXJpYyBBbGlnbm1lbnRzIiwKICAgICJsYWJlbCIgOiAiQ2hpbWVyaWMgc2VnbWVudCBnYXAiCiAgfSwgewogICAgImlkIiA6ICIjY2hpbVNlZ21lbnRNaW4iLAogICAgInR5cGUiIDogWyAibnVsbCIsICJpbnQiIF0sCiAgICAiaW5wdXRCaW5kaW5nIiA6IHsKICAgICAgInByZWZpeCIgOiAiLS1jaGltU2VnbWVudE1pbiIsCiAgICAgICJzYmc6Y21kSW5jbHVkZSIgOiB0cnVlLAogICAgICAic2VwYXJhdGUiIDogdHJ1ZQogICAgfSwKICAgICJkZXNjcmlwdGlvbiIgOiAiTWluaW11bSBsZW5ndGggb2YgY2hpbWVyaWMgc2VnbWVudCBsZW5ndGgsIGlmID0wLCBubyBjaGltZXJpYyBvdXRwdXQgKGludD49MCkuIiwKICAgICJzYmc6dG9vbERlZmF1bHRWYWx1ZSIgOiAiMCIsCiAgICAic2JnOmNhdGVnb3J5IiA6ICJDaGltZXJpYyBBbGlnbm1lbnRzIiwKICAgICJsYWJlbCIgOiAiTWluIHNlZ21lbnQgbGVuZ3RoIgogIH0sIHsKICAgICJpZCIgOiAiI2NoaW1TY29yZVNlcGFyYXRpb24iLAogICAgInR5cGUiIDogWyAibnVsbCIsICJpbnQiIF0sCiAgICAiaW5wdXRCaW5kaW5nIiA6IHsKICAgICAgInByZWZpeCIgOiAiLS1jaGltU2NvcmVTZXBhcmF0aW9uIiwKICAgICAgInNiZzpjbWRJbmNsdWRlIiA6IHRydWUsCiAgICAgICJzZXBhcmF0ZSIgOiB0cnVlCiAgICB9LAogICAgImRlc2NyaXB0aW9uIiA6ICJNaW5pbXVtIGRpZmZlcmVuY2UgKHNlcGFyYXRpb24pIGJldHdlZW4gdGhlIGJlc3QgY2hpbWVyaWMgc2NvcmUgYW5kIHRoZSBuZXh0IG9uZSAoaW50Pj0wKS4iLAogICAgInNiZzp0b29sRGVmYXVsdFZhbHVlIiA6ICIxMCIsCiAgICAic2JnOmNhdGVnb3J5IiA6ICJDaGltZXJpYyBBbGlnbm1lbnRzIiwKICAgICJsYWJlbCIgOiAiTWluIHNlcGFyYXRpb24gc2NvcmUiCiAgfSwgewogICAgImlkIiA6ICIjY2hpbVNjb3JlTWluIiwKICAgICJ0eXBlIiA6IFsgIm51bGwiLCAiaW50IiBdLAogICAgImlucHV0QmluZGluZyIgOiB7CiAgICAgICJwcmVmaXgiIDogIi0tY2hpbVNjb3JlTWluIiwKICAgICAgInNiZzpjbWRJbmNsdWRlIiA6IHRydWUsCiAgICAgICJzZXBhcmF0ZSIgOiB0cnVlCiAgICB9LAogICAgImRlc2NyaXB0aW9uIiA6ICJNaW5pbXVtIHRvdGFsIChzdW1tZWQpIHNjb3JlIG9mIHRoZSBjaGltZXJpYyBzZWdtZW50cyAoaW50Pj0wKS4iLAogICAgInNiZzp0b29sRGVmYXVsdFZhbHVlIiA6ICIwIiwKICAgICJzYmc6Y2F0ZWdvcnkiIDogIkNoaW1lcmljIEFsaWdubWVudHMiLAogICAgImxhYmVsIiA6ICJNaW4gdG90YWwgc2NvcmUiCiAgfSwgewogICAgImlkIiA6ICIjY2hpbVNjb3JlSnVuY3Rpb25Ob25HVEFHIiwKICAgICJ0eXBlIiA6IFsgIm51bGwiLCAiaW50IiBdLAogICAgImlucHV0QmluZGluZyIgOiB7CiAgICAgICJwcmVmaXgiIDogIi0tY2hpbVNjb3JlSnVuY3Rpb25Ob25HVEFHIiwKICAgICAgInNiZzpjbWRJbmNsdWRlIiA6IHRydWUsCiAgICAgICJzZXBhcmF0ZSIgOiB0cnVlCiAgICB9LAogICAgImRlc2NyaXB0aW9uIiA6ICJQZW5hbHR5IGZvciBhIG5vbi1HVC9BRyBjaGltZXJpYyBqdW5jdGlvbi4iLAogICAgInNiZzp0b29sRGVmYXVsdFZhbHVlIiA6ICItMSIsCiAgICAic2JnOmNhdGVnb3J5IiA6ICJDaGltZXJpYyBBbGlnbm1lbnRzIiwKICAgICJsYWJlbCIgOiAiTm9uLUdUL0FHIHBlbmFsdHkiCiAgfSwgewogICAgImlkIiA6ICIjY2hpbVNjb3JlRHJvcE1heCIsCiAgICAidHlwZSIgOiBbICJudWxsIiwgImludCIgXSwKICAgICJpbnB1dEJpbmRpbmciIDogewogICAgICAicHJlZml4IiA6ICItLWNoaW1TY29yZURyb3BNYXgiLAogICAgICAic2JnOmNtZEluY2x1ZGUiIDogdHJ1ZSwKICAgICAgInNlcGFyYXRlIiA6IHRydWUKICAgIH0sCiAgICAiZGVzY3JpcHRpb24iIDogIk1heCBkcm9wIChkaWZmZXJlbmNlKSBvZiBjaGltZXJpYyBzY29yZSAodGhlIHN1bSBvZiBzY29yZXMgb2YgYWxsIGNoaW1lcmljIHNlZ2VtZW50cykgZnJvbSB0aGUgcmVhZCBsZW5ndGggKGludD49MCkuIiwKICAgICJzYmc6dG9vbERlZmF1bHRWYWx1ZSIgOiAiMjAiLAogICAgInNiZzpjYXRlZ29yeSIgOiAiQ2hpbWVyaWMgQWxpZ25tZW50cyIsCiAgICAibGFiZWwiIDogIk1heCBkcm9wIHNjb3JlIgogIH0sIHsKICAgICJpZCIgOiAiI2NoaW1PdXRUeXBlIiwKICAgICJ0eXBlIiA6IFsgIm51bGwiLCB7CiAgICAgICJuYW1lIiA6ICJjaGltT3V0VHlwZSIsCiAgICAgICJzeW1ib2xzIiA6IFsgIlNlcGFyYXRlU0FNb2xkIiwgIldpdGhpbiIgXSwKICAgICAgInR5cGUiIDogImVudW0iCiAgICB9IF0sCiAgICAiZGVzY3JpcHRpb24iIDogIlR5cGUgb2YgY2hpbWVyaWMgb3V0cHV0LiBTZXBhcmF0ZVNBTW9sZDogb3V0cHV0IG9sZCBTQU0gaW50byBzZXBhcmF0ZSBDaGltZXJpYy5vdXQuc2FtIGZpbGU7IFdpdGhpbjogb3V0cHV0IGludG8gbWFpbiBhbGlnbmVkIFNBTS9CQU0gZmlsZXMuIiwKICAgICJzYmc6dG9vbERlZmF1bHRWYWx1ZSIgOiAiU2VwYXJhdGVTQU1vbGQiLAogICAgInNiZzpjYXRlZ29yeSIgOiAiQ2hpbWVyaWMgQWxpZ25tZW50cyIsCiAgICAibGFiZWwiIDogIkNoaW1lcmljIG91dHB1dCB0eXBlIgogIH0sIHsKICAgICJpZCIgOiAiI2NoaW1KdW5jdGlvbk92ZXJoYW5nTWluIiwKICAgICJ0eXBlIiA6IFsgIm51bGwiLCAiaW50IiBdLAogICAgImlucHV0QmluZGluZyIgOiB7CiAgICAgICJwcmVmaXgiIDogIi0tY2hpbUp1bmN0aW9uT3ZlcmhhbmdNaW4iLAogICAgICAic2JnOmNtZEluY2x1ZGUiIDogdHJ1ZSwKICAgICAgInNlcGFyYXRlIiA6IHRydWUKICAgIH0sCiAgICAiZGVzY3JpcHRpb24iIDogIk1pbmltdW0gb3ZlcmhhbmcgZm9yIGEgY2hpbWVyaWMganVuY3Rpb24gKGludD49MCkuIiwKICAgICJzYmc6dG9vbERlZmF1bHRWYWx1ZSIgOiAiMjAiLAogICAgInNiZzpjYXRlZ29yeSIgOiAiQ2hpbWVyaWMgQWxpZ25tZW50cyIsCiAgICAibGFiZWwiIDogIk1pbiBqdW5jdGlvbiBvdmVyaGFuZyIKICB9LCB7CiAgICAiaWQiIDogIiNjaGltRmlsdGVyIiwKICAgICJ0eXBlIiA6IFsgIm51bGwiLCB7CiAgICAgICJuYW1lIiA6ICJjaGltRmlsdGVyIiwKICAgICAgInN5bWJvbHMiIDogWyAiYmFuR2Vub21pY04iLCAiTm9uZSIgXSwKICAgICAgInR5cGUiIDogImVudW0iCiAgICB9IF0sCiAgICAiaW5wdXRCaW5kaW5nIiA6IHsKICAgICAgInByZWZpeCIgOiAiLS1jaGltRmlsdGVyIiwKICAgICAgInNiZzpjbWRJbmNsdWRlIiA6IHRydWUsCiAgICAgICJzZXBhcmF0ZSIgOiB0cnVlCiAgICB9LAogICAgImRlc2NyaXB0aW9uIiA6ICJEaWZmZXJlbnQgZmlsdGVycyBmb3IgY2hpbWVyaWMgYWxpZ25tZW50cyBOb25lIG5vIGZpbHRlcmluZyBiYW5HZW5vbWljTiBOcyBhcmUgbm90IGFsbG93ZWQgaW4gdGhlIGdlbm9tZSBzZXF1ZW5jZSBhcm91bmQgdGhlIGNoaW1lcmljIGp1bmN0aW9uLiIsCiAgICAic2JnOnRvb2xEZWZhdWx0VmFsdWUiIDogImJhbkdlbm9taWNOIiwKICAgICJzYmc6Y2F0ZWdvcnkiIDogIkNoaW1lcmljIEFsaWdubWVudHMiLAogICAgImxhYmVsIiA6ICJDaGltZXJpYyBmaWx0ZXIiCiAgfSwgewogICAgImlkIiA6ICIjYWxpZ25XaW5kb3dzUGVyUmVhZE5tYXgiLAogICAgInR5cGUiIDogWyAibnVsbCIsICJmbG9hdCIgXSwKICAgICJpbnB1dEJpbmRpbmciIDogewogICAgICAicHJlZml4IiA6ICItLWFsaWduV2luZG93c1BlclJlYWRObWF4IiwKICAgICAgInNiZzpjbWRJbmNsdWRlIiA6IHRydWUsCiAgICAgICJzZXBhcmF0ZSIgOiB0cnVlCiAgICB9LAogICAgImRlc2NyaXB0aW9uIiA6ICJNYXggbnVtYmVyIG9mIHdpbmRvd3MgcGVyIHJlYWQgKGludD4wKS4iLAogICAgInNiZzp0b29sRGVmYXVsdFZhbHVlIiA6ICIxMDAwMCIsCiAgICAic2JnOmNhdGVnb3J5IiA6ICJBbGlnbm1lbnRzIGFuZCBTZWVkaW5nIiwKICAgICJsYWJlbCIgOiAiTWF4IHdpbmRvd3MgcGVyIHJlYWQiCiAgfSwgewogICAgImlkIiA6ICIjYWxpZ25UcmFuc2NyaXB0c1BlcldpbmRvd05tYXgiLAogICAgInR5cGUiIDogWyAibnVsbCIsICJpbnQiIF0sCiAgICAiaW5wdXRCaW5kaW5nIiA6IHsKICAgICAgInByZWZpeCIgOiAiLS1hbGlnblRyYW5zY3JpcHRzUGVyV2luZG93Tm1heCIsCiAgICAgICJzYmc6Y21kSW5jbHVkZSIgOiB0cnVlLAogICAgICAic2VwYXJhdGUiIDogdHJ1ZQogICAgfSwKICAgICJkZXNjcmlwdGlvbiIgOiAiTWF4IG51bWJlciBvZiB0cmFuc2NyaXB0cyBwZXIgd2luZG93IChpbnQ+MCkuIiwKICAgICJzYmc6dG9vbERlZmF1bHRWYWx1ZSIgOiAiMTAwIiwKICAgICJzYmc6Y2F0ZWdvcnkiIDogIkFsaWdubWVudHMgYW5kIFNlZWRpbmciLAogICAgImxhYmVsIiA6ICJNYXggdHJhbnNjcmlwdHMgcGVyIHdpbmRvdyIKICB9LCB7CiAgICAiaWQiIDogIiNhbGlnblRyYW5zY3JpcHRzUGVyUmVhZE5tYXgiLAogICAgInR5cGUiIDogWyAibnVsbCIsICJpbnQiIF0sCiAgICAiaW5wdXRCaW5kaW5nIiA6IHsKICAgICAgInByZWZpeCIgOiAiLS1hbGlnblRyYW5zY3JpcHRzUGVyUmVhZE5tYXgiLAogICAgICAic2JnOmNtZEluY2x1ZGUiIDogdHJ1ZSwKICAgICAgInNlcGFyYXRlIiA6IHRydWUKICAgIH0sCiAgICAiZGVzY3JpcHRpb24iIDogIk1heCBudW1iZXIgb2YgZGlmZmVyZW50IGFsaWdubWVudHMgcGVyIHJlYWQgdG8gY29uc2lkZXIgKGludD4wKS4iLAogICAgInNiZzp0b29sRGVmYXVsdFZhbHVlIiA6ICIxMDAwMCIsCiAgICAic2JnOmNhdGVnb3J5IiA6ICJBbGlnbm1lbnRzIGFuZCBTZWVkaW5nIiwKICAgICJsYWJlbCIgOiAiTWF4IHRyYW5zY3JpcHRzIHBlciByZWFkIgogIH0sIHsKICAgICJpZCIgOiAiI2FsaWduU3BsaWNlZE1hdGVNYXBMbWluT3ZlckxtYXRlIiwKICAgICJ0eXBlIiA6IFsgIm51bGwiLCAiZmxvYXQiIF0sCiAgICAiaW5wdXRCaW5kaW5nIiA6IHsKICAgICAgInByZWZpeCIgOiAiLS1hbGlnblNwbGljZWRNYXRlTWFwTG1pbk92ZXJMbWF0ZSIsCiAgICAgICJzYmc6Y21kSW5jbHVkZSIgOiB0cnVlLAogICAgICAic2VwYXJhdGUiIDogdHJ1ZQogICAgfSwKICAgICJkZXNjcmlwdGlvbiIgOiAiQWxpZ25TcGxpY2VkTWF0ZU1hcExtaW4gbm9ybWFsaXplZCB0byBtYXRlIGxlbmd0aCAoZmxvYXQ+MCkuIiwKICAgICJzYmc6dG9vbERlZmF1bHRWYWx1ZSIgOiAiMC42NiIsCiAgICAic2JnOmNhdGVnb3J5IiA6ICJBbGlnbm1lbnRzIGFuZCBTZWVkaW5nIiwKICAgICJsYWJlbCIgOiAiTWluIG1hcHBlZCBsZW5ndGggbm9ybWFsaXplZCIKICB9LCB7CiAgICAiaWQiIDogIiNhbGlnblNwbGljZWRNYXRlTWFwTG1pbiIsCiAgICAidHlwZSIgOiBbICJudWxsIiwgImludCIgXSwKICAgICJpbnB1dEJpbmRpbmciIDogewogICAgICAicHJlZml4IiA6ICItLWFsaWduU3BsaWNlZE1hdGVNYXBMbWluIiwKICAgICAgInNiZzpjbWRJbmNsdWRlIiA6IHRydWUsCiAgICAgICJzZXBhcmF0ZSIgOiB0cnVlCiAgICB9LAogICAgImRlc2NyaXB0aW9uIiA6ICJNaW5pbXVtIG1hcHBlZCBsZW5ndGggZm9yIGEgcmVhZCBtYXRlIHRoYXQgaXMgc3BsaWNlZCAoaW50PjApLiIsCiAgICAic2JnOnRvb2xEZWZhdWx0VmFsdWUiIDogIjAiLAogICAgInNiZzpjYXRlZ29yeSIgOiAiQWxpZ25tZW50cyBhbmQgU2VlZGluZyIsCiAgICAibGFiZWwiIDogIk1pbiBtYXBwZWQgbGVuZ3RoIgogIH0sIHsKICAgICJpZCIgOiAiI2FsaWduU29mdENsaXBBdFJlZmVyZW5jZUVuZHMiLAogICAgInR5cGUiIDogWyAibnVsbCIsIHsKICAgICAgIm5hbWUiIDogImFsaWduU29mdENsaXBBdFJlZmVyZW5jZUVuZHMiLAogICAgICAic3ltYm9scyIgOiBbICJZZXMiLCAiTm8iIF0sCiAgICAgICJ0eXBlIiA6ICJlbnVtIgogICAgfSBdLAogICAgImlucHV0QmluZGluZyIgOiB7CiAgICAgICJwcmVmaXgiIDogIi0tYWxpZ25Tb2Z0Q2xpcEF0UmVmZXJlbmNlRW5kcyIsCiAgICAgICJzYmc6Y21kSW5jbHVkZSIgOiB0cnVlLAogICAgICAic2VwYXJhdGUiIDogdHJ1ZQogICAgfSwKICAgICJkZXNjcmlwdGlvbiIgOiAiT3B0aW9uIHdoaWNoIGFsbG93cyBzb2Z0IGNsaXBwaW5nIG9mIGFsaWdubWVudHMgYXQgdGhlIHJlZmVyZW5jZSAoY2hyb21vc29tZSkgZW5kcy4gQ2FuIGJlIGRpc2FibGVkIGZvciBjb21wYXRpYmlsaXR5IHdpdGggQ3VmZmxpbmtzL0N1ZmZtZXJnZS4gWWVzOiBFbmFibGVzIHNvZnQgY2xpcHBpbmc7IE5vOiBEaXNhYmxlcyBzb2Z0IGNsaXBwaW5nLiIsCiAgICAic2JnOnRvb2xEZWZhdWx0VmFsdWUiIDogIlllcyIsCiAgICAic2JnOmNhdGVnb3J5IiA6ICJBbGlnbm1lbnRzIGFuZCBTZWVkaW5nIiwKICAgICJsYWJlbCIgOiAiU29mdCBjbGlwcGluZyIKICB9LCB7CiAgICAiaWQiIDogIiNhbGlnblNKc3RpdGNoTWlzbWF0Y2hObWF4IiwKICAgICJ0eXBlIiA6IFsgIm51bGwiLCAic3RyaW5nIiBdLAogICAgImlucHV0QmluZGluZyIgOiB7CiAgICAgICJwcmVmaXgiIDogIi0tYWxpZ25TSnN0aXRjaE1pc21hdGNoTm1heCIsCiAgICAgICJzYmc6Y21kSW5jbHVkZSIgOiB0cnVlLAogICAgICAic2VwYXJhdGUiIDogdHJ1ZQogICAgfSwKICAgICJkZXNjcmlwdGlvbiIgOiAiNCppbnQ+PTA6IG1heGltdW0gbnVtYmVyIG9mIG1pc21hdGNoZXMgZm9yIHN0aXRjaGluZyBvZiB0aGUgc3BsaWNlIGp1bmN0aW9ucyAoLTE6IG5vIGxpbWl0KS4gKDEpIG5vbi1jYW5vbmljYWwgbW90aWZzLCAoMikgR1QvQUcgYW5kIENUL0FDIG1vdGlmLCAoMykgR0MvQUcgYW5kIENUL0dDIG1vdGlmLCAoNCkgQVQvQUMgYW5kIEdUL0FUIG1vdGlmLiIsCiAgICAic2JnOnRvb2xEZWZhdWx0VmFsdWUiIDogIjAgLTEgMCAwIiwKICAgICJzYmc6Y2F0ZWdvcnkiIDogIkFsaWdubWVudHMgYW5kIFNlZWRpbmciLAogICAgImxhYmVsIiA6ICJTcGxpY2UganVuY3Rpb24gc3RpY2ggbWF4IG1pc21hdGNoIgogIH0sIHsKICAgICJpZCIgOiAiI2FsaWduU0pvdmVyaGFuZ01pbiIsCiAgICAidHlwZSIgOiBbICJudWxsIiwgImludCIgXSwKICAgICJpbnB1dEJpbmRpbmciIDogewogICAgICAicHJlZml4IiA6ICItLWFsaWduU0pvdmVyaGFuZ01pbiIsCiAgICAgICJzYmc6Y21kSW5jbHVkZSIgOiB0cnVlLAogICAgICAic2VwYXJhdGUiIDogdHJ1ZQogICAgfSwKICAgICJkZXNjcmlwdGlvbiIgOiAiTWluaW11bSBvdmVyaGFuZyAoaS5lLiBibG9jayBzaXplKSBmb3Igc3BsaWNlZCBhbGlnbm1lbnRzIChpbnQ+MCkuIiwKICAgICJzYmc6dG9vbERlZmF1bHRWYWx1ZSIgOiAiNSIsCiAgICAic2JnOmNhdGVnb3J5IiA6ICJBbGlnbm1lbnRzIGFuZCBTZWVkaW5nIiwKICAgICJsYWJlbCIgOiAiTWluIG92ZXJoYW5nIgogIH0sIHsKICAgICJpZCIgOiAiI2FsaWduU0pEQm92ZXJoYW5nTWluIiwKICAgICJ0eXBlIiA6IFsgIm51bGwiLCAiaW50IiBdLAogICAgImlucHV0QmluZGluZyIgOiB7CiAgICAgICJwcmVmaXgiIDogIi0tYWxpZ25TSkRCb3ZlcmhhbmdNaW4iLAogICAgICAic2JnOmNtZEluY2x1ZGUiIDogdHJ1ZSwKICAgICAgInNlcGFyYXRlIiA6IHRydWUKICAgIH0sCiAgICAiZGVzY3JpcHRpb24iIDogIk1pbmltdW0gb3ZlcmhhbmcgKGkuZS4gYmxvY2sgc2l6ZSkgZm9yIGFubm90YXRlZCAoc2pkYikgc3BsaWNlZCBhbGlnbm1lbnRzIChpbnQ+MCkuIiwKICAgICJzYmc6dG9vbERlZmF1bHRWYWx1ZSIgOiAiMyIsCiAgICAic2JnOmNhdGVnb3J5IiA6ICJBbGlnbm1lbnRzIGFuZCBTZWVkaW5nIiwKICAgICJsYWJlbCIgOiAiTWluIG92ZXJoYW5nOiBhbm5vdGF0ZWQiCiAgfSwgewogICAgImlkIiA6ICIjYWxpZ25NYXRlc0dhcE1heCIsCiAgICAidHlwZSIgOiBbICJudWxsIiwgImludCIgXSwKICAgICJpbnB1dEJpbmRpbmciIDogewogICAgICAicHJlZml4IiA6ICItLWFsaWduTWF0ZXNHYXBNYXgiLAogICAgICAic2JnOmNtZEluY2x1ZGUiIDogdHJ1ZSwKICAgICAgInNlcGFyYXRlIiA6IHRydWUKICAgIH0sCiAgICAiZGVzY3JpcHRpb24iIDogIk1heGltdW0gZ2FwIGJldHdlZW4gdHdvIG1hdGVzLCBpZiAwLCBtYXggaW50cm9uIGdhcCB3aWxsIGJlIGRldGVybWluZWQgYnkgKDJed2luQmluTmJpdHMpKndpbkFuY2hvckRpc3ROYmlucy4iLAogICAgInNiZzp0b29sRGVmYXVsdFZhbHVlIiA6ICIwIiwKICAgICJzYmc6Y2F0ZWdvcnkiIDogIkFsaWdubWVudHMgYW5kIFNlZWRpbmciLAogICAgImxhYmVsIiA6ICJNYXggbWF0ZXMgZ2FwIgogIH0sIHsKICAgICJpZCIgOiAiI2FsaWduSW50cm9uTWluIiwKICAgICJ0eXBlIiA6IFsgIm51bGwiLCAiaW50IiBdLAogICAgImlucHV0QmluZGluZyIgOiB7CiAgICAgICJwcmVmaXgiIDogIi0tYWxpZ25JbnRyb25NaW4iLAogICAgICAic2JnOmNtZEluY2x1ZGUiIDogdHJ1ZSwKICAgICAgInNlcGFyYXRlIiA6IHRydWUKICAgIH0sCiAgICAiZGVzY3JpcHRpb24iIDogIk1pbmltdW0gaW50cm9uIHNpemU6IGdlbm9taWMgZ2FwIGlzIGNvbnNpZGVyZWQgaW50cm9uIGlmIGl0cyBsZW5ndGggPj0gYWxpZ25JbnRyb25NaW4sIG90aGVyd2lzZSBpdCBpcyBjb25zaWRlcmVkIERlbGV0aW9uIChpbnQ+PTApLiIsCiAgICAic2JnOnRvb2xEZWZhdWx0VmFsdWUiIDogIjIxIiwKICAgICJzYmc6Y2F0ZWdvcnkiIDogIkFsaWdubWVudHMgYW5kIFNlZWRpbmciLAogICAgImxhYmVsIiA6ICJNaW4gaW50cm9uIHNpemUiCiAgfSwgewogICAgImlkIiA6ICIjYWxpZ25JbnRyb25NYXgiLAogICAgInR5cGUiIDogWyAibnVsbCIsICJpbnQiIF0sCiAgICAiaW5wdXRCaW5kaW5nIiA6IHsKICAgICAgInByZWZpeCIgOiAiLS1hbGlnbkludHJvbk1heCIsCiAgICAgICJzYmc6Y21kSW5jbHVkZSIgOiB0cnVlLAogICAgICAic2VwYXJhdGUiIDogdHJ1ZQogICAgfSwKICAgICJkZXNjcmlwdGlvbiIgOiAiTWF4aW11bSBpbnRyb24gc2l6ZSwgaWYgMCwgbWF4IGludHJvbiBzaXplIHdpbGwgYmUgZGV0ZXJtaW5lZCBieSAoMl53aW5CaW5OYml0cykqd2luQW5jaG9yRGlzdE5iaW5zLiIsCiAgICAic2JnOnRvb2xEZWZhdWx0VmFsdWUiIDogIjAiLAogICAgInNiZzpjYXRlZ29yeSIgOiAiQWxpZ25tZW50cyBhbmQgU2VlZGluZyIsCiAgICAibGFiZWwiIDogIk1heCBpbnRyb24gc2l6ZSIKICB9LCB7CiAgICAiaWQiIDogIiNhbGlnbkVuZHNUeXBlIiwKICAgICJ0eXBlIiA6IFsgIm51bGwiLCB7CiAgICAgICJuYW1lIiA6ICJhbGlnbkVuZHNUeXBlIiwKICAgICAgInN5bWJvbHMiIDogWyAiTG9jYWwiLCAiRW5kVG9FbmQiLCAiRXh0ZW5kNXBPZlJlYWQxIiwgIkV4dGVuZDNwT2ZSZWFkMSIgXSwKICAgICAgInR5cGUiIDogImVudW0iCiAgICB9IF0sCiAgICAiaW5wdXRCaW5kaW5nIiA6IHsKICAgICAgInByZWZpeCIgOiAiLS1hbGlnbkVuZHNUeXBlIiwKICAgICAgInNiZzpjbWRJbmNsdWRlIiA6IHRydWUsCiAgICAgICJzZXBhcmF0ZSIgOiB0cnVlCiAgICB9LAogICAgImRlc2NyaXB0aW9uIiA6ICJUeXBlIG9mIHJlYWQgZW5kcyBhbGlnbm1lbnQuIExvY2FsOiBzdGFuZGFyZCBsb2NhbCBhbGlnbm1lbnQgd2l0aCBzb2Z0LWNsaXBwaW5nIGFsbG93ZWQuIEVuZFRvRW5kOiBmb3JjZSBlbmQgdG8gZW5kIHJlYWQgYWxpZ25tZW50LCBkbyBub3Qgc29mdC1jbGlwOyBFeHRlbmQ1cE9mUmVhZDE6IGZ1bGx5IGV4dGVuZCBvbmx5IHRoZSA1cCBvZiB0aGUgcmVhZDEsIGFsbCBvdGhlciBlbmRzOiBsb2NhbCBhbGlnbm1lbnQuIiwKICAgICJzYmc6dG9vbERlZmF1bHRWYWx1ZSIgOiAiTG9jYWwiLAogICAgInNiZzpjYXRlZ29yeSIgOiAiQWxpZ25tZW50cyBhbmQgU2VlZGluZyIsCiAgICAibGFiZWwiIDogIkFsaWdubWVudCB0eXBlIgogIH0gXSwKICAib3V0cHV0cyIgOiBbIHsKICAgICJpZCIgOiAiI3VubWFwcGVkX3JlYWRzIiwKICAgICJ0eXBlIiA6IFsgIm51bGwiLCB7CiAgICAgICJpdGVtcyIgOiAiRmlsZSIsCiAgICAgICJ0eXBlIiA6ICJhcnJheSIKICAgIH0gXSwKICAgICJvdXRwdXRCaW5kaW5nIiA6IHsKICAgICAgImdsb2IiIDogewogICAgICAgICJjbGFzcyIgOiAiRXhwcmVzc2lvbiIsCiAgICAgICAgImVuZ2luZSIgOiAiI2N3bC1qcy1lbmdpbmUiLAogICAgICAgICJzY3JpcHQiIDogIntcbiAgaWYgKCRqb2IuaW5wdXRzLnVubWFwcGVkT3V0cHV0TmFtZSkge1xuICAgIHJldHVybiBcIipcIiArICRqb2IuaW5wdXRzLnVubWFwcGVkT3V0cHV0TmFtZSArIFwiKlwiXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFwiKlVubWFwcGVkLm91dCpcIlxuICB9XG4gIFxufSIKICAgICAgfSwKICAgICAgInNiZzppbmhlcml0TWV0YWRhdGFGcm9tIiA6ICIjcmVhZHMiLAogICAgICAic2JnOm1ldGFkYXRhIiA6IHsKICAgICAgICAicGFpcmVkX2VuZCIgOiB7CiAgICAgICAgICAiY2xhc3MiIDogIkV4cHJlc3Npb24iLAogICAgICAgICAgImVuZ2luZSIgOiAiI2N3bC1qcy1lbmdpbmUiLAogICAgICAgICAgInNjcmlwdCIgOiAie1xuICBpZiAoJHNlbGYpIHtcbiAgICBmaWxlbmFtZSA9ICRzZWxmLnBhdGguc3BsaXQoXCIvXCIpLnBvcCgpO1xuICAgIGlmIChmaWxlbmFtZS5sYXN0SW5kZXhPZihcIi5mYXN0cVwiKSAhPT0gMCl7XG4gICAgICByZXR1cm4gZmlsZW5hbWVbZmlsZW5hbWUubGFzdEluZGV4T2YoXCIuZmFzdHFcIikgLSAxIF1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFwiXCJcbiAgICB9IFxuICB9IGVsc2Uge1xuICAgIHJldHVybiBcIlwiXG4gIH1cbn0iCiAgICAgICAgfSwKICAgICAgICAic2FtcGxlX2lkIiA6IHsKICAgICAgICAgICJjbGFzcyIgOiAiRXhwcmVzc2lvbiIsCiAgICAgICAgICAiZW5naW5lIiA6ICIjY3dsLWpzLWVuZ2luZSIsCiAgICAgICAgICAic2NyaXB0IiA6ICJ7XG4gXG5pZihbXS5jb25jYXQoJGpvYi5pbnB1dHMucmVhZHMpWzBdLm1ldGFkYXRhLnNhbXBsZV9pZClcbiAgIHtcbiAgICByZXR1cm4gW10uY29uY2F0KCRqb2IuaW5wdXRzLnJlYWRzKVswXS5tZXRhZGF0YS5zYW1wbGVfaWRcbiAgIH1cbiAgIGVsc2VcbiAgIHtcbiAgICBmaWxlbmFtZSA9ICRzZWxmLnBhdGguc3BsaXQoXCIvXCIpLnBvcCgpO1xuICAgIHJldHVybiBmaWxlbmFtZS5zcGxpdChcIi5cIikuc2hpZnQoKVxuICAgfVxufSIKICAgICAgICB9CiAgICAgIH0KICAgIH0sCiAgICAiZGVzY3JpcHRpb24iIDogIk91dHB1dCBvZiB1bm1hcHBlZCByZWFkcy4iLAogICAgImxhYmVsIiA6ICJVbm1hcHBlZCByZWFkcyIsCiAgICAic2JnOmZpbGVUeXBlcyIgOiAiRkFTVFEiCiAgfSwgewogICAgImlkIiA6ICIjdHJhbnNjcmlwdG9tZV9hbGlnbmVkX3JlYWRzIiwKICAgICJ0eXBlIiA6IFsgIm51bGwiLCAiRmlsZSIgXSwKICAgICJvdXRwdXRCaW5kaW5nIiA6IHsKICAgICAgImdsb2IiIDogIipUcmFuc2NyaXB0b21lKiIsCiAgICAgICJzYmc6aW5oZXJpdE1ldGFkYXRhRnJvbSIgOiAiI3JlYWRzIiwKICAgICAgInNiZzptZXRhZGF0YSIgOiB7CiAgICAgICAgInJlZmVyZW5jZV9nZW5vbWUiIDogewogICAgICAgICAgImNsYXNzIiA6ICJFeHByZXNzaW9uIiwKICAgICAgICAgICJlbmdpbmUiIDogIiNjd2wtanMtZW5naW5lIiwKICAgICAgICAgICJzY3JpcHQiIDogIntcbiAgaWYgKCRqb2IuaW5wdXRzLmdlbm9tZS5tZXRhZGF0YSkge1xuICAgIGlmICgkam9iLmlucHV0cy5nZW5vbWUubWV0YWRhdGEucmVmZXJlbmNlX2dlbm9tZSkge1xuICAgICAgcmV0dXJuICRqb2IuaW5wdXRzLmdlbm9tZS5tZXRhZGF0YS5yZWZlcmVuY2VfZ2Vub21lXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBcIlwiXG4gICAgfVxuICB9IGVsc2Uge1xuICByZXR1cm4gXCJcIlxuICB9XG59IgogICAgICAgIH0KICAgICAgfQogICAgfSwKICAgICJkZXNjcmlwdGlvbiIgOiAiQWxpZ25tZW50cyB0cmFuc2xhdGVkIGludG8gdHJhbnNjcmlwdCBjb29yZGluYXRlcy4iLAogICAgImxhYmVsIiA6ICJUcmFuc2NyaXB0b21lIGFsaWdubWVudHMiLAogICAgInNiZzpmaWxlVHlwZXMiIDogIkJBTSIKICB9LCB7CiAgICAiaWQiIDogIiNzcGxpY2VfanVuY3Rpb25zIiwKICAgICJ0eXBlIiA6IFsgIm51bGwiLCAiRmlsZSIgXSwKICAgICJvdXRwdXRCaW5kaW5nIiA6IHsKICAgICAgImdsb2IiIDogIipTSi5vdXQudGFiIiwKICAgICAgInNiZzppbmhlcml0TWV0YWRhdGFGcm9tIiA6ICIjcmVhZHMiLAogICAgICAic2JnOm1ldGFkYXRhIiA6IHsgfQogICAgfSwKICAgICJkZXNjcmlwdGlvbiIgOiAiSGlnaCBjb25maWRlbmNlIGNvbGxhcHNlZCBzcGxpY2UganVuY3Rpb25zIGluIHRhYi1kZWxpbWl0ZWQgZm9ybWF0LiBPbmx5IGp1bmN0aW9ucyBzdXBwb3J0ZWQgYnkgdW5pcXVlbHkgbWFwcGluZyByZWFkcyBhcmUgcmVwb3J0ZWQuIiwKICAgICJsYWJlbCIgOiAiU3BsaWNlIGp1bmN0aW9ucyIsCiAgICAic2JnOmZpbGVUeXBlcyIgOiAiVEFCIgogIH0sIHsKICAgICJpZCIgOiAiI3JlYWRzX3Blcl9nZW5lIiwKICAgICJ0eXBlIiA6IFsgIm51bGwiLCAiRmlsZSIgXSwKICAgICJvdXRwdXRCaW5kaW5nIiA6IHsKICAgICAgImdsb2IiIDogIipSZWFkc1BlckdlbmUqIiwKICAgICAgInNiZzppbmhlcml0TWV0YWRhdGFGcm9tIiA6ICIjcmVhZHMiLAogICAgICAic2JnOm1ldGFkYXRhIiA6IHsgfQogICAgfSwKICAgICJkZXNjcmlwdGlvbiIgOiAiRmlsZSB3aXRoIG51bWJlciBvZiByZWFkcyBwZXIgZ2VuZS4gQSByZWFkIGlzIGNvdW50ZWQgaWYgaXQgb3ZlcmxhcHMgKDFudCBvciBtb3JlKSBvbmUgYW5kIG9ubHkgb25lIGdlbmUuIiwKICAgICJsYWJlbCIgOiAiUmVhZHMgcGVyIGdlbmUiLAogICAgInNiZzpmaWxlVHlwZXMiIDogIlRBQiIKICB9LCB7CiAgICAiaWQiIDogIiNsb2dfZmlsZXMiLAogICAgInR5cGUiIDogWyAibnVsbCIsIHsKICAgICAgIml0ZW1zIiA6ICJGaWxlIiwKICAgICAgInR5cGUiIDogImFycmF5IgogICAgfSBdLAogICAgIm91dHB1dEJpbmRpbmciIDogewogICAgICAiZ2xvYiIgOiAiKkxvZyoub3V0IiwKICAgICAgInNiZzppbmhlcml0TWV0YWRhdGFGcm9tIiA6ICIjcmVhZHMiLAogICAgICAic2JnOm1ldGFkYXRhIiA6IHsgfQogICAgfSwKICAgICJkZXNjcmlwdGlvbiIgOiAiTG9nIGZpbGVzIHByb2R1Y2VkIGR1cmluZyBhbGlnbm1lbnQuIiwKICAgICJsYWJlbCIgOiAiTG9nIGZpbGVzIiwKICAgICJzYmc6ZmlsZVR5cGVzIiA6ICJPVVQiCiAgfSwgewogICAgImlkIiA6ICIjaW50ZXJtZWRpYXRlX2dlbm9tZSIsCiAgICAidHlwZSIgOiBbICJudWxsIiwgIkZpbGUiIF0sCiAgICAib3V0cHV0QmluZGluZyIgOiB7CiAgICAgICJnbG9iIiA6ICIqX1NUQVJnZW5vbWUudGFyIiwKICAgICAgInNiZzppbmhlcml0TWV0YWRhdGFGcm9tIiA6ICIjcmVhZHMiLAogICAgICAic2JnOm1ldGFkYXRhIiA6IHsgfQogICAgfSwKICAgICJkZXNjcmlwdGlvbiIgOiAiQXJjaGl2ZSB3aXRoIGdlbm9tZSBmaWxlcyBwcm9kdWNlZCB3aGVuIGFubm90YXRpb25zIGFyZSBpbmNsdWRlZCBvbiB0aGUgZmx5IChpbiB0aGUgbWFwcGluZyBzdGVwKS4iLAogICAgImxhYmVsIiA6ICJJbnRlcm1lZGlhdGUgZ2Vub21lIGZpbGVzIiwKICAgICJzYmc6ZmlsZVR5cGVzIiA6ICJUQVIiCiAgfSwgewogICAgImlkIiA6ICIjY2hpbWVyaWNfanVuY3Rpb25zIiwKICAgICJ0eXBlIiA6IFsgIm51bGwiLCAiRmlsZSIgXSwKICAgICJvdXRwdXRCaW5kaW5nIiA6IHsKICAgICAgImdsb2IiIDogIipDaGltZXJpYy5vdXQuanVuY3Rpb24iLAogICAgICAic2JnOmluaGVyaXRNZXRhZGF0YUZyb20iIDogIiNyZWFkcyIsCiAgICAgICJzYmc6bWV0YWRhdGEiIDogeyB9CiAgICB9LAogICAgImRlc2NyaXB0aW9uIiA6ICJJZiBjaGltU2VnbWVudE1pbiBpbiAnQ2hpbWVyaWMgQWxpZ25tZW50cycgc2VjdGlvbiBpcyBzZXQgdG8gMCwgJ0NoaW1lcmljIEp1bmN0aW9ucycgd29uJ3QgYmUgb3V0cHV0LiIsCiAgICAibGFiZWwiIDogIkNoaW1lcmljIGp1bmN0aW9ucyIsCiAgICAic2JnOmZpbGVUeXBlcyIgOiAiSlVOQ1RJT04iCiAgfSwgewogICAgImlkIiA6ICIjY2hpbWVyaWNfYWxpZ25tZW50cyIsCiAgICAidHlwZSIgOiBbICJudWxsIiwgIkZpbGUiIF0sCiAgICAib3V0cHV0QmluZGluZyIgOiB7CiAgICAgICJnbG9iIiA6ICIqLkNoaW1lcmljLm91dC5zYW0iLAogICAgICAic2JnOmluaGVyaXRNZXRhZGF0YUZyb20iIDogIiNyZWFkcyIsCiAgICAgICJzYmc6bWV0YWRhdGEiIDogewogICAgICAgICJyZWZlcmVuY2VfZ2Vub21lIiA6IHsKICAgICAgICAgICJjbGFzcyIgOiAiRXhwcmVzc2lvbiIsCiAgICAgICAgICAiZW5naW5lIiA6ICIjY3dsLWpzLWVuZ2luZSIsCiAgICAgICAgICAic2NyaXB0IiA6ICJ7XG4gIGlmICgkam9iLmlucHV0cy5nZW5vbWUubWV0YWRhdGEpIHtcbiAgICBpZiAoJGpvYi5pbnB1dHMuZ2Vub21lLm1ldGFkYXRhLnJlZmVyZW5jZV9nZW5vbWUpIHtcbiAgICAgIHJldHVybiAkam9iLmlucHV0cy5nZW5vbWUubWV0YWRhdGEucmVmZXJlbmNlX2dlbm9tZVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gXCJcIlxuICAgIH1cbiAgfSBlbHNlIHtcbiAgcmV0dXJuIFwiXCJcbiAgfVxufSIKICAgICAgICB9CiAgICAgIH0KICAgIH0sCiAgICAiZGVzY3JpcHRpb24iIDogIkFsaWduZWQgQ2hpbWVyaWMgc2VxdWVuY2VzIFNBTSAtIGlmIGNoaW1TZWdtZW50TWluID0gMCwgbm8gQ2hpbWVyaWMgQWxpZ25tZW50IFNBTSBhbmQgQ2hpbWVyaWMgSnVuY3Rpb25zIG91dHB1dHMuIiwKICAgICJsYWJlbCIgOiAiQ2hpbWVyaWMgYWxpZ25tZW50cyIsCiAgICAic2JnOmZpbGVUeXBlcyIgOiAiU0FNIgogIH0sIHsKICAgICJpZCIgOiAiI2FsaWduZWRfcmVhZHMiLAogICAgInR5cGUiIDogWyAibnVsbCIsICJGaWxlIiBdLAogICAgIm91dHB1dEJpbmRpbmciIDogewogICAgICAiZ2xvYiIgOiB7CiAgICAgICAgImNsYXNzIiA6ICJFeHByZXNzaW9uIiwKICAgICAgICAiZW5naW5lIiA6ICIjY3dsLWpzLWVuZ2luZSIsCiAgICAgICAgInNjcmlwdCIgOiAie1xuICBpZiAoJGpvYi5pbnB1dHMub3V0U29ydGluZ1R5cGUgPT0gJ1NvcnRlZEJ5Q29vcmRpbmF0ZScpIHtcbiAgICBzb3J0X25hbWUgPSAnLnNvcnRlZEJ5Q29vcmQnXG4gIH1cbiAgZWxzZSB7XG4gICAgc29ydF9uYW1lID0gJydcbiAgfVxuICBpZiAoJGpvYi5pbnB1dHMub3V0U0FNdHlwZSA9PSAnQkFNJykge1xuICAgIHNhbV9uYW1lID0gXCIqLkFsaWduZWRcIi5jb25jYXQoIHNvcnRfbmFtZSwgJy5vdXQuYmFtJylcbiAgfVxuICBlbHNlIHtcbiAgICBzYW1fbmFtZSA9IFwiKi5BbGlnbmVkLm91dC5zYW1cIlxuICB9XG4gIHJldHVybiBzYW1fbmFtZVxufSIKICAgICAgfSwKICAgICAgInNiZzppbmhlcml0TWV0YWRhdGFGcm9tIiA6ICIjcmVhZHMiLAogICAgICAic2JnOm1ldGFkYXRhIiA6IHsKICAgICAgICAicmVmZXJlbmNlX2dlbm9tZSIgOiB7CiAgICAgICAgICAiY2xhc3MiIDogIkV4cHJlc3Npb24iLAogICAgICAgICAgImVuZ2luZSIgOiAiI2N3bC1qcy1lbmdpbmUiLAogICAgICAgICAgInNjcmlwdCIgOiAie1xuICBpZiAoJGpvYi5pbnB1dHMuZ2Vub21lLm1ldGFkYXRhKSB7XG4gICAgaWYgKCRqb2IuaW5wdXRzLmdlbm9tZS5tZXRhZGF0YS5yZWZlcmVuY2VfZ2Vub21lKSB7XG4gICAgICByZXR1cm4gJGpvYi5pbnB1dHMuZ2Vub21lLm1ldGFkYXRhLnJlZmVyZW5jZV9nZW5vbWVcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFwiXCJcbiAgICB9XG4gIH0gZWxzZSB7XG4gIHJldHVybiBcIlwiXG4gIH1cbn0iCiAgICAgICAgfSwKICAgICAgICAic2FtcGxlX2lkIiA6IHsKICAgICAgICAgICJjbGFzcyIgOiAiRXhwcmVzc2lvbiIsCiAgICAgICAgICAiZW5naW5lIiA6ICIjY3dsLWpzLWVuZ2luZSIsCiAgICAgICAgICAic2NyaXB0IiA6ICJ7XG4gXG5pZihbXS5jb25jYXQoJGpvYi5pbnB1dHMucmVhZHMpWzBdLm1ldGFkYXRhLnNhbXBsZV9pZClcbiAgIHtcbiAgICByZXR1cm4gW10uY29uY2F0KCRqb2IuaW5wdXRzLnJlYWRzKVswXS5tZXRhZGF0YS5zYW1wbGVfaWRcbiAgIH1cbiAgIGVsc2VcbiAgIHtcbiAgICBmaWxlbmFtZSA9ICRzZWxmLnBhdGguc3BsaXQoXCIvXCIpLnBvcCgpO1xuICAgIHJldHVybiBmaWxlbmFtZS5zcGxpdChcIi5cIikuc2hpZnQoKVxuICAgfVxufSIKICAgICAgICB9CiAgICAgIH0KICAgIH0sCiAgICAiZGVzY3JpcHRpb24iIDogIkFsaWduZWQgc2VxdWVuY2UgaW4gU0FNL0JBTSBmb3JtYXQuIiwKICAgICJsYWJlbCIgOiAiQWxpZ25lZCBTQU0vQkFNIiwKICAgICJzYmc6ZmlsZVR5cGVzIiA6ICJTQU0sIEJBTSIKICB9IF0sCiAgImhpbnRzIiA6IFsgewogICAgImNsYXNzIiA6ICJEb2NrZXJSZXF1aXJlbWVudCIsCiAgICAiZG9ja2VyUHVsbCIgOiAiaW1hZ2VzLnNiZ2Vub21pY3MuY29tL2FuYV9kL3N0YXItZnVzaW9uOjIuNS4xYiIsCiAgICAiZG9ja2VySW1hZ2VJZCIgOiAiIgogIH0sIHsKICAgICJjbGFzcyIgOiAic2JnOk1lbVJlcXVpcmVtZW50IiwKICAgICJ2YWx1ZSIgOiA2MDAwMAogIH0sIHsKICAgICJjbGFzcyIgOiAic2JnOkNQVVJlcXVpcmVtZW50IiwKICAgICJ2YWx1ZSIgOiAzMgogIH0gXSwKICAicmVxdWlyZW1lbnRzIiA6IFsgewogICAgImNsYXNzIiA6ICJFeHByZXNzaW9uRW5naW5lUmVxdWlyZW1lbnQiLAogICAgInJlcXVpcmVtZW50cyIgOiBbIHsKICAgICAgImNsYXNzIiA6ICJEb2NrZXJSZXF1aXJlbWVudCIsCiAgICAgICJkb2NrZXJQdWxsIiA6ICJyYWJpeC9qcy1lbmdpbmUiCiAgICB9IF0sCiAgICAiaWQiIDogIiNjd2wtanMtZW5naW5lIgogIH0gXSwKICAic3VjY2Vzc0NvZGVzIiA6IFsgXSwKICAic3RkaW4iIDogIiIsCiAgInN0ZG91dCIgOiAiIiwKICAiYmFzZUNvbW1hbmQiIDogWyAidGFyIiwgIi14dmYiLCB7CiAgICAiY2xhc3MiIDogIkV4cHJlc3Npb24iLAogICAgImVuZ2luZSIgOiAiI2N3bC1qcy1lbmdpbmUiLAogICAgInNjcmlwdCIgOiAiJGpvYi5pbnB1dHMuZ2Vub21lLnBhdGgiCiAgfSwgIiYmIiwgIi9vcHQvU1RBUi0yLjUuMWIvYmluL0xpbnV4X3g4Nl82NF9zdGF0aWMvU1RBUiIsICItLXJ1blRocmVhZE4iLCB7CiAgICAiY2xhc3MiIDogIkV4cHJlc3Npb24iLAogICAgImVuZ2luZSIgOiAiI2N3bC1qcy1lbmdpbmUiLAogICAgInNjcmlwdCIgOiAie1xuICByZXR1cm4gJGpvYi5hbGxvY2F0ZWRSZXNvdXJjZXMuY3B1XG59IgogIH0gXSwKICAiYXJndW1lbnRzIiA6IFsgewogICAgInNlcGFyYXRlIiA6IHRydWUsCiAgICAidmFsdWVGcm9tIiA6IHsKICAgICAgImNsYXNzIiA6ICJFeHByZXNzaW9uIiwKICAgICAgImVuZ2luZSIgOiAiI2N3bC1qcy1lbmdpbmUiLAogICAgICAic2NyaXB0IiA6ICJ7XG4gIGZpbGUgPSBbXS5jb25jYXQoJGpvYi5pbnB1dHMucmVhZHMpWzBdLnBhdGhcbiAgZXh0ZW5zaW9uID0gLyg/OlxcLihbXi5dKykpPyQvLmV4ZWMoZmlsZSlbMV1cbiAgaWYgKGV4dGVuc2lvbiA9PSBcImd6XCIpIHtcbiAgICByZXR1cm4gXCItLXJlYWRGaWxlc0NvbW1hbmQgemNhdFwiXG4gIH0gZWxzZSBpZiAoZXh0ZW5zaW9uID09IFwiYnoyXCIpIHtcbiAgICByZXR1cm4gXCItLXJlYWRGaWxlc0NvbW1hbmQgYnpjYXRcIlxuICB9XG59IgogICAgfQogIH0sIHsKICAgICJzZXBhcmF0ZSIgOiB0cnVlLAogICAgInZhbHVlRnJvbSIgOiB7CiAgICAgICJjbGFzcyIgOiAiRXhwcmVzc2lvbiIsCiAgICAgICJlbmdpbmUiIDogIiNjd2wtanMtZW5naW5lIiwKICAgICAgInNjcmlwdCIgOiAie1x0XG4gIHZhciBzakZvcm1hdCA9IFwiRmFsc2VcIlxuICB2YXIgZ3RmZ2ZmRm9ybWF0ID0gXCJGYWxzZVwiXG4gIHZhciBsaXN0ID0gJGpvYi5pbnB1dHMuc2pkYkdURmZpbGVcbiAgdmFyIHBhdGhzX2xpc3QgPSBbXVxuICB2YXIgam9pbmVkX3BhdGhzID0gXCJcIlxuICBcbiAgaWYgKGxpc3QpIHtcbiAgICBsaXN0LmZvckVhY2goZnVuY3Rpb24oZil7cmV0dXJuIHBhdGhzX2xpc3QucHVzaChmLnBhdGgpfSlcbiAgICBqb2luZWRfcGF0aHMgPSBwYXRoc19saXN0LmpvaW4oXCIgXCIpXG5cblxuICAgIHBhdGhzX2xpc3QuZm9yRWFjaChmdW5jdGlvbihmKXtcbiAgICAgIGV4dCA9IGYucmVwbGFjZSgvXi4qXFwuLywgJycpXG4gICAgICBpZiAoZXh0ID09IFwiZ2ZmXCIgfHwgZXh0ID09IFwiZ3RmXCIpIHtcbiAgICAgICAgZ3RmZ2ZmRm9ybWF0ID0gXCJUcnVlXCJcbiAgICAgICAgcmV0dXJuIGd0ZmdmZkZvcm1hdFxuICAgICAgfVxuICAgICAgaWYgKGV4dCA9PSBcInR4dFwiKSB7XG4gICAgICAgIHNqRm9ybWF0ID0gXCJUcnVlXCJcbiAgICAgICAgcmV0dXJuIHNqRm9ybWF0XG4gICAgICB9XG4gICAgfSlcblxuICAgIGlmICgkam9iLmlucHV0cy5zamRiR1RGZmlsZSAmJiAkam9iLmlucHV0cy5zamRiSW5zZXJ0U2F2ZSAhPSBcIk5vbmVcIikge1xuICAgICAgaWYgKHNqRm9ybWF0ID09IFwiVHJ1ZVwiKSB7XG4gICAgICAgIHJldHVybiBcIi0tc2pkYkZpbGVDaHJTdGFydEVuZCBcIi5jb25jYXQoam9pbmVkX3BhdGhzKVxuICAgICAgfVxuICAgICAgZWxzZSBpZiAoZ3RmZ2ZmRm9ybWF0ID09IFwiVHJ1ZVwiKSB7XG4gICAgICAgIHJldHVybiBcIi0tc2pkYkdURmZpbGUgXCIuY29uY2F0KGpvaW5lZF9wYXRocylcbiAgICAgIH1cbiAgICB9XG4gIH1cbn0iCiAgICB9CiAgfSwgewogICAgInNlcGFyYXRlIiA6IHRydWUsCiAgICAidmFsdWVGcm9tIiA6IHsKICAgICAgImNsYXNzIiA6ICJFeHByZXNzaW9uIiwKICAgICAgImVuZ2luZSIgOiAiI2N3bC1qcy1lbmdpbmUiLAogICAgICAic2NyaXB0IiA6ICJ7XG4gIGEgPSBiID0gYyA9IGQgPSBlID0gZiA9IGcgPSBbXVxuICBpZiAoJGpvYi5pbnB1dHMuc2pkYkdURmNoclByZWZpeCkge1xuICAgIGEgPSBbXCItLXNqZGJHVEZjaHJQcmVmaXhcIiwgJGpvYi5pbnB1dHMuc2pkYkdURmNoclByZWZpeF1cbiAgfVxuICBpZiAoJGpvYi5pbnB1dHMuc2pkYkdURmZlYXR1cmVFeG9uKSB7XG4gICAgYiA9IFtcIi0tc2pkYkdURmZlYXR1cmVFeG9uXCIsICRqb2IuaW5wdXRzLnNqZGJHVEZmZWF0dXJlRXhvbl1cbiAgfVxuICBpZiAoJGpvYi5pbnB1dHMuc2pkYkdURnRhZ0V4b25QYXJlbnRUcmFuc2NyaXB0KSB7XG4gICAgYyA9IFtcIi0tc2pkYkdURnRhZ0V4b25QYXJlbnRUcmFuc2NyaXB0XCIsICRqb2IuaW5wdXRzLnNqZGJHVEZ0YWdFeG9uUGFyZW50VHJhbnNjcmlwdF1cbiAgfVxuICBpZiAoJGpvYi5pbnB1dHMuc2pkYkdURnRhZ0V4b25QYXJlbnRHZW5lKSB7XG4gICAgZCA9IFtcIi0tc2pkYkdURnRhZ0V4b25QYXJlbnRHZW5lXCIsICRqb2IuaW5wdXRzLnNqZGJHVEZ0YWdFeG9uUGFyZW50R2VuZV1cbiAgfVxuICBpZiAoJGpvYi5pbnB1dHMuc2pkYk92ZXJoYW5nKSB7XG4gICAgZSA9IFtcIi0tc2pkYk92ZXJoYW5nXCIsICRqb2IuaW5wdXRzLnNqZGJPdmVyaGFuZ11cbiAgfVxuICBpZiAoJGpvYi5pbnB1dHMuc2pkYlNjb3JlKSB7XG4gICAgZiA9IFtcIi0tc2pkYlNjb3JlXCIsICRqb2IuaW5wdXRzLnNqZGJTY29yZV1cbiAgfVxuICBpZiAoJGpvYi5pbnB1dHMuc2pkYkluc2VydFNhdmUpIHtcbiAgICBnID0gW1wiLS1zamRiSW5zZXJ0U2F2ZVwiLCAkam9iLmlucHV0cy5zamRiSW5zZXJ0U2F2ZV1cbiAgfVxuICBcbiAgXG4gIFxuICBpZiAoJGpvYi5pbnB1dHMuc2pkYkluc2VydFNhdmUgIT0gXCJOb25lXCIgJiYgJGpvYi5pbnB1dHMuc2pkYkdURmZpbGUpIHtcbiAgICBuZXdfbGlzdCA9IGEuY29uY2F0KGIsIGMsIGQsIGUsIGYsIGcpXG4gICAgcmV0dXJuIG5ld19saXN0LmpvaW4oXCIgXCIpXG4gIH1cbn0iCiAgICB9CiAgfSwgewogICAgInNlcGFyYXRlIiA6IHRydWUsCiAgICAidmFsdWVGcm9tIiA6IHsKICAgICAgImNsYXNzIiA6ICJFeHByZXNzaW9uIiwKICAgICAgImVuZ2luZSIgOiAiI2N3bC1qcy1lbmdpbmUiLAogICAgICAic2NyaXB0IiA6ICJ7XG4gIGlmICgkam9iLmlucHV0cy50d29wYXNzTW9kZSA9PSBcIkJhc2ljXCIpIHtcbiAgICBpZiAoJGpvYi5pbnB1dHMudHdvcGFzczFyZWFkc04pIHtcbiAgICAgIHJldHVybiBcIi0tdHdvcGFzczFyZWFkc04gXCIuY29uY2F0KCRqb2IuaW5wdXRzLnR3b3Bhc3MxcmVhZHNOKSBcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFwiLS10d29wYXNzMXJlYWRzTiAtMVwiXG4gICAgfVxuICB9XG59IgogICAgfQogIH0sIHsKICAgICJzZXBhcmF0ZSIgOiB0cnVlLAogICAgInZhbHVlRnJvbSIgOiB7CiAgICAgICJjbGFzcyIgOiAiRXhwcmVzc2lvbiIsCiAgICAgICJlbmdpbmUiIDogIiNjd2wtanMtZW5naW5lIiwKICAgICAgInNjcmlwdCIgOiAie1xuICBpZiAoJGpvYi5pbnB1dHMuY2hpbU91dFR5cGUgPT0gXCJXaXRoaW5cIikge1xuICAgIHJldHVybiBcIi0tY2hpbU91dFR5cGUgXCIuY29uY2F0KFwiV2l0aGluXCIsICRqb2IuaW5wdXRzLm91dFNBTXR5cGUpXG4gIH1cbiAgZWxzZSB7XG4gICAgcmV0dXJuIFwiLS1jaGltT3V0VHlwZSBTZXBhcmF0ZVNBTW9sZFwiXG4gIH1cbn0iCiAgICB9CiAgfSwgewogICAgInNlcGFyYXRlIiA6IHRydWUsCiAgICAidmFsdWVGcm9tIiA6IHsKICAgICAgImNsYXNzIiA6ICJFeHByZXNzaW9uIiwKICAgICAgImVuZ2luZSIgOiAiI2N3bC1qcy1lbmdpbmUiLAogICAgICAic2NyaXB0IiA6ICJ7XG4gIGlmICgkam9iLmlucHV0cy5ub19yZWFkX2dyb3Vwcykge1xuICByZXR1cm4gXCJcIiB9XG4gIGVsc2Uge1xuICB2YXIgcGFyYW1fbGlzdCA9IFtdXG4gIHZhciBhbGxfc2FtcGxlcyA9IFtdXG4gIHZhciBsaXN0ID0gW10uY29uY2F0KCRqb2IuaW5wdXRzLnJlYWRzKVxuICBnZXRVbmlxdWUgPSBmdW5jdGlvbihhcnIpe1xuICAgIHZhciB1ID0ge30sIGEgPSBbXTtcbiAgICBmb3IodmFyIGkgPSAwLCBsID0gYXJyLmxlbmd0aDsgaSA8IGw7ICsraSl7XG4gICAgICBpZih1Lmhhc093blByb3BlcnR5KGFycltpXSkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBhLnB1c2goYXJyW2ldKTtcbiAgICAgIHVbYXJyW2ldXSA9IDE7XG4gICAgfVxuICAgIHJldHVybiBhO1xuICB9XG4gIFxuICBmdW5jdGlvbiBhZGRfcGFyYW0oa2V5LCB2YWx1ZSl7XG4gICAgaWYgKHZhbHVlID09IFwiXCIpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHJldHVybiBwYXJhbV9saXN0LnB1c2goa2V5LmNvbmNhdChcIjpcIiwgdmFsdWUpKVxuICAgIH1cbiAgfVxuICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCBsaXN0Lmxlbmd0aDsgKytpbmRleCkge1xuICAgIGlmIChsaXN0W2luZGV4XS5tZXRhZGF0YSAhPSBudWxsKXtcbiAgICBcdGlmIChsaXN0W2luZGV4XS5tZXRhZGF0YS5zYW1wbGVfaWQgIT0gbnVsbCl7XG4gICAgICBcdFx0YWxsX3NhbXBsZXMucHVzaChsaXN0W2luZGV4XS5tZXRhZGF0YS5zYW1wbGVfaWQpXG4gICAgICB9XG4gICAgfVxuICB9XG4gIFxuICBzYW1wbGVzID0gZ2V0VW5pcXVlKGFsbF9zYW1wbGVzKVxuICB2YXIgc2FtcGxlc19naXZlbiA9IGFsbF9zYW1wbGVzLmxlbmd0aCA9PSBsaXN0Lmxlbmd0aFxuICB2YXIgYWxsX3JnID0gW11cbiAgaWYgKHNhbXBsZXNfZ2l2ZW4pe1xuICAgIGZvciAoc2FtcGxlX2luZCA9IDA7IHNhbXBsZV9pbmQgPCBzYW1wbGVzLmxlbmd0aDsgKytzYW1wbGVfaW5kKXtcbiAgICBcdGZvciAocmVhZF9pbmQgPSAwOyByZWFkX2luZCA8IGxpc3QubGVuZ3RoOyArK3JlYWRfaW5kKSB7XG4gICAgICAgIHZhciBwYXJhbV9saXN0ID0gW11cbiAgICAgICAgaWYgKGxpc3RbcmVhZF9pbmRdLm1ldGFkYXRhICYmIGxpc3RbcmVhZF9pbmRdLm1ldGFkYXRhLnNhbXBsZV9pZCA9PSBzYW1wbGVzW3NhbXBsZV9pbmRdICYmIGxpc3RbcmVhZF9pbmRdLm1ldGFkYXRhLnBhaXJlZF9lbmQgIT0gXCIyXCIpIHtcbiAgICAgICAgXHRhZGRfcGFyYW0oJ0lEJywgc2FtcGxlc1tzYW1wbGVfaW5kXSlcbiAgICAgICAgICBpZiAoJGpvYi5pbnB1dHMucmdfc2VxX2NlbnRlcikge1xuICAgICAgICAgICAgYWRkX3BhcmFtKCdDTicsICRqb2IuaW5wdXRzLnJnX3NlcV9jZW50ZXIpXG4gICAgICAgICAgfSBlbHNlIGlmIChsaXN0W3JlYWRfaW5kXS5tZXRhZGF0YSAmJiBsaXN0W3JlYWRfaW5kXS5tZXRhZGF0YS5zZXFfY2VudGVyKSB7XG4gICAgICAgICAgICBhZGRfcGFyYW0oJ0NOJywgbGlzdFtyZWFkX2luZF0ubWV0YWRhdGEuc2VxX2NlbnRlcilcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCRqb2IuaW5wdXRzLnJnX2xpYnJhcnlfaWQpIHtcbiAgICAgICAgICAgIGFkZF9wYXJhbSgnTEInLCAkam9iLmlucHV0cy5yZ19saWJyYXJ5X2lkKVxuICAgICAgICAgIH0gZWxzZSBpZiAobGlzdFtyZWFkX2luZF0ubWV0YWRhdGEgJiYgbGlzdFtyZWFkX2luZF0ubWV0YWRhdGEubGlicmFyeV9pZCkge1xuICAgICAgICAgICAgYWRkX3BhcmFtKCdMQicsIGxpc3RbcmVhZF9pbmRdLm1ldGFkYXRhLmxpYnJhcnlfaWQpXG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICgkam9iLmlucHV0cy5yZ19tZmwpIHtcbiAgICAgICAgICAgIGFkZF9wYXJhbSgnUEknLCAkam9iLmlucHV0cy5yZ19tZmwpXG4gICAgICAgICAgfSBlbHNlIGlmIChsaXN0W3JlYWRfaW5kXS5tZXRhZGF0YSAmJiBsaXN0W3JlYWRfaW5kXS5tZXRhZGF0YS5tZWRpYW5fZnJhZ21lbnRfbGVuZ3RoKSB7XG4gICAgICAgICAgICBhZGRfcGFyYW0oJ1BJJywgbGlzdFtyZWFkX2luZF0ubWV0YWRhdGEubWVkaWFuX2ZyYWdtZW50X2xlbmd0aClcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCRqb2IuaW5wdXRzLnJnX3BsYXRmb3JtKSB7XG4gICAgICAgICAgICBhZGRfcGFyYW0oJ1BMJywgJGpvYi5pbnB1dHMucmdfcGxhdGZvcm0ucmVwbGFjZSgvIC9nLFwiX1wiKSlcbiAgICAgICAgICB9IGVsc2UgaWYgKGxpc3RbcmVhZF9pbmRdLm1ldGFkYXRhICYmIGxpc3RbcmVhZF9pbmRdLm1ldGFkYXRhLnBsYXRmb3JtKSB7XG4gICAgICAgICAgICBhZGRfcGFyYW0oJ1BMJywgbGlzdFtyZWFkX2luZF0ubWV0YWRhdGEucGxhdGZvcm0ucmVwbGFjZSgvIC9nLFwiX1wiKSlcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCRqb2IuaW5wdXRzLnJnX3BsYXRmb3JtX3VuaXRfaWQpIHtcbiAgICAgICAgICAgIGFkZF9wYXJhbSgnUFUnLCAkam9iLmlucHV0cy5yZ19wbGF0Zm9ybV91bml0X2lkKVxuICAgICAgICAgIH0gZWxzZSBpZiAobGlzdFtyZWFkX2luZF0ubWV0YWRhdGEgJiYgbGlzdFtyZWFkX2luZF0ubWV0YWRhdGEucGxhdGZvcm1fdW5pdF9pZCkge1xuICAgICAgICAgICAgYWRkX3BhcmFtKCdQVScsIGxpc3RbcmVhZF9pbmRdLm1ldGFkYXRhLnBsYXRmb3JtX3VuaXRfaWQpXG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICgkam9iLmlucHV0cy5yZ19zYW1wbGVfaWQpIHtcbiAgICAgICAgICAgIGFkZF9wYXJhbSgnU00nLCAkam9iLmlucHV0cy5yZ19zYW1wbGVfaWQpXG4gICAgICAgICAgfSBlbHNlIGlmIChsaXN0W3JlYWRfaW5kXS5tZXRhZGF0YSAmJiBsaXN0W3JlYWRfaW5kXS5tZXRhZGF0YS5zYW1wbGVfaWQpIHtcbiAgICAgICAgICAgIGFkZF9wYXJhbSgnU00nLCBsaXN0W3JlYWRfaW5kXS5tZXRhZGF0YS5zYW1wbGVfaWQpXG4gICAgICAgICAgfVxuICAgICAgICAgIGFsbF9yZy5wdXNoKHBhcmFtX2xpc3Quam9pbihcIiBcIikpXG4gICAgICAgfVxuXG4gICAgfVxuICAgfVxuICB9IGVsc2Uge1xuICBcdHZhciBwYXJhbV9saXN0ID0gW11cbiAgICBhZGRfcGFyYW0oJ0lEJywgXCIxXCIpXG4gICAgaWYgKCRqb2IuaW5wdXRzLnJnX3NlcV9jZW50ZXIpIHtcbiAgICAgIGFkZF9wYXJhbSgnQ04nLCAkam9iLmlucHV0cy5yZ19zZXFfY2VudGVyKVxuICAgIH0gZWxzZSBpZiAoW10uY29uY2F0KCRqb2IuaW5wdXRzLnJlYWRzKVswXS5tZXRhZGF0YSAmJiBbXS5jb25jYXQoJGpvYi5pbnB1dHMucmVhZHMpWzBdLm1ldGFkYXRhLnNlcV9jZW50ZXIpIHtcbiAgICAgIGFkZF9wYXJhbSgnQ04nLCBbXS5jb25jYXQoJGpvYi5pbnB1dHMucmVhZHMpWzBdLm1ldGFkYXRhLnNlcV9jZW50ZXIpXG4gICAgfVxuICAgIGlmICgkam9iLmlucHV0cy5yZ19saWJyYXJ5X2lkKSB7XG4gICAgICBhZGRfcGFyYW0oJ0xCJywgJGpvYi5pbnB1dHMucmdfbGlicmFyeV9pZClcbiAgICB9IGVsc2UgaWYgKFtdLmNvbmNhdCgkam9iLmlucHV0cy5yZWFkcylbMF0ubWV0YWRhdGEgJiYgW10uY29uY2F0KCRqb2IuaW5wdXRzLnJlYWRzKVswXS5tZXRhZGF0YS5saWJyYXJ5X2lkKSB7XG4gICAgICBhZGRfcGFyYW0oJ0xCJywgW10uY29uY2F0KCRqb2IuaW5wdXRzLnJlYWRzKVswXS5tZXRhZGF0YS5saWJyYXJ5X2lkKVxuICAgIH1cbiAgICBpZiAoJGpvYi5pbnB1dHMucmdfbWZsKSB7XG4gICAgICBhZGRfcGFyYW0oJ1BJJywgJGpvYi5pbnB1dHMucmdfbWZsKVxuICAgIH0gZWxzZSBpZiAoW10uY29uY2F0KCRqb2IuaW5wdXRzLnJlYWRzKVswXS5tZXRhZGF0YSAmJiBbXS5jb25jYXQoJGpvYi5pbnB1dHMucmVhZHMpWzBdLm1ldGFkYXRhLm1lZGlhbl9mcmFnbWVudF9sZW5ndGgpIHtcbiAgICAgIGFkZF9wYXJhbSgnUEknLCBbXS5jb25jYXQoJGpvYi5pbnB1dHMucmVhZHMpWzBdLm1ldGFkYXRhLm1lZGlhbl9mcmFnbWVudF9sZW5ndGgpXG4gICAgfVxuICAgIGlmICgkam9iLmlucHV0cy5yZ19wbGF0Zm9ybSkge1xuICAgICAgYWRkX3BhcmFtKCdQTCcsICRqb2IuaW5wdXRzLnJnX3BsYXRmb3JtLnJlcGxhY2UoLyAvZyxcIl9cIikpXG4gICAgfSBlbHNlIGlmIChbXS5jb25jYXQoJGpvYi5pbnB1dHMucmVhZHMpWzBdLm1ldGFkYXRhICYmIFtdLmNvbmNhdCgkam9iLmlucHV0cy5yZWFkcylbMF0ubWV0YWRhdGEucGxhdGZvcm0pIHtcbiAgICAgIGFkZF9wYXJhbSgnUEwnLCBbXS5jb25jYXQoJGpvYi5pbnB1dHMucmVhZHMpWzBdLm1ldGFkYXRhLnBsYXRmb3JtLnJlcGxhY2UoLyAvZyxcIl9cIikpXG4gICAgfVxuICAgIGlmICgkam9iLmlucHV0cy5yZ19wbGF0Zm9ybV91bml0X2lkKSB7XG4gICAgICBhZGRfcGFyYW0oJ1BVJywgJGpvYi5pbnB1dHMucmdfcGxhdGZvcm1fdW5pdF9pZClcbiAgICB9IGVsc2UgaWYgKFtdLmNvbmNhdCgkam9iLmlucHV0cy5yZWFkcylbMF0ubWV0YWRhdGEgJiYgW10uY29uY2F0KCRqb2IuaW5wdXRzLnJlYWRzKVswXS5tZXRhZGF0YS5wbGF0Zm9ybV91bml0X2lkKSB7XG4gICAgICBhZGRfcGFyYW0oJ1BVJywgW10uY29uY2F0KCRqb2IuaW5wdXRzLnJlYWRzKVswXS5tZXRhZGF0YS5wbGF0Zm9ybV91bml0X2lkKVxuICAgIH1cbiAgICBpZiAoJGpvYi5pbnB1dHMucmdfc2FtcGxlX2lkKSB7XG4gICAgICBhZGRfcGFyYW0oJ1NNJywgJGpvYi5pbnB1dHMucmdfc2FtcGxlX2lkKVxuICAgIH0gZWxzZSBpZiAoW10uY29uY2F0KCRqb2IuaW5wdXRzLnJlYWRzKVswXS5tZXRhZGF0YSAmJiBbXS5jb25jYXQoJGpvYi5pbnB1dHMucmVhZHMpWzBdLm1ldGFkYXRhLnNhbXBsZV9pZCkge1xuICAgICAgYWRkX3BhcmFtKCdTTScsIFtdLmNvbmNhdCgkam9iLmlucHV0cy5yZWFkcylbMF0ubWV0YWRhdGEuc2FtcGxlX2lkKVxuICAgIH1cbiAgICByZXR1cm4gXCItLW91dFNBTWF0dHJSR2xpbmUgXCIuY29uY2F0KHBhcmFtX2xpc3Quam9pbihcIiBcIikpXG4gIH1cbiAgcmV0dXJuIFwiLS1vdXRTQU1hdHRyUkdsaW5lIFwiLmNvbmNhdChhbGxfcmcuam9pbihcIiAsIFwiKSlcbiAgfVxufSIKICAgIH0KICB9LCB7CiAgICAic2VwYXJhdGUiIDogdHJ1ZSwKICAgICJ2YWx1ZUZyb20iIDogewogICAgICAiY2xhc3MiIDogIkV4cHJlc3Npb24iLAogICAgICAiZW5naW5lIiA6ICIjY3dsLWpzLWVuZ2luZSIsCiAgICAgICJzY3JpcHQiIDogIntcbiAgaWYgKCRqb2IuaW5wdXRzLnNqZGJHVEZmaWxlICYmICRqb2IuaW5wdXRzLnF1YW50TW9kZSkge1xuICAgIHJldHVybiBcIi0tcXVhbnRNb2RlIFwiLmNvbmNhdCgkam9iLmlucHV0cy5xdWFudE1vZGUpXG4gIH1cbn0iCiAgICB9CiAgfSwgewogICAgInBvc2l0aW9uIiA6IDEwMCwKICAgICJzZXBhcmF0ZSIgOiB0cnVlLAogICAgInZhbHVlRnJvbSIgOiB7CiAgICAgICJjbGFzcyIgOiAiRXhwcmVzc2lvbiIsCiAgICAgICJlbmdpbmUiIDogIiNjd2wtanMtZW5naW5lIiwKICAgICAgInNjcmlwdCIgOiAie1xuICBmdW5jdGlvbiBzaGFyZWRTdGFydChhcnJheSl7XG4gIHZhciBBPSBhcnJheS5jb25jYXQoKS5zb3J0KCksIFxuICAgICAgYTE9IEFbMF0sIGEyPSBBW0EubGVuZ3RoLTFdLCBMPSBhMS5sZW5ndGgsIGk9IDA7XG4gIHdoaWxlKGk8TCAmJiBhMS5jaGFyQXQoaSk9PT0gYTIuY2hhckF0KGkpKSBpKys7XG4gIHJldHVybiBhMS5zdWJzdHJpbmcoMCwgaSk7XG4gIH1cbiAgcGF0aF9saXN0ID0gW11cbiAgYXJyID0gW10uY29uY2F0KCRqb2IuaW5wdXRzLnJlYWRzKVxuICBhcnIuZm9yRWFjaChmdW5jdGlvbihmKXtyZXR1cm4gcGF0aF9saXN0LnB1c2goZi5wYXRoLnJlcGxhY2UoL1xcXFwvZywnLycpLnJlcGxhY2UoIC8uKlxcLy8sICcnICkpfSlcbiAgY29tbW9uX3ByZWZpeCA9IHNoYXJlZFN0YXJ0KHBhdGhfbGlzdClcbiAgaW50ZXJtZWRpYXRlID0gY29tbW9uX3ByZWZpeC5yZXBsYWNlKCAvXFwtJHxcXF8kfFxcLiQvLCAnJyApLmNvbmNhdChcIi5fU1RBUmdlbm9tZVwiKVxuICBzb3VyY2UgPSBcIi4vXCIuY29uY2F0KGludGVybWVkaWF0ZSlcbiAgZGVzdGluYXRpb24gPSBpbnRlcm1lZGlhdGUuY29uY2F0KFwiLnRhclwiKVxuICBpZiAoJGpvYi5pbnB1dHMuc2pkYkdURmZpbGUgJiYgJGpvYi5pbnB1dHMuc2pkYkluc2VydFNhdmUgJiYgJGpvYi5pbnB1dHMuc2pkYkluc2VydFNhdmUgIT0gXCJOb25lXCIpIHtcbiAgICByZXR1cm4gXCImJiB0YXIgLXZjZiBcIi5jb25jYXQoZGVzdGluYXRpb24sIFwiIFwiLCBzb3VyY2UpXG4gIH1cbn0iCiAgICB9CiAgfSwgewogICAgInByZWZpeCIgOiAiLS1vdXRGaWxlTmFtZVByZWZpeCIsCiAgICAic2VwYXJhdGUiIDogdHJ1ZSwKICAgICJ2YWx1ZUZyb20iIDogewogICAgICAiY2xhc3MiIDogIkV4cHJlc3Npb24iLAogICAgICAiZW5naW5lIiA6ICIjY3dsLWpzLWVuZ2luZSIsCiAgICAgICJzY3JpcHQiIDogIntcbiAgZnVuY3Rpb24gc2hhcmVkU3RhcnQoYXJyYXkpe1xuICB2YXIgQT0gYXJyYXkuY29uY2F0KCkuc29ydCgpLCBcbiAgICAgIGExPSBBWzBdLCBhMj0gQVtBLmxlbmd0aC0xXSwgTD0gYTEubGVuZ3RoLCBpPSAwO1xuICB3aGlsZShpPEwgJiYgYTEuY2hhckF0KGkpPT09IGEyLmNoYXJBdChpKSkgaSsrO1xuICByZXR1cm4gYTEuc3Vic3RyaW5nKDAsIGkpO1xuICB9XG4gIHBhdGhfbGlzdCA9IFtdXG4gIGFyciA9IFtdLmNvbmNhdCgkam9iLmlucHV0cy5yZWFkcylcbiAgYXJyLmZvckVhY2goZnVuY3Rpb24oZil7cmV0dXJuIHBhdGhfbGlzdC5wdXNoKGYucGF0aC5yZXBsYWNlKC9cXFxcL2csJy8nKS5yZXBsYWNlKCAvLipcXC8vLCAnJyApKX0pXG4gIGNvbW1vbl9wcmVmaXggPSBzaGFyZWRTdGFydChwYXRoX2xpc3QpXG4gIGlmIChjb21tb25fcHJlZml4ID09IFwiXCIgfHwgY29tbW9uX3ByZWZpeCA9PSBcIl9cIil7XG4gICAgY29tbW9uX3ByZWZpeCA9IFwiQWxsXCJcbiAgfVxuICByZXR1cm4gXCIuL1wiLmNvbmNhdChjb21tb25fcHJlZml4LnJlcGxhY2UoIC9cXC0kfFxcXyR8XFwuJC8sICcnICksIFwiLlwiKVxufSIKICAgIH0KICB9LCB7CiAgICAicG9zaXRpb24iIDogMTAxLAogICAgInNlcGFyYXRlIiA6IHRydWUsCiAgICAidmFsdWVGcm9tIiA6IHsKICAgICAgImNsYXNzIiA6ICJFeHByZXNzaW9uIiwKICAgICAgImVuZ2luZSIgOiAiI2N3bC1qcy1lbmdpbmUiLAogICAgICAic2NyaXB0IiA6ICJ7XG4gIGZ1bmN0aW9uIHNoYXJlZFN0YXJ0KGFycmF5KXtcbiAgdmFyIEE9IGFycmF5LmNvbmNhdCgpLnNvcnQoKSwgXG4gICAgICBhMT0gQVswXSwgYTI9IEFbQS5sZW5ndGgtMV0sIEw9IGExLmxlbmd0aCwgaT0gMDtcbiAgd2hpbGUoaTxMICYmIGExLmNoYXJBdChpKT09PSBhMi5jaGFyQXQoaSkpIGkrKztcbiAgcmV0dXJuIGExLnN1YnN0cmluZygwLCBpKTtcbiAgfVxuICBwYXRoX2xpc3QgPSBbXVxuICBhcnIgPSBbXS5jb25jYXQoJGpvYi5pbnB1dHMucmVhZHMpXG4gIGFyci5mb3JFYWNoKGZ1bmN0aW9uKGYpe3JldHVybiBwYXRoX2xpc3QucHVzaChmLnBhdGgucmVwbGFjZSgvXFxcXC9nLCcvJykucmVwbGFjZSggLy4qXFwvLywgJycgKSl9KVxuICBjb21tb25fcHJlZml4ID0gc2hhcmVkU3RhcnQocGF0aF9saXN0KVxuICBtYXRlMSA9IGNvbW1vbl9wcmVmaXgucmVwbGFjZSggL1xcLSR8XFxfJHxcXC4kLywgJycgKS5jb25jYXQoXCIuVW5tYXBwZWQub3V0Lm1hdGUxXCIpXG4gIG1hdGUyID0gY29tbW9uX3ByZWZpeC5yZXBsYWNlKCAvXFwtJHxcXF8kfFxcLiQvLCAnJyApLmNvbmNhdChcIi5Vbm1hcHBlZC5vdXQubWF0ZTJcIilcbiAgdmFyIHggPSBhcnJbMF0ucGF0aC5zcGxpdCgnLycpLnBvcCgpXG4gIHZhciB5ID0geC50b0xvd2VyQ2FzZSgpXG4gIFxuICBpZiAoJGpvYi5pbnB1dHMudW5tYXBwZWRPdXRwdXROYW1lKSB7XG4gIFx0dmFyIG91dHB1dF9uYW1lID0gXCIuXCIgKyAkam9iLmlucHV0cy51bm1hcHBlZE91dHB1dE5hbWUgKyBcIi5cIlxuICB9IGVsc2Uge1xuICAgIHZhciBvdXRwdXRfbmFtZSA9IFwiLlVubWFwcGVkLm91dC5cIlxuICB9XG4gIFxuICBtYXRlMV8xID0gY29tbW9uX3ByZWZpeC5yZXBsYWNlKCAvXFwtJHxcXF8kfFxcLiQvLCAnJyApLmNvbmNhdChvdXRwdXRfbmFtZSArIFwibWF0ZTFcIilcbiAgbWF0ZTJfMSA9IGNvbW1vbl9wcmVmaXgucmVwbGFjZSggL1xcLSR8XFxfJHxcXC4kLywgJycgKS5jb25jYXQob3V0cHV0X25hbWUgKyBcIm1hdGUyXCIpXG4gIFxuICBcbiAgaWYgKHkuZW5kc1dpdGgoJ2Zhc3RxJykgfHwgeS5lbmRzV2l0aCgnZnEnKSB8fCB5LmVuZHNXaXRoKCdmYXN0cS5neicpIHx8IHkuZW5kc1dpdGgoJ2Zhc3RxLmJ6MicpIHx8IHkuZW5kc1dpdGgoJ2ZxLmd6JykgfHwgeS5lbmRzV2l0aCgnZnEuYnoyJykpIHsgXG4gICAgbWF0ZTFmcSA9IG1hdGUxXzEuY29uY2F0KFwiLmZhc3RxXCIpXG4gICAgbWF0ZTJmcSA9IG1hdGUyXzEuY29uY2F0KFwiLmZhc3RxXCIpXG4gIH0gZWxzZSBpZiAoeS5lbmRzV2l0aCgnZmFzdGEnKSB8fCB5LmVuZHNXaXRoKCdmYScpIHx8IHkuZW5kc1dpdGgoJ2Zhc3RhLmd6JykgfHwgeS5lbmRzV2l0aCgnZmFzdGEuYnoyJykgfHwgeS5lbmRzV2l0aCgnZmEuZ3onKSB8fCB5LmVuZHNXaXRoKCdmYS5iejInKSkge1xuICAgIG1hdGUxZnEgPSBtYXRlMV8xLmNvbmNhdChcIi5mYXN0YVwiKVxuICAgIG1hdGUyZnEgPSBtYXRlMl8xLmNvbmNhdChcIi5mYXN0YVwiKVxuICB9XG5cbiAgXG4gIGlmICgkam9iLmlucHV0cy5zb3J0VW5tYXBwZWRSZWFkcykge1xuICAgIFxuICB2YXIgY21kID0gXCJcIlxuICB2YXIgc29ydF9jbWQgPSBcIiB8IHNlZCAncy9cXFxcdC4qLy8nIHwgcGFzdGUgLSAtIC0gLSB8IHNvcnQgLWsxLDEgLVMgMTBHIHwgdHIgJ1xcXFx0JyAnXFxcXG4nID4gXCJcbiAgaWYgKCRqb2IuaW5wdXRzLm91dFJlYWRzVW5tYXBwZWQgPT0gXCJGYXN0eFwiICYmIGFyci5sZW5ndGggPiAxKSB7XG4gICAgY21kID0gY21kLmNvbmNhdChcIiAmJiBjYXQgXCIsIG1hdGUyLCBzb3J0X2NtZCwgbWF0ZTJmcSwgXCIgJiYgcm0gXCIsIG1hdGUyKVxuICB9XG4gIGlmICgkam9iLmlucHV0cy5vdXRSZWFkc1VubWFwcGVkID09IFwiRmFzdHhcIikge1xuICAgIGNtZCA9IGNtZC5jb25jYXQoXCIgJiYgY2F0IFwiLCBtYXRlMSwgc29ydF9jbWQsIG1hdGUxZnEsIFwiICYmIHJtIFwiLCBtYXRlMSlcbiAgfVxuICByZXR1cm4gY21kXG4gIFxuICB9IGVsc2Uge1xuXG4gIGlmICgkam9iLmlucHV0cy5vdXRSZWFkc1VubWFwcGVkID09IFwiRmFzdHhcIiAmJiBhcnIubGVuZ3RoID4gMSkge1xuICAgIHJldHVybiBcIiYmIG12IFwiLmNvbmNhdChtYXRlMSwgXCIgXCIsIG1hdGUxZnEsIFwiICYmIG12IFwiLCBtYXRlMiwgXCIgXCIsIG1hdGUyZnEpXG4gIH1cbiAgZWxzZSBpZiAoJGpvYi5pbnB1dHMub3V0UmVhZHNVbm1hcHBlZCA9PSBcIkZhc3R4XCIgJiYgYXJyLmxlbmd0aCA9PSAxKSB7XG4gICAgcmV0dXJuIFwiJiYgbXYgXCIuY29uY2F0KG1hdGUxLCBcIiBcIiwgbWF0ZTFmcSlcbiAgfVxuXG4gIH1cbn0iCiAgICB9CiAgfSBdLAogICJzYmc6cmV2aXNpb24iIDogNDEsCiAgInNiZzpjYXRlZ29yaWVzIiA6IFsgIkFsaWdubWVudCIgXSwKICAiZGVzY3JpcHRpb24iIDogIlNUQVIgaXMgYW4gdWx0cmFmYXN0IHVuaXZlcnNhbCBSTkEtc2VxIGFsaWduZXIuIEl0IGhhcyB2ZXJ5IGhpZ2ggbWFwcGluZyBzcGVlZCwgYWNjdXJhdGUgYWxpZ25tZW50IG9mIGNvbnRpZ3VvdXMgYW5kIHNwbGljZWQgcmVhZHMsIGRldGVjdGlvbiBvZiBwb2x5QS10YWlscywgbm9uLWNhbm9uaWNhbCBzcGxpY2VzIGFuZCBjaGltZXJpYyAoZnVzaW9uKSBqdW5jdGlvbnMuIEl0IHdvcmtzIHdpdGggcmVhZHMgc3RhcnRpbmcgZnJvbSBsZW5ndGhzIH4xNSBiYXNlcyB1cCB0byB+MzAwIGJhc2VzLiBJbiBjYXNlIG9mIGhhdmluZyBsb25nZXIgcmVhZHMsIHVzZSBvZiBTVEFSIExvbmcgaXMgcmVjb21tZW5kZWQuXG5cbiMjI0NvbW1vbiBpc3N1ZXMjIyNcbjEuIEluIGNhc2Ugb2YgcGFpcmVkLWVuZCBhbGlnbm1lbnQgaXQgaXMgY3J1Y2lhbCB0byBzZXQgbWV0YWRhdGEgJ3BhaXJlZC1lbmQnIGZpZWxkIHRvIDEvMi5cbjIuIEZpbGVzIGluIG11bHRpLUZBU1RRIGZvcm1hdCBhcmUgY3VycmVudGx5IG5vdCBzdXBwb3J0ZWQsIGkuZS4gaWYgeW91IGhhdmUgc2luZ2xlLWVuZCByZWFkcyB0aGF0IHNwYW4gbXVsdGlwbGUgRkFTVFEgZmlsZXMsIG9yIHBhaXJlZC1lbmQgcmVhZHMgdGhhdCBzcGFuIG1vcmUgdGhhbiAyIGZpbGVzLCBwbGVhc2UgdXNlIGEgdG9vbCBsaWtlIFNCRyBNZXJnZSBGQVNUUXMgYmVmb3JlIHByb3ZpZGluZyB5b3VyIGZpbGVzIHRvIHRoZSBTVEFSIGFsaWduZXIuIFxuMy4gSWYgeW91IGFyZSBwcm92aWRpbmcgYSBHRkYzIGZpbGUgYW5kIHdpc2ggdG8gdXNlIFNUQVIgcmVzdWx0cyBmb3IgZnVydGhlciBkb3duc3RyZWFtIGFuYWx5c2lzLCBhIGdvb2QgaWRlYSB3b3VsZCBiZSB0byBzZXQgdGhlIFwiRXhvbnMnIHBhcmVudHMgbmFtZVwiIChpZDogc2pkYkdURnRhZ0V4b25QYXJlbnRUcmFuc2NyaXB0KSBvcHRpb24gdG8gXCJQYXJlbnRcIi5cbjQuIFVubWFwcGVkIHJlYWRzIGFyZSwgYnkgZGVmYXVsdCwgdW5zb3J0ZWQuIElmIHlvdSB3YW50IHRvIHNvcnQgdGhlbSBieSByZWFkIElELCBwbGVhc2Ugc3BlY2lmeSB0aGUgXCJTb3J0IHVubWFwcGVkIHJlYWRzXCIgb3B0aW9uLCB0aG91Z2gga2VlcCBpbiBtaW5kIHRoYXQgdGhpcyBjYW4gaW5jcmVhc2UgU1RBUiBydW4gdGltZS4iLAogICJzYmc6Y3JlYXRlZE9uIiA6IDE0NjI4MTExMjEsCiAgInNiZzpjb250cmlidXRvcnMiIDogWyAiYW5hX2QiLCAidXJvc19zaXBldGljIiwgImR1c2FuX3JhbmRqZWxvdmljIiBdLAogICJzYmc6dG9vbGtpdCIgOiAiU1RBUiIsCiAgInNiZzppZCIgOiAiYWRtaW4vc2JnLXB1YmxpYy1kYXRhL3N0YXItMi01LTEtYi80MSIsCiAgInNiZzpqb2IiIDogewogICAgImFsbG9jYXRlZFJlc291cmNlcyIgOiB7CiAgICAgICJjcHUiIDogMzIsCiAgICAgICJtZW0iIDogNjAwMDAKICAgIH0sCiAgICAiaW5wdXRzIiA6IHsKICAgICAgIkdFTk9NRV9ESVJfTkFNRSIgOiAiIiwKICAgICAgImFsaWduRW5kc1R5cGUiIDogIkxvY2FsIiwKICAgICAgImFsaWduSW50cm9uTWF4IiA6IDAsCiAgICAgICJhbGlnbkludHJvbk1pbiIgOiAwLAogICAgICAiYWxpZ25NYXRlc0dhcE1heCIgOiAwLAogICAgICAiYWxpZ25TSkRCb3ZlcmhhbmdNaW4iIDogMCwKICAgICAgImFsaWduU0pvdmVyaGFuZ01pbiIgOiAwLAogICAgICAiYWxpZ25TSnN0aXRjaE1pc21hdGNoTm1heCIgOiAiYWxpZ25TSnN0aXRjaE1pc21hdGNoTm1heC1zdHJpbmctdmFsdWUiLAogICAgICAiYWxpZ25Tb2Z0Q2xpcEF0UmVmZXJlbmNlRW5kcyIgOiAiWWVzIiwKICAgICAgImFsaWduU3BsaWNlZE1hdGVNYXBMbWluIiA6IDAsCiAgICAgICJhbGlnblNwbGljZWRNYXRlTWFwTG1pbk92ZXJMbWF0ZSIgOiAwLAogICAgICAiYWxpZ25UcmFuc2NyaXB0c1BlclJlYWRObWF4IiA6IDAsCiAgICAgICJhbGlnblRyYW5zY3JpcHRzUGVyV2luZG93Tm1heCIgOiAwLAogICAgICAiYWxpZ25XaW5kb3dzUGVyUmVhZE5tYXgiIDogMCwKICAgICAgImNoaW1GaWx0ZXIiIDogImJhbkdlbm9taWNOIiwKICAgICAgImNoaW1KdW5jdGlvbk92ZXJoYW5nTWluIiA6IDAsCiAgICAgICJjaGltT3V0VHlwZSIgOiAiV2l0aGluIiwKICAgICAgImNoaW1TY29yZURyb3BNYXgiIDogMCwKICAgICAgImNoaW1TY29yZUp1bmN0aW9uTm9uR1RBRyIgOiAwLAogICAgICAiY2hpbVNjb3JlTWluIiA6IDAsCiAgICAgICJjaGltU2NvcmVTZXBhcmF0aW9uIiA6IDAsCiAgICAgICJjaGltU2VnbWVudE1pbiIgOiAxNSwKICAgICAgImNoaW1TZWdtZW50UmVhZEdhcE1heCIgOiA4LAogICAgICAiY2xpcDNwQWRhcHRlck1NcCIgOiBbIDAgXSwKICAgICAgImNsaXAzcEFkYXB0ZXJTZXEiIDogWyAiY2xpcDNwQWRhcHRlclNlcSIgXSwKICAgICAgImNsaXAzcEFmdGVyQWRhcHRlck5iYXNlcyIgOiBbIDAgXSwKICAgICAgImNsaXAzcE5iYXNlcyIgOiBbIDAsIDMgXSwKICAgICAgImNsaXA1cE5iYXNlcyIgOiBbIDAgXSwKICAgICAgImdlbm9tZSIgOiB7CiAgICAgICAgImNsYXNzIiA6ICJGaWxlIiwKICAgICAgICAicGF0aCIgOiAiZ2Vub21lLmV4dCIsCiAgICAgICAgInNlY29uZGFyeUZpbGVzIiA6IFsgXSwKICAgICAgICAic2l6ZSIgOiAwCiAgICAgIH0sCiAgICAgICJsaW1pdEJBTXNvcnRSQU0iIDogMCwKICAgICAgImxpbWl0T3V0U0pjb2xsYXBzZWQiIDogMCwKICAgICAgImxpbWl0T3V0U0pvbmVSZWFkIiA6IDAsCiAgICAgICJsaW1pdFNqZGJJbnNlcnROc2oiIDogMCwKICAgICAgIm5vX3JlYWRfZ3JvdXBzIiA6IGZhbHNlLAogICAgICAib3V0RmlsdGVySW50cm9uTW90aWZzIiA6ICJOb25lIiwKICAgICAgIm91dEZpbHRlck1hdGNoTm1pbiIgOiAwLAogICAgICAib3V0RmlsdGVyTWF0Y2hObWluT3ZlckxyZWFkIiA6IDAsCiAgICAgICJvdXRGaWx0ZXJNaXNtYXRjaE5tYXgiIDogMCwKICAgICAgIm91dEZpbHRlck1pc21hdGNoTm92ZXJMbWF4IiA6IDAsCiAgICAgICJvdXRGaWx0ZXJNaXNtYXRjaE5vdmVyUmVhZExtYXgiIDogMCwKICAgICAgIm91dEZpbHRlck11bHRpbWFwTm1heCIgOiAwLAogICAgICAib3V0RmlsdGVyTXVsdGltYXBTY29yZVJhbmdlIiA6IDAsCiAgICAgICJvdXRGaWx0ZXJTY29yZU1pbiIgOiAwLAogICAgICAib3V0RmlsdGVyU2NvcmVNaW5PdmVyTHJlYWQiIDogMCwKICAgICAgIm91dEZpbHRlclR5cGUiIDogIk5vcm1hbCIsCiAgICAgICJvdXRNdWx0aW1hcHBlck9yZGVyIiA6ICJSYW5kb20iLAogICAgICAib3V0UVNjb252ZXJzaW9uQWRkIiA6IDAsCiAgICAgICJvdXRSZWFkc1VubWFwcGVkIiA6ICJGYXN0eCIsCiAgICAgICJvdXRTQU1hdHRySUhzdGFydCIgOiA2LAogICAgICAib3V0U0FNYXR0cmlidXRlcyIgOiAiU3RhbmRhcmQiLAogICAgICAib3V0U0FNZmlsdGVyIiA6ICJLZWVwT25seUFkZGVkUmVmZXJlbmNlIiwKICAgICAgIm91dFNBTWZsYWdBTkQiIDogMCwKICAgICAgIm91dFNBTWZsYWdPUiIgOiAwLAogICAgICAib3V0U0FNaGVhZGVySEQiIDogIm91dFNBTWhlYWRlckhEIiwKICAgICAgIm91dFNBTWhlYWRlclBHIiA6ICJvdXRTQU1oZWFkZXJQRyIsCiAgICAgICJvdXRTQU1tYXBxVW5pcXVlIiA6IDAsCiAgICAgICJvdXRTQU1tb2RlIiA6ICJGdWxsIiwKICAgICAgIm91dFNBTW11bHRObWF4IiA6IDAsCiAgICAgICJvdXRTQU1vcmRlciIgOiAiUGFpcmVkIiwKICAgICAgIm91dFNBTXByaW1hcnlGbGFnIiA6ICJPbmVCZXN0U2NvcmUiLAogICAgICAib3V0U0FNcmVhZElEIiA6ICJTdGFuZGFyZCIsCiAgICAgICJvdXRTQU1zdHJhbmRGaWVsZCIgOiAiTm9uZSIsCiAgICAgICJvdXRTQU10eXBlIiA6ICJTQU0iLAogICAgICAib3V0U0FNdW5tYXBwZWQiIDogIk5vbmUiLAogICAgICAib3V0U0pmaWx0ZXJDb3VudFRvdGFsTWluIiA6IFsgMywgMSwgMSwgMSBdLAogICAgICAib3V0U0pmaWx0ZXJDb3VudFVuaXF1ZU1pbiIgOiBbIDMsIDEsIDEsIDEgXSwKICAgICAgIm91dFNKZmlsdGVyRGlzdFRvT3RoZXJTSm1pbiIgOiBbIDAgXSwKICAgICAgIm91dFNKZmlsdGVySW50cm9uTWF4VnNSZWFkTiIgOiBbIDAgXSwKICAgICAgIm91dFNKZmlsdGVyT3ZlcmhhbmdNaW4iIDogWyAzMCwgMTIsIDEyLCAxMiBdLAogICAgICAib3V0U0pmaWx0ZXJSZWFkcyIgOiAiQWxsIiwKICAgICAgIm91dFNvcnRpbmdUeXBlIiA6ICJTb3J0ZWRCeUNvb3JkaW5hdGUiLAogICAgICAicXVhbnRNb2RlIiA6ICJUcmFuc2NyaXB0b21lU0FNIiwKICAgICAgInF1YW50VHJhbnNjcmlwdG9tZUJhbiIgOiAiSW5kZWxTb2Z0Y2xpcFNpbmdsZWVuZCIsCiAgICAgICJyZWFkTWFwTnVtYmVyIiA6IDAsCiAgICAgICJyZWFkTWF0ZXNMZW5ndGhzSW4iIDogIk5vdEVxdWFsIiwKICAgICAgInJlYWRzIiA6IFsgewogICAgICAgICJjbGFzcyIgOiAiRmlsZSIsCiAgICAgICAgIm1ldGFkYXRhIiA6IHsKICAgICAgICAgICJwYWlyZWRfZW5kIiA6ICIxIgogICAgICAgIH0sCiAgICAgICAgInBhdGgiIDogIi90ZXN0LWRhdGEvdGVzdF9zYW1wbGVfMS5mYXN0cSIsCiAgICAgICAgInNlY29uZGFyeUZpbGVzIiA6IFsgXSwKICAgICAgICAic2l6ZSIgOiAwCiAgICAgIH0gXSwKICAgICAgInJnX2xpYnJhcnlfaWQiIDogIiIsCiAgICAgICJyZ19tZmwiIDogInJnX21mbCIsCiAgICAgICJyZ19wbGF0Zm9ybSIgOiAiSW9uIFRvcnJlbnQgUEdNIiwKICAgICAgInJnX3BsYXRmb3JtX3VuaXRfaWQiIDogInJnX3BsYXRmb3JtX3VuaXQiLAogICAgICAicmdfc2FtcGxlX2lkIiA6ICJyZ19zYW1wbGUiLAogICAgICAicmdfc2VxX2NlbnRlciIgOiAiIiwKICAgICAgInNjb3JlRGVsQmFzZSIgOiAwLAogICAgICAic2NvcmVEZWxPcGVuIiA6IDAsCiAgICAgICJzY29yZUdhcCIgOiAwLAogICAgICAic2NvcmVHYXBBVEFDIiA6IDAsCiAgICAgICJzY29yZUdhcEdDQUciIDogMCwKICAgICAgInNjb3JlR2FwTm9uY2FuIiA6IDAsCiAgICAgICJzY29yZUdlbm9taWNMZW5ndGhMb2cyc2NhbGUiIDogMCwKICAgICAgInNjb3JlSW5zQmFzZSIgOiAwLAogICAgICAic2NvcmVJbnNPcGVuIiA6IDAsCiAgICAgICJzY29yZVN0aXRjaFNKc2hpZnQiIDogMCwKICAgICAgInNlZWRNdWx0aW1hcE5tYXgiIDogMCwKICAgICAgInNlZWROb25lTG9jaVBlcldpbmRvdyIgOiAwLAogICAgICAic2VlZFBlclJlYWRObWF4IiA6IDAsCiAgICAgICJzZWVkUGVyV2luZG93Tm1heCIgOiAwLAogICAgICAic2VlZFNlYXJjaExtYXgiIDogMCwKICAgICAgInNlZWRTZWFyY2hTdGFydExtYXgiIDogMCwKICAgICAgInNlZWRTZWFyY2hTdGFydExtYXhPdmVyTHJlYWQiIDogMCwKICAgICAgInNqZGJHVEZjaHJQcmVmaXgiIDogImNoclByZWZpeCIsCiAgICAgICJzamRiR1RGZmVhdHVyZUV4b24iIDogIiIsCiAgICAgICJzamRiR1RGZmlsZSIgOiBbIHsKICAgICAgICAicGF0aCIgOiAiL2RlbW8vdGVzdC1kYXRhL2NocjIwLmd0ZiIKICAgICAgfSBdLAogICAgICAic2pkYkdURnRhZ0V4b25QYXJlbnRHZW5lIiA6ICIiLAogICAgICAic2pkYkdURnRhZ0V4b25QYXJlbnRUcmFuc2NyaXB0IiA6ICIiLAogICAgICAic2pkYkluc2VydFNhdmUiIDogIkJhc2ljIiwKICAgICAgInNqZGJPdmVyaGFuZyIgOiBudWxsLAogICAgICAic2pkYlNjb3JlIiA6IG51bGwsCiAgICAgICJzb3J0VW5tYXBwZWRSZWFkcyIgOiB0cnVlLAogICAgICAidHdvcGFzczFyZWFkc04iIDogLTIsCiAgICAgICJ0d29wYXNzTW9kZSIgOiAiQmFzaWMiLAogICAgICAidW5tYXBwZWRPdXRwdXROYW1lIiA6ICJVbmNvbnRhbWltYXRlZCIsCiAgICAgICJ3aW5BbmNob3JEaXN0TmJpbnMiIDogMCwKICAgICAgIndpbkFuY2hvck11bHRpbWFwTm1heCIgOiAwLAogICAgICAid2luQmluTmJpdHMiIDogMCwKICAgICAgIndpbkZsYW5rTmJpbnMiIDogMAogICAgfQogIH0sCiAgInNiZzpzYmdNYWludGFpbmVkIiA6IGZhbHNlLAogICJ0ZW1wb3JhcnlGYWlsQ29kZXMiIDogWyBdLAogICJzYmc6bGlua3MiIDogWyB7CiAgICAiaWQiIDogImh0dHBzOi8vZ2l0aHViLmNvbS9hbGV4ZG9iaW4vU1RBUiIsCiAgICAibGFiZWwiIDogIkhvbWVwYWdlIgogIH0sIHsKICAgICJpZCIgOiAiaHR0cHM6Ly9naXRodWIuY29tL2FsZXhkb2Jpbi9TVEFSL3JlbGVhc2VzIiwKICAgICJsYWJlbCIgOiAiUmVsZWFzZXMiCiAgfSwgewogICAgImlkIiA6ICJodHRwczovL2dpdGh1Yi5jb20vYWxleGRvYmluL1NUQVIvYmxvYi9tYXN0ZXIvZG9jL1NUQVJtYW51YWwucGRmIiwKICAgICJsYWJlbCIgOiAiTWFudWFsIgogIH0sIHsKICAgICJpZCIgOiAiaHR0cHM6Ly9ncm91cHMuZ29vZ2xlLmNvbS9mb3J1bS8jIWZvcnVtL3JuYS1zdGFyIiwKICAgICJsYWJlbCIgOiAiU3VwcG9ydCIKICB9LCB7CiAgICAiaWQiIDogImh0dHA6Ly93d3cubmNiaS5ubG0ubmloLmdvdi9wdWJtZWQvMjMxMDQ4ODYiLAogICAgImxhYmVsIiA6ICJQdWJsaWNhdGlvbiIKICB9IF0sCiAgInNiZzp0b29sQXV0aG9yIiA6ICJBbGV4YW5kZXIgRG9iaW4vQ1NITCIsCiAgImlkIiA6ICJ1cm9zX3NpcGV0aWMvc3Rhci0yLTUtMWItZGVtby9zdGFyLTItNS0xLWIvNDEiLAogICJjbGFzcyIgOiAiQ29tbWFuZExpbmVUb29sIiwKICAic2JnOnByb2plY3QiIDogInVyb3Nfc2lwZXRpYy9zdGFyLTItNS0xYi1kZW1vIiwKICAic2JnOnJldmlzaW9uTm90ZXMiIDogIlVwZGF0ZSByZWFkIGdyb3VwIGV4cHJlc3Npb24gdG8gaGFuZGxlIGNhc2VzIHdpdGggZmlsZXMgd2l0aG91dCBhbnkgbWV0YWRhdGEuIiwKICAic2JnOm1vZGlmaWVkT24iIDogMTQ4NTQzNDE0NywKICAic2JnOmNtZFByZXZpZXciIDogInRhciAteHZmIGdlbm9tZS5leHQgJiYgL29wdC9TVEFSLTIuNS4xYi9iaW4vTGludXhfeDg2XzY0X3N0YXRpYy9TVEFSIC0tcnVuVGhyZWFkTiAzMiAgICAtLXNqZGJHVEZmaWxlIC9kZW1vL3Rlc3QtZGF0YS9jaHIyMC5ndGYgIC0tc2pkYkdURmNoclByZWZpeCBjaHJQcmVmaXggLS1zamRiSW5zZXJ0U2F2ZSBCYXNpYyAgLS10d29wYXNzMXJlYWRzTiAtMiAgLS1jaGltT3V0VHlwZSBXaXRoaW5TQU0gIC0tb3V0U0FNYXR0clJHbGluZSBJRDoxIFBJOnJnX21mbCBQTDpJb25fVG9ycmVudF9QR00gUFU6cmdfcGxhdGZvcm1fdW5pdCBTTTpyZ19zYW1wbGUgIC0tcXVhbnRNb2RlIFRyYW5zY3JpcHRvbWVTQU0gLS1vdXRGaWxlTmFtZVByZWZpeCAuL3Rlc3Rfc2FtcGxlXzEuZmFzdHEuICAtLXJlYWRGaWxlc0luIC90ZXN0LWRhdGEvdGVzdF9zYW1wbGVfMS5mYXN0cSAgJiYgdGFyIC12Y2YgdGVzdF9zYW1wbGVfMS5mYXN0cS5fU1RBUmdlbm9tZS50YXIgLi90ZXN0X3NhbXBsZV8xLmZhc3RxLl9TVEFSZ2Vub21lICAgJiYgY2F0IHRlc3Rfc2FtcGxlXzEuZmFzdHEuVW5tYXBwZWQub3V0Lm1hdGUxIHwgc2VkICdzL1xcdC4qLy8nIHwgcGFzdGUgLSAtIC0gLSB8IHNvcnQgLWsxLDEgLVMgMTBHIHwgdHIgJ1xcdCcgJ1xcbicgPiB0ZXN0X3NhbXBsZV8xLmZhc3RxLlVuY29udGFtaW1hdGVkLm1hdGUxLmZhc3RxICYmIHJtIHRlc3Rfc2FtcGxlXzEuZmFzdHEuVW5tYXBwZWQub3V0Lm1hdGUxIiwKICAic2JnOmxpY2Vuc2UiIDogIkdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIHYzLjAgb25seSIsCiAgImxhYmVsIiA6ICJTVEFSIiwKICAic2JnOm1vZGlmaWVkQnkiIDogInVyb3Nfc2lwZXRpYyIsCiAgInNiZzpsYXRlc3RSZXZpc2lvbiIgOiA0MSwKICAic2JnOmNyZWF0ZWRCeSIgOiAidXJvc19zaXBldGljIiwKICAieCIgOiA1ODMuNTI5NTU3MzgzMTg3OSwKICAieSIgOiAzMjIuMzUzMDU0MzA0MDI2OSwKICAic2JnOmltYWdlX3VybCIgOiBudWxsLAogICJzYmc6cmV2aXNpb25zSW5mbyIgOiBbIHsKICAgICJzYmc6bW9kaWZpZWRCeSIgOiAidXJvc19zaXBldGljIiwKICAgICJzYmc6bW9kaWZpZWRPbiIgOiAxNDYyODExMTIxLAogICAgInNiZzpyZXZpc2lvbiIgOiAwLAogICAgInNiZzpyZXZpc2lvbk5vdGVzIiA6IG51bGwKICB9LCB7CiAgICAic2JnOm1vZGlmaWVkQnkiIDogInVyb3Nfc2lwZXRpYyIsCiAgICAic2JnOm1vZGlmaWVkT24iIDogMTQ2Mjg3ODYyMywKICAgICJzYmc6cmV2aXNpb24iIDogMSwKICAgICJzYmc6cmV2aXNpb25Ob3RlcyIgOiBudWxsCiAgfSwgewogICAgInNiZzptb2RpZmllZEJ5IiA6ICJ1cm9zX3NpcGV0aWMiLAogICAgInNiZzptb2RpZmllZE9uIiA6IDE0NjI4Nzg4MjIsCiAgICAic2JnOnJldmlzaW9uIiA6IDIsCiAgICAic2JnOnJldmlzaW9uTm90ZXMiIDogbnVsbAogIH0sIHsKICAgICJzYmc6bW9kaWZpZWRCeSIgOiAiYW5hX2QiLAogICAgInNiZzptb2RpZmllZE9uIiA6IDE0NjI4ODg3NDQsCiAgICAic2JnOnJldmlzaW9uIiA6IDMsCiAgICAic2JnOnJldmlzaW9uTm90ZXMiIDogbnVsbAogIH0sIHsKICAgICJzYmc6bW9kaWZpZWRCeSIgOiAidXJvc19zaXBldGljIiwKICAgICJzYmc6bW9kaWZpZWRPbiIgOiAxNDY3MzA1NTE0LAogICAgInNiZzpyZXZpc2lvbiIgOiA0LAogICAgInNiZzpyZXZpc2lvbk5vdGVzIiA6IG51bGwKICB9LCB7CiAgICAic2JnOm1vZGlmaWVkQnkiIDogInVyb3Nfc2lwZXRpYyIsCiAgICAic2JnOm1vZGlmaWVkT24iIDogMTQ2OTQ1MjkxMCwKICAgICJzYmc6cmV2aXNpb24iIDogNSwKICAgICJzYmc6cmV2aXNpb25Ob3RlcyIgOiBudWxsCiAgfSwgewogICAgInNiZzptb2RpZmllZEJ5IiA6ICJ1cm9zX3NpcGV0aWMiLAogICAgInNiZzptb2RpZmllZE9uIiA6IDE0Njk0NTQ2ODcsCiAgICAic2JnOnJldmlzaW9uIiA6IDYsCiAgICAic2JnOnJldmlzaW9uTm90ZXMiIDogbnVsbAogIH0sIHsKICAgICJzYmc6bW9kaWZpZWRCeSIgOiAidXJvc19zaXBldGljIiwKICAgICJzYmc6bW9kaWZpZWRPbiIgOiAxNDY5NDU0ODQzLAogICAgInNiZzpyZXZpc2lvbiIgOiA3LAogICAgInNiZzpyZXZpc2lvbk5vdGVzIiA6IG51bGwKICB9LCB7CiAgICAic2JnOm1vZGlmaWVkQnkiIDogInVyb3Nfc2lwZXRpYyIsCiAgICAic2JnOm1vZGlmaWVkT24iIDogMTQ2OTQ1NjkxNywKICAgICJzYmc6cmV2aXNpb24iIDogOCwKICAgICJzYmc6cmV2aXNpb25Ob3RlcyIgOiBudWxsCiAgfSwgewogICAgInNiZzptb2RpZmllZEJ5IiA6ICJ1cm9zX3NpcGV0aWMiLAogICAgInNiZzptb2RpZmllZE9uIiA6IDE0Njk0NTczNDQsCiAgICAic2JnOnJldmlzaW9uIiA6IDksCiAgICAic2JnOnJldmlzaW9uTm90ZXMiIDogbnVsbAogIH0sIHsKICAgICJzYmc6bW9kaWZpZWRCeSIgOiAidXJvc19zaXBldGljIiwKICAgICJzYmc6bW9kaWZpZWRPbiIgOiAxNDY5NDU3MzkzLAogICAgInNiZzpyZXZpc2lvbiIgOiAxMCwKICAgICJzYmc6cmV2aXNpb25Ob3RlcyIgOiBudWxsCiAgfSwgewogICAgInNiZzptb2RpZmllZEJ5IiA6ICJ1cm9zX3NpcGV0aWMiLAogICAgInNiZzptb2RpZmllZE9uIiA6IDE0Njk0NTc0NDcsCiAgICAic2JnOnJldmlzaW9uIiA6IDExLAogICAgInNiZzpyZXZpc2lvbk5vdGVzIiA6IG51bGwKICB9LCB7CiAgICAic2JnOm1vZGlmaWVkQnkiIDogInVyb3Nfc2lwZXRpYyIsCiAgICAic2JnOm1vZGlmaWVkT24iIDogMTQ2OTQ1NzY0MiwKICAgICJzYmc6cmV2aXNpb24iIDogMTIsCiAgICAic2JnOnJldmlzaW9uTm90ZXMiIDogbnVsbAogIH0sIHsKICAgICJzYmc6bW9kaWZpZWRCeSIgOiAidXJvc19zaXBldGljIiwKICAgICJzYmc6bW9kaWZpZWRPbiIgOiAxNDY5NDU4Njg4LAogICAgInNiZzpyZXZpc2lvbiIgOiAxMywKICAgICJzYmc6cmV2aXNpb25Ob3RlcyIgOiBudWxsCiAgfSwgewogICAgInNiZzptb2RpZmllZEJ5IiA6ICJ1cm9zX3NpcGV0aWMiLAogICAgInNiZzptb2RpZmllZE9uIiA6IDE0Njk0NTg3NTgsCiAgICAic2JnOnJldmlzaW9uIiA6IDE0LAogICAgInNiZzpyZXZpc2lvbk5vdGVzIiA6IG51bGwKICB9LCB7CiAgICAic2JnOm1vZGlmaWVkQnkiIDogInVyb3Nfc2lwZXRpYyIsCiAgICAic2JnOm1vZGlmaWVkT24iIDogMTQ3MDY2MDc5NiwKICAgICJzYmc6cmV2aXNpb24iIDogMTUsCiAgICAic2JnOnJldmlzaW9uTm90ZXMiIDogbnVsbAogIH0sIHsKICAgICJzYmc6bW9kaWZpZWRCeSIgOiAidXJvc19zaXBldGljIiwKICAgICJzYmc6bW9kaWZpZWRPbiIgOiAxNDcxODYyNjQ1LAogICAgInNiZzpyZXZpc2lvbiIgOiAxNiwKICAgICJzYmc6cmV2aXNpb25Ob3RlcyIgOiBudWxsCiAgfSwgewogICAgInNiZzptb2RpZmllZEJ5IiA6ICJ1cm9zX3NpcGV0aWMiLAogICAgInNiZzptb2RpZmllZE9uIiA6IDE0NzE4NjU2NjUsCiAgICAic2JnOnJldmlzaW9uIiA6IDE3LAogICAgInNiZzpyZXZpc2lvbk5vdGVzIiA6IG51bGwKICB9LCB7CiAgICAic2JnOm1vZGlmaWVkQnkiIDogInVyb3Nfc2lwZXRpYyIsCiAgICAic2JnOm1vZGlmaWVkT24iIDogMTQ3MTg2NTgwMywKICAgICJzYmc6cmV2aXNpb24iIDogMTgsCiAgICAic2JnOnJldmlzaW9uTm90ZXMiIDogIkFkZGVkIHByb3BlciAncGFpcmVkX2VuZCcgbWV0YWRhdGEgdG8gJ3VubWFwcGVkX3JlYWRzJyBvdXRwdXQuIgogIH0sIHsKICAgICJzYmc6bW9kaWZpZWRCeSIgOiAidXJvc19zaXBldGljIiwKICAgICJzYmc6bW9kaWZpZWRPbiIgOiAxNDcxODcxMzI3LAogICAgInNiZzpyZXZpc2lvbiIgOiAxOSwKICAgICJzYmc6cmV2aXNpb25Ob3RlcyIgOiBudWxsCiAgfSwgewogICAgInNiZzptb2RpZmllZEJ5IiA6ICJ1cm9zX3NpcGV0aWMiLAogICAgInNiZzptb2RpZmllZE9uIiA6IDE0NzIyMDY5MjIsCiAgICAic2JnOnJldmlzaW9uIiA6IDIwLAogICAgInNiZzpyZXZpc2lvbk5vdGVzIiA6ICJBZGQgcHJvcGVyICdSZWZlcmVuY2UgR2Vub21lJyBtZXRhZGF0YSB0byBCQU0vU0FNIG91dHB1dHMuIgogIH0sIHsKICAgICJzYmc6bW9kaWZpZWRCeSIgOiAidXJvc19zaXBldGljIiwKICAgICJzYmc6bW9kaWZpZWRPbiIgOiAxNDcyNzM3NTE5LAogICAgInNiZzpyZXZpc2lvbiIgOiAyMSwKICAgICJzYmc6cmV2aXNpb25Ob3RlcyIgOiAiQWRkcmVzc2VkIHBlZXItcmV2aWV3IHRpY2tldHMuIgogIH0sIHsKICAgICJzYmc6bW9kaWZpZWRCeSIgOiAidXJvc19zaXBldGljIiwKICAgICJzYmc6bW9kaWZpZWRPbiIgOiAxNDczMDcwNjY2LAogICAgInNiZzpyZXZpc2lvbiIgOiAyMiwKICAgICJzYmc6cmV2aXNpb25Ob3RlcyIgOiAiQ2hhbmdlZCBudW1iZXIgb2YgY29yZXMgZnJvbSAxNSB0byAzMi4iCiAgfSwgewogICAgInNiZzptb2RpZmllZEJ5IiA6ICJhbmFfZCIsCiAgICAic2JnOm1vZGlmaWVkT24iIDogMTQ3NTE3MDQxOCwKICAgICJzYmc6cmV2aXNpb24iIDogMjMsCiAgICAic2JnOnJldmlzaW9uTm90ZXMiIDogIk11bHRpcGxlIHJlYWQgcGFpcnMgY2FuIGJlIGluY2x1ZGVkIGluIHRoZSBjb21tYW5kIGxpbmUgbm93LiBJbiBvcmRlciB0byBoYXZlIHRoZSBzYW1lIG9yZGVyIG9mIHRoZSBwYWlycywgXCJTYW1wbGUgSURcIiBtZXRhZGF0YSBoYXMgdG8gYmUgc2V0LiBPdGhlcndpc2UsIHBhaXJzIHdpbGwgYmUgb3JkZXJlZCByYW5kb21seS4iCiAgfSwgewogICAgInNiZzptb2RpZmllZEJ5IiA6ICJhbmFfZCIsCiAgICAic2JnOm1vZGlmaWVkT24iIDogMTQ3NTc0OTM5NSwKICAgICJzYmc6cmV2aXNpb24iIDogMjQsCiAgICAic2JnOnJldmlzaW9uTm90ZXMiIDogIkV4cHJlc3Npb24gZm9yIHJlYWRzIGlucHV0IGZpeGVkLiIKICB9LCB7CiAgICAic2JnOm1vZGlmaWVkQnkiIDogImR1c2FuX3JhbmRqZWxvdmljIiwKICAgICJzYmc6bW9kaWZpZWRPbiIgOiAxNDc2MjAwNjAyLAogICAgInNiZzpyZXZpc2lvbiIgOiAyNSwKICAgICJzYmc6cmV2aXNpb25Ob3RlcyIgOiAiVG9vbGtpdCB2ZXJzaW9uIGNoYW5nZWQgdG8gMi41LjFiIgogIH0sIHsKICAgICJzYmc6bW9kaWZpZWRCeSIgOiAidXJvc19zaXBldGljIiwKICAgICJzYmc6bW9kaWZpZWRPbiIgOiAxNDc2ODkzMTU5LAogICAgInNiZzpyZXZpc2lvbiIgOiAyNiwKICAgICJzYmc6cmV2aXNpb25Ob3RlcyIgOiAiVXBkYXRlIHNvbWUgZXhwcmVzc2lvbnMgdG8gYWNjcGV0IG11bHRpcGxlIGZhc3RxIGZpbGVzLiIKICB9LCB7CiAgICAic2JnOm1vZGlmaWVkQnkiIDogInVyb3Nfc2lwZXRpYyIsCiAgICAic2JnOm1vZGlmaWVkT24iIDogMTQ3NzQ4OTU5NCwKICAgICJzYmc6cmV2aXNpb24iIDogMjcsCiAgICAic2JnOnJldmlzaW9uTm90ZXMiIDogIlVubWFwcGVkIHJlYWRzIG91dHB1dCBleHRlbnNpb24gaXMgbm93IHRoZSBzYW1lIGFzIHRoZSBpbnB1dCByZWFkIGZpbGVzIGV4dGVuc2lvbnMuIgogIH0sIHsKICAgICJzYmc6bW9kaWZpZWRCeSIgOiAidXJvc19zaXBldGljIiwKICAgICJzYmc6bW9kaWZpZWRPbiIgOiAxNDc5MTMxMjk5LAogICAgInNiZzpyZXZpc2lvbiIgOiAyOCwKICAgICJzYmc6cmV2aXNpb25Ob3RlcyIgOiAiRml4ZWQgYW4gZW5jb2RpbmcgYnVnIHRoYXQgY291bGQgbWFuaWZlc3QgaW4gZG93bnN0cmVhbSBhbmFseXNpcyB1bmRlciBXaW5kb3dzIHBsYXRmb3JtLiIKICB9LCB7CiAgICAic2JnOm1vZGlmaWVkQnkiIDogInVyb3Nfc2lwZXRpYyIsCiAgICAic2JnOm1vZGlmaWVkT24iIDogMTQ3OTgwODk0MiwKICAgICJzYmc6cmV2aXNpb24iIDogMjksCiAgICAic2JnOnJldmlzaW9uTm90ZXMiIDogIkZpeCB1bm1hcHBlZCByZWFkcyBvdXRwdXQgYnVnIHdoZW4gbm8gdW5tYXBwZWQgcmVhZHMgYXJlIGZvdW5kLiIKICB9LCB7CiAgICAic2JnOm1vZGlmaWVkQnkiIDogInVyb3Nfc2lwZXRpYyIsCiAgICAic2JnOm1vZGlmaWVkT24iIDogMTQ3OTkxMTgwNiwKICAgICJzYmc6cmV2aXNpb24iIDogMzAsCiAgICAic2JnOnJldmlzaW9uTm90ZXMiIDogIkFkZCBvcHRpb24gdG8gcmVuYW1lIHVubWFwcGVkIG91dHB1dCBmaWxlcy4iCiAgfSwgewogICAgInNiZzptb2RpZmllZEJ5IiA6ICJ1cm9zX3NpcGV0aWMiLAogICAgInNiZzptb2RpZmllZE9uIiA6IDE0Nzk5MTkwMzcsCiAgICAic2JnOnJldmlzaW9uIiA6IDMxLAogICAgInNiZzpyZXZpc2lvbk5vdGVzIiA6ICJBZGQgcHJvcGVyIGdsb2IgZXhwcmVzc2lvbiBmb3IgdW5tYXBwZWQgcmVhZHMiCiAgfSwgewogICAgInNiZzptb2RpZmllZEJ5IiA6ICJ1cm9zX3NpcGV0aWMiLAogICAgInNiZzptb2RpZmllZE9uIiA6IDE0Nzk5MjE4MzcsCiAgICAic2JnOnJldmlzaW9uIiA6IDMyLAogICAgInNiZzpyZXZpc2lvbk5vdGVzIiA6ICJGaXggdW5tYXBwZWQgb3V0cHV0IGV4cHJlc3Npb24iCiAgfSwgewogICAgInNiZzptb2RpZmllZEJ5IiA6ICJ1cm9zX3NpcGV0aWMiLAogICAgInNiZzptb2RpZmllZE9uIiA6IDE0ODA1MTI2NTcsCiAgICAic2JnOnJldmlzaW9uIiA6IDMzLAogICAgInNiZzpyZXZpc2lvbk5vdGVzIiA6ICJVcGRhdGUgc2FtcGxlX2lkIG1ldGFkYXRhIG9uIG91dHB1dHMuIgogIH0sIHsKICAgICJzYmc6bW9kaWZpZWRCeSIgOiAidXJvc19zaXBldGljIiwKICAgICJzYmc6bW9kaWZpZWRPbiIgOiAxNDgwNTE2MDIwLAogICAgInNiZzpyZXZpc2lvbiIgOiAzNCwKICAgICJzYmc6cmV2aXNpb25Ob3RlcyIgOiAiVXBkYXRlIHNhbXBsZV9pZCBtZXRhZGF0YS4iCiAgfSwgewogICAgInNiZzptb2RpZmllZEJ5IiA6ICJ1cm9zX3NpcGV0aWMiLAogICAgInNiZzptb2RpZmllZE9uIiA6IDE0ODA1MjIyMjcsCiAgICAic2JnOnJldmlzaW9uIiA6IDM1LAogICAgInNiZzpyZXZpc2lvbk5vdGVzIiA6ICJBZGQgYm9vbGVhbiBvcHRpb24gZm9yIHR1cm5pbmcgb2ZmIHJlYWQgZ3JvdXBzLiIKICB9LCB7CiAgICAic2JnOm1vZGlmaWVkQnkiIDogInVyb3Nfc2lwZXRpYyIsCiAgICAic2JnOm1vZGlmaWVkT24iIDogMTQ4MTIwNTA4OCwKICAgICJzYmc6cmV2aXNpb24iIDogMzYsCiAgICAic2JnOnJldmlzaW9uTm90ZXMiIDogIkFkZCBvcHRpb24gdG8gc29ydCB1bm1hcHBlZCByZWFkcyBieSBJRC4iCiAgfSwgewogICAgInNiZzptb2RpZmllZEJ5IiA6ICJ1cm9zX3NpcGV0aWMiLAogICAgInNiZzptb2RpZmllZE9uIiA6IDE0ODEyMjYwNDgsCiAgICAic2JnOnJldmlzaW9uIiA6IDM3LAogICAgInNiZzpyZXZpc2lvbk5vdGVzIiA6ICJNYWtlIHNvcnRpbmcgdW5tYXBwZWQgcmVhZHMgYnkgcmVhZCBJRCB0aGUgZGVmYXVsdCBiZWhhdmlvci4iCiAgfSwgewogICAgInNiZzptb2RpZmllZEJ5IiA6ICJ1cm9zX3NpcGV0aWMiLAogICAgInNiZzptb2RpZmllZE9uIiA6IDE0ODEyODI4MDYsCiAgICAic2JnOnJldmlzaW9uIiA6IDM4LAogICAgInNiZzpyZXZpc2lvbk5vdGVzIiA6IG51bGwKICB9LCB7CiAgICAic2JnOm1vZGlmaWVkQnkiIDogInVyb3Nfc2lwZXRpYyIsCiAgICAic2JnOm1vZGlmaWVkT24iIDogMTQ4MTI4MzEzNywKICAgICJzYmc6cmV2aXNpb24iIDogMzksCiAgICAic2JnOnJldmlzaW9uTm90ZXMiIDogIkFkZCBvcHRpb24gdG8gc29ydCB1bm1hcHBlZCByZWFkcyBieSByZWFkIElEIChkZWZhdWx0IGlzIE9GRikuIgogIH0sIHsKICAgICJzYmc6bW9kaWZpZWRCeSIgOiAidXJvc19zaXBldGljIiwKICAgICJzYmc6bW9kaWZpZWRPbiIgOiAxNDg1NDMzODE3LAogICAgInNiZzpyZXZpc2lvbiIgOiA0MCwKICAgICJzYmc6cmV2aXNpb25Ob3RlcyIgOiAiVXBkYXRlIHJlYWQgZ3JvdXAgZXhwcmVzc2lvbiB0byBoYW5kbGUgY2FzZXMgd2l0aCBmaWxlcyB3aXRob3V0IGFueSBtZXRhZGF0YS4iCiAgfSwgewogICAgInNiZzptb2RpZmllZEJ5IiA6ICJ1cm9zX3NpcGV0aWMiLAogICAgInNiZzptb2RpZmllZE9uIiA6IDE0ODU0MzQxNDcsCiAgICAic2JnOnJldmlzaW9uIiA6IDQxLAogICAgInNiZzpyZXZpc2lvbk5vdGVzIiA6ICJVcGRhdGUgcmVhZCBncm91cCBleHByZXNzaW9uIHRvIGhhbmRsZSBjYXNlcyB3aXRoIGZpbGVzIHdpdGhvdXQgYW55IG1ldGFkYXRhLiIKICB9IF0sCiAgInNiZzp0b29sa2l0VmVyc2lvbiIgOiAiMi41LjFiIiwKICAic2JnOnZhbGlkYXRpb25FcnJvcnMiIDogWyBdCn0=",
  "status" : "COMPLETED",
  "inputs" : {
    "genome" : [ {
      "size" : 29381038080,
      "path" : "/media/storage/workdir/LocalRerun20170801163935/app-2017-08-02-115623.231/root/STAR_Genome_Generate/human_g1k_v37_decoy.phiX174_Homo_sapiens.GRCh37.75_star-2.5.1b.tar",
      "location" : "/media/storage/workdir/LocalRerun20170801163935/app-2017-08-02-115623.231/root/STAR_Genome_Generate/human_g1k_v37_decoy.phiX174_Homo_sapiens.GRCh37.75_star-2.5.1b.tar",
      "name" : "human_g1k_v37_decoy.phiX174_Homo_sapiens.GRCh37.75_star-2.5.1b.tar",
      "checksum" : "sha1$96c21aa73cc3ebf7db979bdb0f5527f9c751d593",
      "secondaryFiles" : [ ],
      "properties" : {
        "sbg:metadata" : {
          "reference_genome" : "human_g1k_v37_decoy.phiX174",
          "species" : "Homo sapiens"
        }
      },
      "$type" : "File"
    } ],
    "outReadsUnmapped" : "Fastx",
    "outSAMtype" : "BAM",
    "quantMode" : "TranscriptomeSAM",
    "reads" : [ {
      "size" : 18653028380,
      "path" : "/media/storage/workdir/LocalRerun20170801163935/app-2017-08-02-115623.231/root/SBG_FASTQ_Quality_Detector/1/G20479.HCC1143.2.converted.pe_2.fastq",
      "location" : "/media/storage/workdir/LocalRerun20170801163935/app-2017-08-02-115623.231/root/SBG_FASTQ_Quality_Detector/1/G20479.HCC1143.2.converted.pe_2.fastq",
      "name" : "G20479.HCC1143.2.converted.pe_2.fastq",
      "checksum" : "sha1$1099d08056ddc31c3ec4589139b44ced0622136c",
      "secondaryFiles" : [ ],
      "properties" : {
        "sbg:metadata" : {
          "case_id" : "CCLE-HCC1143",
          "experimental_strategy" : "RNA-Seq",
          "investigation" : "CCLE-BRCA",
          "paired_end" : "2",
          "platform" : "Illumina",
          "quality_scale" : "sanger",
          "reference_genome" : "HG19_Broad_variant",
          "sample_id" : "HCC1143",
          "sample_type" : "Cell Line"
        }
      },
      "$type" : "File"
    }, {
      "size" : 18653028380,
      "path" : "/media/storage/workdir/LocalRerun20170801163935/app-2017-08-02-115623.231/root/SBG_FASTQ_Quality_Detector/2/G20479.HCC1143.2.converted.pe_1.fastq",
      "location" : "/media/storage/workdir/LocalRerun20170801163935/app-2017-08-02-115623.231/root/SBG_FASTQ_Quality_Detector/2/G20479.HCC1143.2.converted.pe_1.fastq",
      "name" : "G20479.HCC1143.2.converted.pe_1.fastq",
      "checksum" : "sha1$e31f47f69a6a7e1717427918371abeff5ceb8091",
      "secondaryFiles" : [ ],
      "properties" : {
        "sbg:metadata" : {
          "case_id" : "CCLE-HCC1143",
          "experimental_strategy" : "RNA-Seq",
          "investigation" : "CCLE-BRCA",
          "paired_end" : "1",
          "platform" : "Illumina",
          "quality_scale" : "sanger",
          "reference_genome" : "HG19_Broad_variant",
          "sample_id" : "HCC1143",
          "sample_type" : "Cell Line"
        }
      },
      "$type" : "File"
    } ],
    "sjdbGTFfile" : [ {
      "size" : 847928511,
      "path" : "/media/storage/workdir/LocalRerun20170801163935/files/Homo_sapiens.GRCh37.75.gtf",
      "location" : "/media/storage/workdir/LocalRerun20170801163935/files/Homo_sapiens.GRCh37.75.gtf",
      "name" : "Homo_sapiens.GRCh37.75.gtf",
      "checksum" : "sha1$f46a5407f5fc1823860a7ddd7e1f322098f34d84",
      "secondaryFiles" : [ ],
      "properties" : {
        "sbg:metadata" : { }
      },
      "$type" : "File"
    } ],
    "sjdbOverhang" : 100
  },
  "outputs" : {
    "aligned_reads" : {
      "size" : 13401246774,
      "path" : "/media/storage/workdir/LocalRerun20170801163935/app-2017-08-02-115623.231/root/STAR_1/G20479.HCC1143.2.converted.pe.Aligned.out.bam",
      "location" : "/media/storage/workdir/LocalRerun20170801163935/app-2017-08-02-115623.231/root/STAR_1/G20479.HCC1143.2.converted.pe.Aligned.out.bam",
      "name" : "G20479.HCC1143.2.converted.pe.Aligned.out.bam",
      "checksum" : "sha1$d331c44b980e3db3d423aa017546297a71fe68c6",
      "secondaryFiles" : [ ],
      "properties" : {
        "sbg:metadata" : {
          "case_id" : "CCLE-HCC1143",
          "experimental_strategy" : "RNA-Seq",
          "investigation" : "CCLE-BRCA",
          "platform" : "Illumina",
          "quality_scale" : "sanger",
          "reference_genome" : "human_g1k_v37_decoy.phiX174",
          "sample_id" : "HCC1143",
          "sample_type" : "Cell Line"
        }
      },
      "$type" : "File"
    },
    "log_files" : [ {
      "size" : 56032408,
      "path" : "/media/storage/workdir/LocalRerun20170801163935/app-2017-08-02-115623.231/root/STAR_1/G20479.HCC1143.2.converted.pe.Log.out",
      "location" : "/media/storage/workdir/LocalRerun20170801163935/app-2017-08-02-115623.231/root/STAR_1/G20479.HCC1143.2.converted.pe.Log.out",
      "name" : "G20479.HCC1143.2.converted.pe.Log.out",
      "checksum" : "sha1$b1df4d914bf6cba11324583b3886e1837064a163",
      "secondaryFiles" : [ ],
      "properties" : {
        "sbg:metadata" : {
          "case_id" : "CCLE-HCC1143",
          "experimental_strategy" : "RNA-Seq",
          "investigation" : "CCLE-BRCA",
          "platform" : "Illumina",
          "quality_scale" : "sanger",
          "reference_genome" : "HG19_Broad_variant",
          "sample_id" : "HCC1143",
          "sample_type" : "Cell Line"
        }
      },
      "$type" : "File"
    }, {
      "size" : 3196,
      "path" : "/media/storage/workdir/LocalRerun20170801163935/app-2017-08-02-115623.231/root/STAR_1/G20479.HCC1143.2.converted.pe.Log.progress.out",
      "location" : "/media/storage/workdir/LocalRerun20170801163935/app-2017-08-02-115623.231/root/STAR_1/G20479.HCC1143.2.converted.pe.Log.progress.out",
      "name" : "G20479.HCC1143.2.converted.pe.Log.progress.out",
      "checksum" : "sha1$6decd363f02b02d6785abcc6316b8727e7a9ffd5",
      "secondaryFiles" : [ ],
      "properties" : {
        "sbg:metadata" : {
          "case_id" : "CCLE-HCC1143",
          "experimental_strategy" : "RNA-Seq",
          "investigation" : "CCLE-BRCA",
          "platform" : "Illumina",
          "quality_scale" : "sanger",
          "reference_genome" : "HG19_Broad_variant",
          "sample_id" : "HCC1143",
          "sample_type" : "Cell Line"
        }
      },
      "$type" : "File"
    }, {
      "size" : 1868,
      "path" : "/media/storage/workdir/LocalRerun20170801163935/app-2017-08-02-115623.231/root/STAR_1/G20479.HCC1143.2.converted.pe.Log.final.out",
      "location" : "/media/storage/workdir/LocalRerun20170801163935/app-2017-08-02-115623.231/root/STAR_1/G20479.HCC1143.2.converted.pe.Log.final.out",
      "name" : "G20479.HCC1143.2.converted.pe.Log.final.out",
      "checksum" : "sha1$e6bfa1c3916b13541e4370b3a06c0c34d06b27fa",
      "secondaryFiles" : [ ],
      "properties" : {
        "sbg:metadata" : {
          "case_id" : "CCLE-HCC1143",
          "experimental_strategy" : "RNA-Seq",
          "investigation" : "CCLE-BRCA",
          "platform" : "Illumina",
          "quality_scale" : "sanger",
          "reference_genome" : "HG19_Broad_variant",
          "sample_id" : "HCC1143",
          "sample_type" : "Cell Line"
        }
      },
      "$type" : "File"
    } ],
    "splice_junctions" : {
      "size" : 14306014,
      "path" : "/media/storage/workdir/LocalRerun20170801163935/app-2017-08-02-115623.231/root/STAR_1/G20479.HCC1143.2.converted.pe.SJ.out.tab",
      "location" : "/media/storage/workdir/LocalRerun20170801163935/app-2017-08-02-115623.231/root/STAR_1/G20479.HCC1143.2.converted.pe.SJ.out.tab",
      "name" : "G20479.HCC1143.2.converted.pe.SJ.out.tab",
      "checksum" : "sha1$3d4f7ec244b77c385642bf9e7ea319191ec5bb2e",
      "secondaryFiles" : [ ],
      "properties" : {
        "sbg:metadata" : {
          "case_id" : "CCLE-HCC1143",
          "experimental_strategy" : "RNA-Seq",
          "investigation" : "CCLE-BRCA",
          "platform" : "Illumina",
          "quality_scale" : "sanger",
          "reference_genome" : "HG19_Broad_variant",
          "sample_id" : "HCC1143",
          "sample_type" : "Cell Line"
        }
      },
      "$type" : "File"
    },
    "transcriptome_aligned_reads" : {
      "size" : 13773828395,
      "path" : "/media/storage/workdir/LocalRerun20170801163935/app-2017-08-02-115623.231/root/STAR_1/G20479.HCC1143.2.converted.pe.Aligned.toTranscriptome.out.bam",
      "location" : "/media/storage/workdir/LocalRerun20170801163935/app-2017-08-02-115623.231/root/STAR_1/G20479.HCC1143.2.converted.pe.Aligned.toTranscriptome.out.bam",
      "name" : "G20479.HCC1143.2.converted.pe.Aligned.toTranscriptome.out.bam",
      "checksum" : "sha1$222dd3ef22d45b0e9aaf153259288ae54c1bcd46",
      "secondaryFiles" : [ ],
      "properties" : {
        "sbg:metadata" : {
          "case_id" : "CCLE-HCC1143",
          "experimental_strategy" : "RNA-Seq",
          "investigation" : "CCLE-BRCA",
          "platform" : "Illumina",
          "quality_scale" : "sanger",
          "reference_genome" : "human_g1k_v37_decoy.phiX174",
          "sample_id" : "HCC1143",
          "sample_type" : "Cell Line"
        }
      },
      "$type" : "File"
    },
    "unmapped_reads" : [ {
      "size" : 574639500,
      "path" : "/media/storage/workdir/LocalRerun20170801163935/app-2017-08-02-115623.231/root/STAR_1/G20479.HCC1143.2.converted.pe.Unmapped.out.mate1.fastq",
      "location" : "/media/storage/workdir/LocalRerun20170801163935/app-2017-08-02-115623.231/root/STAR_1/G20479.HCC1143.2.converted.pe.Unmapped.out.mate1.fastq",
      "name" : "G20479.HCC1143.2.converted.pe.Unmapped.out.mate1.fastq",
      "checksum" : "sha1$3e23067b7d685aebba58cc0801ba4f25b4ba9ad2",
      "secondaryFiles" : [ ],
      "properties" : {
        "sbg:metadata" : {
          "case_id" : "CCLE-HCC1143",
          "experimental_strategy" : "RNA-Seq",
          "investigation" : "CCLE-BRCA",
          "paired_end" : "1",
          "platform" : "Illumina",
          "quality_scale" : "sanger",
          "reference_genome" : "HG19_Broad_variant",
          "sample_id" : "HCC1143",
          "sample_type" : "Cell Line"
        }
      },
      "$type" : "File"
    }, {
      "size" : 574639500,
      "path" : "/media/storage/workdir/LocalRerun20170801163935/app-2017-08-02-115623.231/root/STAR_1/G20479.HCC1143.2.converted.pe.Unmapped.out.mate2.fastq",
      "location" : "/media/storage/workdir/LocalRerun20170801163935/app-2017-08-02-115623.231/root/STAR_1/G20479.HCC1143.2.converted.pe.Unmapped.out.mate2.fastq",
      "name" : "G20479.HCC1143.2.converted.pe.Unmapped.out.mate2.fastq",
      "checksum" : "sha1$30e9a57983d546783e889d715c76b88a15fbbd08",
      "secondaryFiles" : [ ],
      "properties" : {
        "sbg:metadata" : {
          "case_id" : "CCLE-HCC1143",
          "experimental_strategy" : "RNA-Seq",
          "investigation" : "CCLE-BRCA",
          "paired_end" : "2",
          "platform" : "Illumina",
          "quality_scale" : "sanger",
          "reference_genome" : "HG19_Broad_variant",
          "sample_id" : "HCC1143",
          "sample_type" : "Cell Line"
        }
      },
      "$type" : "File"
    } ]
  },
  "resources" : {
    "cpu" : 32,
    "memMB" : 46967,
    "diskSpaceMB" : null,
    "networkAccess" : true,
    "workingDir" : null,
    "tmpDir" : null,
    "outDirSize" : null,
    "tmpDirSize" : null
  },
  "visiblePorts" : [ "log_files", "reads_per_gene", "unmapped_reads", "chimeric_junctions", "chimeric_alignments", "transcriptome_aligned_reads", "intermediate_genome", "splice_junctions" ]
}